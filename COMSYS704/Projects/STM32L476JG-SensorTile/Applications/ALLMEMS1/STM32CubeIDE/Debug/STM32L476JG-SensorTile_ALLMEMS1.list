
STM32L476JG-SensorTile_ALLMEMS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c28  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800bdb8  0800bdb8  0000bdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800c120  0800c120  0000c120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800c124  0800c124  0000c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  20000000  0800c128  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002888  200001e8  0800c310  000101e8  2**2
                  ALLOC
  7 .noinit       00000000  10000000  10000000  00000000  2**0
                  ALLOC
  8 .bss2         00000000  200001e8  200001e8  000101e8  2**0
                  CONTENTS
  9 ._user_heap_stack 00003000  20002a70  20002a70  00012a70  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 11 .comment      00000043  00000000  00000000  00010216  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002e97c  00000000  00000000  00010259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000ab  00000000  00000000  0003ebd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0002a0c7  00000000  00000000  0003ec80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005812  00000000  00000000  00068d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cb8  00000000  00000000  0006e560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001206da  00000000  00000000  00070218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000015e8  00000000  00000000  001908f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00011951  00000000  00000000  00191eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00031e32  00000000  00000000  001a382b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005684  00000000  00000000  001d5660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	200001e8 	.word	0x200001e8
 80041ac:	00000000 	.word	0x00000000
 80041b0:	0800bd9c 	.word	0x0800bd9c

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	200001ec 	.word	0x200001ec
 80041cc:	0800bd9c 	.word	0x0800bd9c

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004274:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004276:	e003      	b.n	8004280 <LoopCopyDataInit>

08004278 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800427a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800427c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800427e:	3104      	adds	r1, #4

08004280 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004280:	480b      	ldr	r0, [pc, #44]	; (80042b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004284:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004286:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004288:	d3f6      	bcc.n	8004278 <CopyDataInit>
	ldr	r2, =_sbss
 800428a:	4a0b      	ldr	r2, [pc, #44]	; (80042b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800428c:	e002      	b.n	8004294 <LoopFillZerobss>

0800428e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800428e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004290:	f842 3b04 	str.w	r3, [r2], #4

08004294 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <LoopForever+0x16>)
	cmp	r2, r3
 8004296:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004298:	d3f9      	bcc.n	800428e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800429a:	f001 fdcf 	bl	8005e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800429e:	f007 f9c3 	bl	800b628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042a2:	f001 f8c7 	bl	8005434 <main>

080042a6 <LoopForever>:

LoopForever:
    b LoopForever
 80042a6:	e7fe      	b.n	80042a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042a8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80042ac:	0800c128 	.word	0x0800c128
	ldr	r0, =_sdata
 80042b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80042b4:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80042b8:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80042bc:	20002a70 	.word	0x20002a70

080042c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042c0:	e7fe      	b.n	80042c0 <ADC1_2_IRQHandler>
	...

080042c4 <GAP_ConnectionComplete_CB>:
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <GAP_ConnectionComplete_CB+0x10>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80042ca:	8099      	strh	r1, [r3, #4]

#ifdef ALLMEMS1_DEBUG_CONNECTION
  ALLMEMS1_PRINTF("\r\n>>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
#endif /* ALLMEMS1_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <GAP_ConnectionComplete_CB+0x14>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
  


}
 80042d2:	4770      	bx	lr
 80042d4:	20000204 	.word	0x20000204
 80042d8:	20000800 	.word	0x20000800

080042dc <AccGyroMag_AttributeModified_CB>:
 * is subscribed or not to the Acc,Gyro and Mag service
 * @param uint8_t *att_data attribute data
 * @retval None
 */
static void AccGyroMag_AttributeModified_CB(uint8_t *att_data)
{
 80042dc:	b500      	push	{lr}
 80042de:	b0c1      	sub	sp, #260	; 0x104
  if (att_data[0] == 01) {
 80042e0:	7803      	ldrb	r3, [r0, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d011      	beq.n	800430a <AccGyroMag_AttributeModified_CB+0x2e>
    {
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
      /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
    }
  } else if (att_data[0] == 0) {
 80042e6:	b32b      	cbz	r3, 8004334 <AccGyroMag_AttributeModified_CB+0x58>
      /* Stopping Error */
      Error_Handler();
    }      
  }

    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 80042e8:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <AccGyroMag_AttributeModified_CB+0x78>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f013 0f04 	tst.w	r3, #4
 80042f0:	d02e      	beq.n	8004350 <AccGyroMag_AttributeModified_CB+0x74>
 80042f2:	4a19      	ldr	r2, [pc, #100]	; (8004358 <AccGyroMag_AttributeModified_CB+0x7c>)
 80042f4:	4919      	ldr	r1, [pc, #100]	; (800435c <AccGyroMag_AttributeModified_CB+0x80>)
 80042f6:	4668      	mov	r0, sp
 80042f8:	f007 f958 	bl	800b5ac <siprintf>
 80042fc:	4601      	mov	r1, r0
 80042fe:	4668      	mov	r0, sp
 8004300:	f001 fa88 	bl	8005814 <CDC_Fill_Buffer>

}
 8004304:	b041      	add	sp, #260	; 0x104
 8004306:	f85d fb04 	ldr.w	pc, [sp], #4
    W2ST_ON_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 800430a:	4a12      	ldr	r2, [pc, #72]	; (8004354 <AccGyroMag_AttributeModified_CB+0x78>)
 800430c:	6813      	ldr	r3, [r2, #0]
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004314:	210c      	movs	r1, #12
 8004316:	4812      	ldr	r0, [pc, #72]	; (8004360 <AccGyroMag_AttributeModified_CB+0x84>)
 8004318:	f004 fde8 	bl	8008eec <HAL_TIM_OC_Start_IT>
 800431c:	b938      	cbnz	r0, 800432e <AccGyroMag_AttributeModified_CB+0x52>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <AccGyroMag_AttributeModified_CB+0x84>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8004324:	490f      	ldr	r1, [pc, #60]	; (8004364 <AccGyroMag_AttributeModified_CB+0x88>)
 8004326:	6809      	ldr	r1, [r1, #0]
 8004328:	440b      	add	r3, r1
 800432a:	6413      	str	r3, [r2, #64]	; 0x40
 800432c:	e7dc      	b.n	80042e8 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 800432e:	f001 f813 	bl	8005358 <Error_Handler>
 8004332:	e7f4      	b.n	800431e <AccGyroMag_AttributeModified_CB+0x42>
    W2ST_OFF_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004334:	4a07      	ldr	r2, [pc, #28]	; (8004354 <AccGyroMag_AttributeModified_CB+0x78>)
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	f023 0304 	bic.w	r3, r3, #4
 800433c:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 800433e:	210c      	movs	r1, #12
 8004340:	4807      	ldr	r0, [pc, #28]	; (8004360 <AccGyroMag_AttributeModified_CB+0x84>)
 8004342:	f004 fea9 	bl	8009098 <HAL_TIM_OC_Stop_IT>
 8004346:	2800      	cmp	r0, #0
 8004348:	d0ce      	beq.n	80042e8 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 800434a:	f001 f805 	bl	8005358 <Error_Handler>
 800434e:	e7cb      	b.n	80042e8 <AccGyroMag_AttributeModified_CB+0xc>
    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004350:	4a05      	ldr	r2, [pc, #20]	; (8004368 <AccGyroMag_AttributeModified_CB+0x8c>)
 8004352:	e7cf      	b.n	80042f4 <AccGyroMag_AttributeModified_CB+0x18>
 8004354:	20000800 	.word	0x20000800
 8004358:	0800be18 	.word	0x0800be18
 800435c:	0800be28 	.word	0x0800be28
 8004360:	20000344 	.word	0x20000344
 8004364:	20000004 	.word	0x20000004
 8004368:	0800be20 	.word	0x0800be20

0800436c <GAP_DisconnectionComplete_CB>:
{
 800436c:	b530      	push	{r4, r5, lr}
 800436e:	b0c1      	sub	sp, #260	; 0x104
  connected = FALSE;
 8004370:	2500      	movs	r5, #0
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <GAP_DisconnectionComplete_CB+0x48>)
 8004374:	601d      	str	r5, [r3, #0]
  XPRINTF("<<<<<<DISCONNECTED\r\n");
 8004376:	46ec      	mov	ip, sp
 8004378:	4c0f      	ldr	r4, [pc, #60]	; (80043b8 <GAP_DisconnectionComplete_CB+0x4c>)
 800437a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800437c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004384:	f84c 0b04 	str.w	r0, [ip], #4
 8004388:	f88c 1000 	strb.w	r1, [ip]
 800438c:	2114      	movs	r1, #20
 800438e:	4668      	mov	r0, sp
 8004390:	f001 fa40 	bl	8005814 <CDC_Fill_Buffer>
  set_connectable = TRUE;
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <GAP_DisconnectionComplete_CB+0x50>)
 8004396:	2201      	movs	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
  ConnectionBleStatus=0;
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <GAP_DisconnectionComplete_CB+0x54>)
 800439c:	601d      	str	r5, [r3, #0]
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 800439e:	210c      	movs	r1, #12
 80043a0:	4808      	ldr	r0, [pc, #32]	; (80043c4 <GAP_DisconnectionComplete_CB+0x58>)
 80043a2:	f004 fe79 	bl	8009098 <HAL_TIM_OC_Stop_IT>
 80043a6:	b908      	cbnz	r0, 80043ac <GAP_DisconnectionComplete_CB+0x40>
}
 80043a8:	b041      	add	sp, #260	; 0x104
 80043aa:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80043ac:	f000 ffd4 	bl	8005358 <Error_Handler>
}
 80043b0:	e7fa      	b.n	80043a8 <GAP_DisconnectionComplete_CB+0x3c>
 80043b2:	bf00      	nop
 80043b4:	20000204 	.word	0x20000204
 80043b8:	0800be3c 	.word	0x0800be3c
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20000800 	.word	0x20000800
 80043c4:	20000344 	.word	0x20000344

080043c8 <safe_aci_gatt_update_char_value>:
{
 80043c8:	b510      	push	{r4, lr}
 80043ca:	b082      	sub	sp, #8
  if (breath > 0) {
 80043cc:	4c09      	ldr	r4, [pc, #36]	; (80043f4 <safe_aci_gatt_update_char_value+0x2c>)
 80043ce:	68a4      	ldr	r4, [r4, #8]
 80043d0:	2c00      	cmp	r4, #0
 80043d2:	dd05      	ble.n	80043e0 <safe_aci_gatt_update_char_value+0x18>
    breath--;
 80043d4:	3c01      	subs	r4, #1
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <safe_aci_gatt_update_char_value+0x2c>)
 80043d8:	609c      	str	r4, [r3, #8]
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 80043da:	2064      	movs	r0, #100	; 0x64
}
 80043dc:	b002      	add	sp, #8
 80043de:	bd10      	pop	{r4, pc}
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
 80043e0:	9c04      	ldr	r4, [sp, #16]
 80043e2:	9400      	str	r4, [sp, #0]
 80043e4:	f005 fd95 	bl	8009f12 <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS){
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d0f7      	beq.n	80043dc <safe_aci_gatt_update_char_value+0x14>
      breath = ACC_BLUENRG_CONGESTION_SKIP;
 80043ec:	4b01      	ldr	r3, [pc, #4]	; (80043f4 <safe_aci_gatt_update_char_value+0x2c>)
 80043ee:	221e      	movs	r2, #30
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	e7f3      	b.n	80043dc <safe_aci_gatt_update_char_value+0x14>
 80043f4:	20000204 	.word	0x20000204

080043f8 <Add_HW_SW_ServW2ST_Service>:
{
 80043f8:	b530      	push	{r4, r5, lr}
 80043fa:	b0cb      	sub	sp, #300	; 0x12c
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80043fc:	231b      	movs	r3, #27
 80043fe:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004402:	23c5      	movs	r3, #197	; 0xc5
 8004404:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 8004408:	23d5      	movs	r3, #213	; 0xd5
 800440a:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 800440e:	23a5      	movs	r3, #165	; 0xa5
 8004410:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8004414:	2002      	movs	r0, #2
 8004416:	f88d 011c 	strb.w	r0, [sp, #284]	; 0x11c
 800441a:	2300      	movs	r3, #0
 800441c:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004420:	22b4      	movs	r2, #180	; 0xb4
 8004422:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 8004426:	229a      	movs	r2, #154	; 0x9a
 8004428:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 800442c:	22e1      	movs	r2, #225	; 0xe1
 800442e:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004432:	2211      	movs	r2, #17
 8004434:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 8004438:	2201      	movs	r2, #1
 800443a:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 800443e:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 8004442:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 8004446:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 800444a:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
 800444e:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8004452:	4b35      	ldr	r3, [pc, #212]	; (8004528 <Add_HW_SW_ServW2ST_Service+0x130>)
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	230d      	movs	r3, #13
 8004458:	a946      	add	r1, sp, #280	; 0x118
 800445a:	f005 fcaf 	bl	8009dbc <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) {
 800445e:	2800      	cmp	r0, #0
 8004460:	d13e      	bne.n	80044e0 <Add_HW_SW_ServW2ST_Service+0xe8>
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8004462:	231b      	movs	r3, #27
 8004464:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004468:	23c5      	movs	r3, #197	; 0xc5
 800446a:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 800446e:	23d5      	movs	r3, #213	; 0xd5
 8004470:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004474:	23a5      	movs	r3, #165	; 0xa5
 8004476:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 800447a:	2102      	movs	r1, #2
 800447c:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
 8004480:	2300      	movs	r3, #0
 8004482:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004486:	2236      	movs	r2, #54	; 0x36
 8004488:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 800448c:	22ac      	movs	r2, #172	; 0xac
 800448e:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004492:	22e1      	movs	r2, #225	; 0xe1
 8004494:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004498:	2211      	movs	r2, #17
 800449a:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 800449e:	2201      	movs	r2, #1
 80044a0:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 80044a4:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 80044a8:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 80044ac:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 80044b0:	22e0      	movs	r2, #224	; 0xe0
 80044b2:	f88d 2126 	strb.w	r2, [sp, #294]	; 0x126
 80044b6:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+3*3*2,
 80044ba:	481c      	ldr	r0, [pc, #112]	; (800452c <Add_HW_SW_ServW2ST_Service+0x134>)
 80044bc:	f100 020e 	add.w	r2, r0, #14
 80044c0:	9205      	str	r2, [sp, #20]
 80044c2:	9304      	str	r3, [sp, #16]
 80044c4:	2210      	movs	r2, #16
 80044c6:	9203      	str	r2, [sp, #12]
 80044c8:	2404      	movs	r4, #4
 80044ca:	9402      	str	r4, [sp, #8]
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	9200      	str	r2, [sp, #0]
 80044d0:	2314      	movs	r3, #20
 80044d2:	aa46      	add	r2, sp, #280	; 0x118
 80044d4:	8980      	ldrh	r0, [r0, #12]
 80044d6:	f005 fcb6 	bl	8009e46 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) {
 80044da:	b9a0      	cbnz	r0, 8004506 <Add_HW_SW_ServW2ST_Service+0x10e>
}
 80044dc:	b04b      	add	sp, #300	; 0x12c
 80044de:	bd30      	pop	{r4, r5, pc}
	  XPRINTF("Error Creating Service\r\n");
 80044e0:	f10d 0c18 	add.w	ip, sp, #24
 80044e4:	4c12      	ldr	r4, [pc, #72]	; (8004530 <Add_HW_SW_ServW2ST_Service+0x138>)
 80044e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80044ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80044f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80044f4:	f88c 2000 	strb.w	r2, [ip]
 80044f8:	2118      	movs	r1, #24
 80044fa:	eb0d 0001 	add.w	r0, sp, r1
 80044fe:	f001 f989 	bl	8005814 <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR;
 8004502:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004504:	e7ea      	b.n	80044dc <Add_HW_SW_ServW2ST_Service+0xe4>
	  XPRINTF("Error Creating Characterstic\r\n");
 8004506:	ac06      	add	r4, sp, #24
 8004508:	4d0a      	ldr	r5, [pc, #40]	; (8004534 <Add_HW_SW_ServW2ST_Service+0x13c>)
 800450a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800450c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800450e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004512:	c407      	stmia	r4!, {r0, r1, r2}
 8004514:	f824 3b02 	strh.w	r3, [r4], #2
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	7023      	strb	r3, [r4, #0]
 800451c:	211e      	movs	r1, #30
 800451e:	a806      	add	r0, sp, #24
 8004520:	f001 f978 	bl	8005814 <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR;
 8004524:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004526:	e7d9      	b.n	80044dc <Add_HW_SW_ServW2ST_Service+0xe4>
 8004528:	20000210 	.word	0x20000210
 800452c:	20000204 	.word	0x20000204
 8004530:	0800be54 	.word	0x0800be54
 8004534:	0800be70 	.word	0x0800be70

08004538 <AccGyroMag_Update>:
{  
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	b0c8      	sub	sp, #288	; 0x120
 800453c:	4606      	mov	r6, r0
 800453e:	460d      	mov	r5, r1
 8004540:	4614      	mov	r4, r2
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8004542:	f001 fce5 	bl	8005f10 <HAL_GetTick>
 8004546:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 800454a:	f88d 010c 	strb.w	r0, [sp, #268]	; 0x10c
 800454e:	f001 fcdf 	bl	8005f10 <HAL_GetTick>
 8004552:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 8004556:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
  STORE_LE_16(buff+2 ,Acc->x);
 800455a:	6833      	ldr	r3, [r6, #0]
 800455c:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
 8004560:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004564:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
  STORE_LE_16(buff+4 ,Acc->y);
 8004568:	6873      	ldr	r3, [r6, #4]
 800456a:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
 800456e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004572:	f88d 3111 	strb.w	r3, [sp, #273]	; 0x111
  STORE_LE_16(buff+6 ,Acc->z);
 8004576:	68b3      	ldr	r3, [r6, #8]
 8004578:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
 800457c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004580:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
  STORE_LE_16(buff+8 ,Gyro->x*10);
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800458a:	0052      	lsls	r2, r2, #1
 800458c:	f88d 2114 	strb.w	r2, [sp, #276]	; 0x114
 8004590:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004594:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8004598:	f88d 3115 	strb.w	r3, [sp, #277]	; 0x115
  STORE_LE_16(buff+10,Gyro->y*10);
 800459c:	686b      	ldr	r3, [r5, #4]
 800459e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80045a2:	0052      	lsls	r2, r2, #1
 80045a4:	f88d 2116 	strb.w	r2, [sp, #278]	; 0x116
 80045a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045ac:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 80045b0:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
  STORE_LE_16(buff+12,Gyro->z);
 80045b4:	68ab      	ldr	r3, [r5, #8]
 80045b6:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 80045ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80045be:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
  STORE_LE_16(buff+14,Mag->x);
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 80045c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80045cc:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
  STORE_LE_16(buff+16,Mag->y);
 80045d0:	6863      	ldr	r3, [r4, #4]
 80045d2:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
 80045d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80045da:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
  STORE_LE_16(buff+18,Mag->z);
 80045de:	68a3      	ldr	r3, [r4, #8]
 80045e0:	f88d 311e 	strb.w	r3, [sp, #286]	; 0x11e
 80045e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80045e8:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
  ret = ACI_GATT_UPDATE_CHAR_VALUE(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+3*3*2, buff);
 80045ec:	480e      	ldr	r0, [pc, #56]	; (8004628 <AccGyroMag_Update+0xf0>)
 80045ee:	ab43      	add	r3, sp, #268	; 0x10c
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2314      	movs	r3, #20
 80045f4:	2200      	movs	r2, #0
 80045f6:	89c1      	ldrh	r1, [r0, #14]
 80045f8:	8980      	ldrh	r0, [r0, #12]
 80045fa:	f7ff fee5 	bl	80043c8 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 80045fe:	b908      	cbnz	r0, 8004604 <AccGyroMag_Update+0xcc>
}
 8004600:	b048      	add	sp, #288	; 0x120
 8004602:	bd70      	pop	{r4, r5, r6, pc}
      XPRINTF("Error Updating Acc/Gyro/Mag Char\r\n");
 8004604:	ac03      	add	r4, sp, #12
 8004606:	4d09      	ldr	r5, [pc, #36]	; (800462c <AccGyroMag_Update+0xf4>)
 8004608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800460a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800460c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800460e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	f824 3b02 	strh.w	r3, [r4], #2
 8004616:	0c1b      	lsrs	r3, r3, #16
 8004618:	7023      	strb	r3, [r4, #0]
 800461a:	2122      	movs	r1, #34	; 0x22
 800461c:	a803      	add	r0, sp, #12
 800461e:	f001 f8f9 	bl	8005814 <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 8004622:	2047      	movs	r0, #71	; 0x47
 8004624:	e7ec      	b.n	8004600 <AccGyroMag_Update+0xc8>
 8004626:	bf00      	nop
 8004628:	20000204 	.word	0x20000204
 800462c:	0800be90 	.word	0x0800be90

08004630 <setConnectable>:
{  
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	b092      	sub	sp, #72	; 0x48
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NodeName[1],NodeName[2],NodeName[3],NodeName[4],NodeName[5],NodeName[6],NodeName[7]};
 8004634:	2609      	movs	r6, #9
 8004636:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800463a:	4b37      	ldr	r3, [pc, #220]	; (8004718 <setConnectable+0xe8>)
 800463c:	f893 e001 	ldrb.w	lr, [r3, #1]
 8004640:	f88d e041 	strb.w	lr, [sp, #65]	; 0x41
 8004644:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004648:	f88d c042 	strb.w	ip, [sp, #66]	; 0x42
 800464c:	78dc      	ldrb	r4, [r3, #3]
 800464e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
 8004652:	7918      	ldrb	r0, [r3, #4]
 8004654:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8004658:	7959      	ldrb	r1, [r3, #5]
 800465a:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 800465e:	799a      	ldrb	r2, [r3, #6]
 8004660:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 8004664:	79db      	ldrb	r3, [r3, #7]
 8004666:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
  manuf_data[0 ] = 8U;
 800466a:	2508      	movs	r5, #8
 800466c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  manuf_data[1 ] = 0x09U;
 8004670:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
  manuf_data[2 ] = NodeName[1];/* Complete Name */
 8004674:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
  manuf_data[3 ] = NodeName[2];
 8004678:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
  manuf_data[4 ] = NodeName[3];
 800467c:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
  manuf_data[5 ] = NodeName[4];
 8004680:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
  manuf_data[6 ] = NodeName[5];
 8004684:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
  manuf_data[7 ] = NodeName[6];
 8004688:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  manuf_data[8 ] = NodeName[7];           
 800468c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  manuf_data[9 ] = 15U;
 8004690:	230f      	movs	r3, #15
 8004692:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  manuf_data[10] = 0xFFU;
 8004696:	23ff      	movs	r3, #255	; 0xff
 8004698:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  manuf_data[11] = 0x30U;/* STM Manufacter AD */
 800469c:	2330      	movs	r3, #48	; 0x30
 800469e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  manuf_data[12] = 0x00U;
 80046a2:	2400      	movs	r4, #0
 80046a4:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  manuf_data[13] = 0x02U;
 80046a8:	2302      	movs	r3, #2
 80046aa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  manuf_data[14] = 0x02U; /* Board Type */
 80046ae:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  manuf_data[15] = 0x08U; /* Firmware ID */
 80046b2:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
  manuf_data[16] = 0x00U;
 80046b6:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  manuf_data[17] = 0x00U;
 80046ba:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  manuf_data[18] = 0x00U;
 80046be:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  manuf_data[19] = bdaddr[5];
 80046c2:	4b16      	ldr	r3, [pc, #88]	; (800471c <setConnectable+0xec>)
 80046c4:	795a      	ldrb	r2, [r3, #5]
 80046c6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  manuf_data[20] = bdaddr[4];
 80046ca:	791a      	ldrb	r2, [r3, #4]
 80046cc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  manuf_data[21] = bdaddr[3];
 80046d0:	78da      	ldrb	r2, [r3, #3]
 80046d2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  manuf_data[22] = bdaddr[2];
 80046d6:	789a      	ldrb	r2, [r3, #2]
 80046d8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
  manuf_data[23] = bdaddr[1];
 80046dc:	785a      	ldrb	r2, [r3, #1]
 80046de:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
  manuf_data[24] = bdaddr[0];
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  hci_le_set_scan_resp_data(0,NULL);
 80046e8:	4621      	mov	r1, r4
 80046ea:	4620      	mov	r0, r4
 80046ec:	f005 fd89 	bl	800a202 <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 80046f0:	9406      	str	r4, [sp, #24]
 80046f2:	9405      	str	r4, [sp, #20]
 80046f4:	9404      	str	r4, [sp, #16]
 80046f6:	9403      	str	r4, [sp, #12]
 80046f8:	ab10      	add	r3, sp, #64	; 0x40
 80046fa:	9302      	str	r3, [sp, #8]
 80046fc:	9501      	str	r5, [sp, #4]
 80046fe:	9400      	str	r4, [sp, #0]
 8004700:	2301      	movs	r3, #1
 8004702:	4622      	mov	r2, r4
 8004704:	4621      	mov	r1, r4
 8004706:	4620      	mov	r0, r4
 8004708:	f005 fa60 	bl	8009bcc <aci_gap_set_discoverable>
  aci_gap_update_adv_data(25, manuf_data);
 800470c:	a909      	add	r1, sp, #36	; 0x24
 800470e:	2019      	movs	r0, #25
 8004710:	f005 fb03 	bl	8009d1a <aci_gap_update_adv_data>
}
 8004714:	b012      	add	sp, #72	; 0x48
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	200006b4 	.word	0x200006b4
 800471c:	20000330 	.word	0x20000330

08004720 <Read_Request_CB>:
{
 8004720:	b508      	push	{r3, lr}
  if(connection_handle != 0)
 8004722:	4b03      	ldr	r3, [pc, #12]	; (8004730 <Read_Request_CB+0x10>)
 8004724:	8898      	ldrh	r0, [r3, #4]
 8004726:	b900      	cbnz	r0, 800472a <Read_Request_CB+0xa>
}
 8004728:	bd08      	pop	{r3, pc}
    aci_gatt_allow_read(connection_handle);
 800472a:	f005 fc2a 	bl	8009f82 <aci_gatt_allow_read>
}
 800472e:	e7fb      	b.n	8004728 <Read_Request_CB+0x8>
 8004730:	20000204 	.word	0x20000204

08004734 <Attribute_Modified_CB>:
{
 8004734:	b508      	push	{r3, lr}
    	if(attr_handle == AccGyroMagCharHandle + 2) {
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <Attribute_Modified_CB+0x18>)
 8004738:	89db      	ldrh	r3, [r3, #14]
 800473a:	3302      	adds	r3, #2
 800473c:	4298      	cmp	r0, r3
 800473e:	d000      	beq.n	8004742 <Attribute_Modified_CB+0xe>
}
 8004740:	bd08      	pop	{r3, pc}
      AccGyroMag_AttributeModified_CB(att_data);
 8004742:	4608      	mov	r0, r1
 8004744:	f7ff fdca 	bl	80042dc <AccGyroMag_AttributeModified_CB>
}
 8004748:	e7fa      	b.n	8004740 <Attribute_Modified_CB+0xc>
 800474a:	bf00      	nop
 800474c:	20000204 	.word	0x20000204

08004750 <HCI_Event_CB>:
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
 8004750:	b530      	push	{r4, r5, lr}
 8004752:	b0c1      	sub	sp, #260	; 0x104
 8004754:	4605      	mov	r5, r0
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  XPRINTF("HCI_Event_CB\r\n\r\n");
 8004756:	46ec      	mov	ip, sp
 8004758:	4c1d      	ldr	r4, [pc, #116]	; (80047d0 <HCI_Event_CB+0x80>)
 800475a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800475c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	f88c 3000 	strb.w	r3, [ip]
 8004766:	2110      	movs	r1, #16
 8004768:	4668      	mov	r0, sp
 800476a:	f001 f853 	bl	8005814 <CDC_Fill_Buffer>

  if(hci_pckt->type != HCI_EVENT_PKT) {
 800476e:	782b      	ldrb	r3, [r5, #0]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d106      	bne.n	8004782 <HCI_Event_CB+0x32>
    return;
  }
  
  switch(event_pckt->evt){
 8004774:	786b      	ldrb	r3, [r5, #1]
 8004776:	2b3e      	cmp	r3, #62	; 0x3e
 8004778:	d008      	beq.n	800478c <HCI_Event_CB+0x3c>
 800477a:	2bff      	cmp	r3, #255	; 0xff
 800477c:	d010      	beq.n	80047a0 <HCI_Event_CB+0x50>
 800477e:	2b05      	cmp	r3, #5
 8004780:	d001      	beq.n	8004786 <HCI_Event_CB+0x36>
        break;
      }
    }
    break;
  }
}
 8004782:	b041      	add	sp, #260	; 0x104
 8004784:	bd30      	pop	{r4, r5, pc}
      GAP_DisconnectionComplete_CB();
 8004786:	f7ff fdf1 	bl	800436c <GAP_DisconnectionComplete_CB>
    break;
 800478a:	e7fa      	b.n	8004782 <HCI_Event_CB+0x32>
      switch(evt->subevent){
 800478c:	78eb      	ldrb	r3, [r5, #3]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d1f7      	bne.n	8004782 <HCI_Event_CB+0x32>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8004792:	f8b5 1005 	ldrh.w	r1, [r5, #5]
 8004796:	f105 0009 	add.w	r0, r5, #9
 800479a:	f7ff fd93 	bl	80042c4 <GAP_ConnectionComplete_CB>
        break;
 800479e:	e7f0      	b.n	8004782 <HCI_Event_CB+0x32>
      switch(blue_evt->ecode){
 80047a0:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 80047a4:	f640 4201 	movw	r2, #3073	; 0xc01
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d008      	beq.n	80047be <HCI_Event_CB+0x6e>
 80047ac:	f640 4214 	movw	r2, #3092	; 0xc14
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d1e6      	bne.n	8004782 <HCI_Event_CB+0x32>
          Read_Request_CB(pr->attr_handle);                    
 80047b4:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 80047b8:	f7ff ffb2 	bl	8004720 <Read_Request_CB>
        break;
 80047bc:	e7e1      	b.n	8004782 <HCI_Event_CB+0x32>
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 80047be:	7a6a      	ldrb	r2, [r5, #9]
 80047c0:	f105 010c 	add.w	r1, r5, #12
 80047c4:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 80047c8:	f7ff ffb4 	bl	8004734 <Attribute_Modified_CB>
        break;
 80047cc:	e7d9      	b.n	8004782 <HCI_Event_CB+0x32>
 80047ce:	bf00      	nop
 80047d0:	0800beb4 	.word	0x0800beb4

080047d4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	b0c9      	sub	sp, #292	; 0x124
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80047d8:	f002 fb08 	bl	8006dec <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047dc:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HCI_TL_SPI_Init+0xb4>)
 80047de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80047e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047e8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80047ec:	9200      	str	r2, [sp, #0]
 80047ee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047f2:	f042 0204 	orr.w	r2, r2, #4
 80047f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80047f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047fa:	f002 0204 	and.w	r2, r2, #4
 80047fe:	9201      	str	r2, [sp, #4]
 8004800:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004804:	f042 0202 	orr.w	r2, r2, #2
 8004808:	64da      	str	r2, [r3, #76]	; 0x4c
 800480a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	9302      	str	r3, [sp, #8]
 8004812:	9b02      	ldr	r3, [sp, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004814:	4e1d      	ldr	r6, [pc, #116]	; (800488c <HCI_TL_SPI_Init+0xb8>)
 8004816:	2201      	movs	r2, #1
 8004818:	2104      	movs	r1, #4
 800481a:	4630      	mov	r0, r6
 800481c:	f001 fd75 	bl	800630a <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8004820:	2320      	movs	r3, #32
 8004822:	9343      	str	r3, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004824:	4b1a      	ldr	r3, [pc, #104]	; (8004890 <HCI_TL_SPI_Init+0xbc>)
 8004826:	9344      	str	r3, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004828:	2400      	movs	r4, #0
 800482a:	9445      	str	r4, [sp, #276]	; 0x114
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800482c:	a943      	add	r1, sp, #268	; 0x10c
 800482e:	4819      	ldr	r0, [pc, #100]	; (8004894 <HCI_TL_SPI_Init+0xc0>)
 8004830:	f001 fbe0 	bl	8005ff4 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8004834:	2501      	movs	r5, #1
 8004836:	9543      	str	r5, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004838:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483c:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800483e:	a943      	add	r1, sp, #268	; 0x10c
 8004840:	4815      	ldr	r0, [pc, #84]	; (8004898 <HCI_TL_SPI_Init+0xc4>)
 8004842:	f001 fbd7 	bl	8005ff4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8004846:	2704      	movs	r7, #4
 8004848:	9743      	str	r7, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484a:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484c:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484e:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8004850:	a943      	add	r1, sp, #268	; 0x10c
 8004852:	4630      	mov	r0, r6
 8004854:	f001 fbce 	bl	8005ff4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004858:	462a      	mov	r2, r5
 800485a:	4639      	mov	r1, r7
 800485c:	4630      	mov	r0, r6
 800485e:	f001 fd54 	bl	800630a <HAL_GPIO_WritePin>

  XPRINTF("\r\nIntialised HCI SPI.\r\n");
 8004862:	f10d 0c0c 	add.w	ip, sp, #12
 8004866:	4c0d      	ldr	r4, [pc, #52]	; (800489c <HCI_TL_SPI_Init+0xc8>)
 8004868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800486a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800486e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004872:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004876:	2117      	movs	r1, #23
 8004878:	a803      	add	r0, sp, #12
 800487a:	f000 ffcb 	bl	8005814 <CDC_Fill_Buffer>
    
  return BSP_SPI1_Init();
 800487e:	f001 fa6f 	bl	8005d60 <BSP_SPI1_Init>
}
 8004882:	b049      	add	sp, #292	; 0x124
 8004884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	48000400 	.word	0x48000400
 8004890:	10110000 	.word	0x10110000
 8004894:	48000800 	.word	0x48000800
 8004898:	48001c00 	.word	0x48001c00
 800489c:	0800bec8 	.word	0x0800bec8

080048a0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80048a0:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 80048a2:	2120      	movs	r1, #32
 80048a4:	4806      	ldr	r0, [pc, #24]	; (80048c0 <HCI_TL_SPI_DeInit+0x20>)
 80048a6:	f001 fc91 	bl	80061cc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 80048aa:	2104      	movs	r1, #4
 80048ac:	4805      	ldr	r0, [pc, #20]	; (80048c4 <HCI_TL_SPI_DeInit+0x24>)
 80048ae:	f001 fc8d 	bl	80061cc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 80048b2:	2101      	movs	r1, #1
 80048b4:	4804      	ldr	r0, [pc, #16]	; (80048c8 <HCI_TL_SPI_DeInit+0x28>)
 80048b6:	f001 fc89 	bl	80061cc <HAL_GPIO_DeInit>
  return 0;
}
 80048ba:	2000      	movs	r0, #0
 80048bc:	bd08      	pop	{r3, pc}
 80048be:	bf00      	nop
 80048c0:	48000800 	.word	0x48000800
 80048c4:	48000400 	.word	0x48000400
 80048c8:	48001c00 	.word	0x48001c00

080048cc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80048cc:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80048ce:	4c09      	ldr	r4, [pc, #36]	; (80048f4 <HCI_TL_SPI_Reset+0x28>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	2101      	movs	r1, #1
 80048d4:	4620      	mov	r0, r4
 80048d6:	f001 fd18 	bl	800630a <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80048da:	2005      	movs	r0, #5
 80048dc:	f000 fd06 	bl	80052ec <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80048e0:	2201      	movs	r2, #1
 80048e2:	4611      	mov	r1, r2
 80048e4:	4620      	mov	r0, r4
 80048e6:	f001 fd10 	bl	800630a <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80048ea:	2005      	movs	r0, #5
 80048ec:	f000 fcfe 	bl	80052ec <HAL_Delay>
  return 0;
}  
 80048f0:	2000      	movs	r0, #0
 80048f2:	bd10      	pop	{r4, pc}
 80048f4:	48001c00 	.word	0x48001c00

080048f8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	4606      	mov	r6, r0
 80048fe:	460d      	mov	r5, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 8004900:	23ff      	movs	r3, #255	; 0xff
 8004902:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8004906:	4b1d      	ldr	r3, [pc, #116]	; (800497c <HCI_TL_SPI_Receive+0x84>)
 8004908:	e893 0003 	ldmia.w	r3, {r0, r1}
 800490c:	9002      	str	r0, [sp, #8]
 800490e:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8004912:	2200      	movs	r2, #0
 8004914:	2104      	movs	r1, #4
 8004916:	481a      	ldr	r0, [pc, #104]	; (8004980 <HCI_TL_SPI_Receive+0x88>)
 8004918:	f001 fcf7 	bl	800630a <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800491c:	2205      	movs	r2, #5
 800491e:	4669      	mov	r1, sp
 8004920:	a802      	add	r0, sp, #8
 8004922:	f001 f9e1 	bl	8005ce8 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8004926:	f89d 3000 	ldrb.w	r3, [sp]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d008      	beq.n	8004940 <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 800492e:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004930:	2201      	movs	r2, #1
 8004932:	2104      	movs	r1, #4
 8004934:	4812      	ldr	r0, [pc, #72]	; (8004980 <HCI_TL_SPI_Receive+0x88>)
 8004936:	f001 fce8 	bl	800630a <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 800493a:	4620      	mov	r0, r4
 800493c:	b004      	add	sp, #16
 800493e:	bd70      	pop	{r4, r5, r6, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8004940:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004944:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0) {
 8004948:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800494c:	d014      	beq.n	8004978 <HCI_TL_SPI_Receive+0x80>
      if (byte_count > size){
 800494e:	42ab      	cmp	r3, r5
 8004950:	d800      	bhi.n	8004954 <HCI_TL_SPI_Receive+0x5c>
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8004952:	461d      	mov	r5, r3
      for(len = 0; len < byte_count; len++)
 8004954:	2400      	movs	r4, #0
 8004956:	e00b      	b.n	8004970 <HCI_TL_SPI_Receive+0x78>
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8004958:	2201      	movs	r2, #1
 800495a:	f10d 010e 	add.w	r1, sp, #14
 800495e:	f10d 000f 	add.w	r0, sp, #15
 8004962:	f001 f9c1 	bl	8005ce8 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8004966:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800496a:	5533      	strb	r3, [r6, r4]
      for(len = 0; len < byte_count; len++)
 800496c:	3401      	adds	r4, #1
 800496e:	b2e4      	uxtb	r4, r4
 8004970:	b2a3      	uxth	r3, r4
 8004972:	42ab      	cmp	r3, r5
 8004974:	d3f0      	bcc.n	8004958 <HCI_TL_SPI_Receive+0x60>
 8004976:	e7db      	b.n	8004930 <HCI_TL_SPI_Receive+0x38>
  uint8_t len = 0;
 8004978:	2400      	movs	r4, #0
 800497a:	e7d9      	b.n	8004930 <HCI_TL_SPI_Receive+0x38>
 800497c:	0800bdb8 	.word	0x0800bdb8
 8004980:	48000400 	.word	0x48000400

08004984 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	b085      	sub	sp, #20
 8004988:	4607      	mov	r7, r0
 800498a:	460e      	mov	r6, r1
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800498c:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <HCI_TL_SPI_Send+0x7c>)
 800498e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004992:	9002      	str	r0, [sp, #8]
 8004994:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8004998:	f001 faba 	bl	8005f10 <HAL_GetTick>
 800499c:	4605      	mov	r5, r0
 800499e:	e011      	b.n	80049c4 <HCI_TL_SPI_Send+0x40>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
    
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 80049a0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80049a4:	42b3      	cmp	r3, r6
 80049a6:	d21e      	bcs.n	80049e6 <HCI_TL_SPI_Send+0x62>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 80049a8:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80049ac:	2201      	movs	r2, #1
 80049ae:	2104      	movs	r1, #4
 80049b0:	4814      	ldr	r0, [pc, #80]	; (8004a04 <HCI_TL_SPI_Send+0x80>)
 80049b2:	f001 fcaa 	bl	800630a <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80049b6:	f001 faab 	bl	8005f10 <HAL_GetTick>
 80049ba:	1b40      	subs	r0, r0, r5
 80049bc:	280f      	cmp	r0, #15
 80049be:	d819      	bhi.n	80049f4 <HCI_TL_SPI_Send+0x70>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80049c0:	2c00      	cmp	r4, #0
 80049c2:	da19      	bge.n	80049f8 <HCI_TL_SPI_Send+0x74>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80049c4:	2200      	movs	r2, #0
 80049c6:	2104      	movs	r1, #4
 80049c8:	480e      	ldr	r0, [pc, #56]	; (8004a04 <HCI_TL_SPI_Send+0x80>)
 80049ca:	f001 fc9e 	bl	800630a <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80049ce:	2205      	movs	r2, #5
 80049d0:	4669      	mov	r1, sp
 80049d2:	a802      	add	r0, sp, #8
 80049d4:	f001 f988 	bl	8005ce8 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 80049d8:	f89d 3000 	ldrb.w	r3, [sp]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d0df      	beq.n	80049a0 <HCI_TL_SPI_Send+0x1c>
      result = -1;
 80049e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80049e4:	e7e2      	b.n	80049ac <HCI_TL_SPI_Send+0x28>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80049e6:	4632      	mov	r2, r6
 80049e8:	4907      	ldr	r1, [pc, #28]	; (8004a08 <HCI_TL_SPI_Send+0x84>)
 80049ea:	4638      	mov	r0, r7
 80049ec:	f001 f97c 	bl	8005ce8 <BSP_SPI1_SendRecv>
    result = 0;
 80049f0:	2400      	movs	r4, #0
 80049f2:	e7db      	b.n	80049ac <HCI_TL_SPI_Send+0x28>
      result = -3;
 80049f4:	f06f 0402 	mvn.w	r4, #2
  
  return result;
}
 80049f8:	4620      	mov	r0, r4
 80049fa:	b005      	add	sp, #20
 80049fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fe:	bf00      	nop
 8004a00:	0800bdc0 	.word	0x0800bdc0
 8004a04:	48000400 	.word	0x48000400
 8004a08:	20000218 	.word	0x20000218

08004a0c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8004a0c:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8004a0e:	2120      	movs	r1, #32
 8004a10:	4803      	ldr	r0, [pc, #12]	; (8004a20 <IsDataAvailable+0x14>)
 8004a12:	f001 fc73 	bl	80062fc <HAL_GPIO_ReadPin>
} 
 8004a16:	2801      	cmp	r0, #1
 8004a18:	bf14      	ite	ne
 8004a1a:	2000      	movne	r0, #0
 8004a1c:	2001      	moveq	r0, #1
 8004a1e:	bd08      	pop	{r3, pc}
 8004a20:	48000800 	.word	0x48000800

08004a24 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8004a24:	b500      	push	{lr}
 8004a26:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <hci_tl_lowlevel_init+0x38>)
 8004a2a:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <hci_tl_lowlevel_init+0x3c>)
 8004a2e:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <hci_tl_lowlevel_init+0x40>)
 8004a32:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <hci_tl_lowlevel_init+0x44>)
 8004a36:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <hci_tl_lowlevel_init+0x48>)
 8004a3a:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <hci_tl_lowlevel_init+0x4c>)
 8004a3e:	9307      	str	r3, [sp, #28]
  
  hci_register_io_bus (&fops);
 8004a40:	a801      	add	r0, sp, #4
 8004a42:	f005 fc9f 	bl	800a384 <hci_register_io_bus>
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  //HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
  //HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x03, 0x00);
 8004a46:	2200      	movs	r2, #0
 8004a48:	2103      	movs	r1, #3
 8004a4a:	2017      	movs	r0, #23
 8004a4c:	f001 fa78 	bl	8005f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a50:	2017      	movs	r0, #23
 8004a52:	f001 faad 	bl	8005fb0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8004a56:	b009      	add	sp, #36	; 0x24
 8004a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a5c:	080047d5 	.word	0x080047d5
 8004a60:	080048a1 	.word	0x080048a1
 8004a64:	08004985 	.word	0x08004985
 8004a68:	080048f9 	.word	0x080048f9
 8004a6c:	080048cd 	.word	0x080048cd
 8004a70:	08005d15 	.word	0x08005d15

08004a74 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8004a74:	b508      	push	{r3, lr}
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8004a76:	f7ff ffc9 	bl	8004a0c <IsDataAvailable>
 8004a7a:	b120      	cbz	r0, 8004a86 <hci_tl_lowlevel_isr+0x12>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f005 fd5b 	bl	800a538 <hci_notify_asynch_evt>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	d0f7      	beq.n	8004a76 <hci_tl_lowlevel_isr+0x2>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8004a86:	bd08      	pop	{r3, pc}

08004a88 <readMag>:
static void readMag() {

	//#CS704 - Read Magnetometer Data over SPI

	//#CS704 - store sensor values into the variables below
	MAG_Value.x=100;
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <readMag+0x14>)
 8004a8a:	2264      	movs	r2, #100	; 0x64
 8004a8c:	601a      	str	r2, [r3, #0]
	MAG_Value.y=200;
 8004a8e:	22c8      	movs	r2, #200	; 0xc8
 8004a90:	605a      	str	r2, [r3, #4]
	MAG_Value.z=1000;
 8004a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a96:	609a      	str	r2, [r3, #8]

//	XPRINTF("MAG=%d,%d,%d\r\n",magx,magy,magz);
}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000318 	.word	0x20000318

08004aa0 <readAcc>:
static void readAcc() {

	//#CS704 - Read Accelerometer Data over SPI

	//#CS704 - store sensor values into the variables below
	ACC_Value.x=100;
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <readAcc+0x14>)
 8004aa2:	2264      	movs	r2, #100	; 0x64
 8004aa4:	60da      	str	r2, [r3, #12]
	ACC_Value.y=200;
 8004aa6:	22c8      	movs	r2, #200	; 0xc8
 8004aa8:	611a      	str	r2, [r3, #16]
	ACC_Value.z=1000;
 8004aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aae:	615a      	str	r2, [r3, #20]

//	XPRINTF("ACC=%d,%d,%d\r\n",accx,accy,accz);
}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	20000318 	.word	0x20000318

08004ab8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	b0ba      	sub	sp, #232	; 0xe8
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004abc:	2400      	movs	r4, #0
 8004abe:	9435      	str	r4, [sp, #212]	; 0xd4
 8004ac0:	9436      	str	r4, [sp, #216]	; 0xd8
 8004ac2:	9437      	str	r4, [sp, #220]	; 0xdc
 8004ac4:	9438      	str	r4, [sp, #224]	; 0xe0
 8004ac6:	9439      	str	r4, [sp, #228]	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ac8:	2244      	movs	r2, #68	; 0x44
 8004aca:	4621      	mov	r1, r4
 8004acc:	a824      	add	r0, sp, #144	; 0x90
 8004ace:	f006 fd8d 	bl	800b5ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ad2:	2288      	movs	r2, #136	; 0x88
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	a802      	add	r0, sp, #8
 8004ad8:	f006 fd88 	bl	800b5ec <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 8004adc:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <SystemClock_Config+0xd0>)
 8004ade:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ae0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ae4:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 8004af0:	f002 f964 	bl	8006dbc <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8004af4:	2304      	movs	r3, #4
 8004af6:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004af8:	2301      	movs	r3, #1
 8004afa:	9326      	str	r3, [sp, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8004afc:	a824      	add	r0, sp, #144	; 0x90
 8004afe:	f002 fa1f 	bl	8006f40 <HAL_RCC_OscConfig>
 8004b02:	b100      	cbz	r0, 8004b06 <SystemClock_Config+0x4e>
    while(1);
 8004b04:	e7fe      	b.n	8004b04 <SystemClock_Config+0x4c>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 8004b06:	f003 f96d 	bl	8007de4 <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004b12:	2200      	movs	r2, #0
 8004b14:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 8004b16:	22b0      	movs	r2, #176	; 0xb0
 8004b18:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 8004b1e:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 8004b20:	2306      	movs	r3, #6
 8004b22:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 8004b24:	2328      	movs	r3, #40	; 0x28
 8004b26:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 8004b28:	2307      	movs	r3, #7
 8004b2a:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 8004b30:	9334      	str	r3, [sp, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8004b32:	a824      	add	r0, sp, #144	; 0x90
 8004b34:	f002 fa04 	bl	8006f40 <HAL_RCC_OscConfig>
 8004b38:	b100      	cbz	r0, 8004b3c <SystemClock_Config+0x84>
    while(1);
 8004b3a:	e7fe      	b.n	8004b3a <SystemClock_Config+0x82>
  }
  
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b40:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b46:	9323      	str	r3, [sp, #140]	; 0x8c
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b48:	a802      	add	r0, sp, #8
 8004b4a:	f002 ff21 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
 8004b4e:	b100      	cbz	r0, 8004b52 <SystemClock_Config+0x9a>
  {
    while(1);
 8004b50:	e7fe      	b.n	8004b50 <SystemClock_Config+0x98>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 8004b52:	f003 f955 	bl	8007e00 <HAL_RCCEx_EnableMSIPLLMode>
  
  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b5a:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8004b5c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8004b60:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004b62:	a802      	add	r0, sp, #8
 8004b64:	f002 ff14 	bl	8007990 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004b68:	230f      	movs	r3, #15
 8004b6a:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b70:	2300      	movs	r3, #0
 8004b72:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b74:	9338      	str	r3, [sp, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b76:	9339      	str	r3, [sp, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK){
 8004b78:	2104      	movs	r1, #4
 8004b7a:	a835      	add	r0, sp, #212	; 0xd4
 8004b7c:	f002 fcf6 	bl	800756c <HAL_RCC_ClockConfig>
 8004b80:	b100      	cbz	r0, 8004b84 <SystemClock_Config+0xcc>
    while(1);
 8004b82:	e7fe      	b.n	8004b82 <SystemClock_Config+0xca>
  }
}
 8004b84:	b03a      	add	sp, #232	; 0xe8
 8004b86:	bd10      	pop	{r4, pc}
 8004b88:	40021000 	.word	0x40021000

08004b8c <BSP_LSM303AGR_WriteReg_Acc>:
{
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	460d      	mov	r5, r1
 8004b92:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8004b94:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_ACC_CS_LOW();
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2110      	movs	r1, #16
 8004b9c:	480f      	ldr	r0, [pc, #60]	; (8004bdc <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 8004b9e:	f001 fbb4 	bl	800630a <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	f10d 0007 	add.w	r0, sp, #7
 8004ba8:	f001 f88c 	bl	8005cc4 <BSP_SPI2_Send>
 8004bac:	2801      	cmp	r0, #1
 8004bae:	d00f      	beq.n	8004bd0 <BSP_LSM303AGR_WriteReg_Acc+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004bb0:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f001 f884 	bl	8005cc4 <BSP_SPI2_Send>
 8004bbc:	42a0      	cmp	r0, r4
 8004bbe:	d109      	bne.n	8004bd4 <BSP_LSM303AGR_WriteReg_Acc+0x48>
  LSM_ACC_CS_HIGH();
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2110      	movs	r1, #16
 8004bc4:	4805      	ldr	r0, [pc, #20]	; (8004bdc <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 8004bc6:	f001 fba0 	bl	800630a <HAL_GPIO_WritePin>
}
 8004bca:	4630      	mov	r0, r6
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 8004bd0:	2600      	movs	r6, #0
 8004bd2:	e7ef      	b.n	8004bb4 <BSP_LSM303AGR_WriteReg_Acc+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004bd4:	f06f 0605 	mvn.w	r6, #5
 8004bd8:	e7f2      	b.n	8004bc0 <BSP_LSM303AGR_WriteReg_Acc+0x34>
 8004bda:	bf00      	nop
 8004bdc:	48000800 	.word	0x48000800

08004be0 <BSP_LSM303AGR_WriteReg_Mag>:
{
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	460d      	mov	r5, r1
 8004be6:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8004be8:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_MAG_CS_LOW();
 8004bec:	2200      	movs	r2, #0
 8004bee:	2102      	movs	r1, #2
 8004bf0:	480f      	ldr	r0, [pc, #60]	; (8004c30 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 8004bf2:	f001 fb8a 	bl	800630a <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	f10d 0007 	add.w	r0, sp, #7
 8004bfc:	f001 f862 	bl	8005cc4 <BSP_SPI2_Send>
 8004c00:	2801      	cmp	r0, #1
 8004c02:	d00f      	beq.n	8004c24 <BSP_LSM303AGR_WriteReg_Mag+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004c04:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 8004c08:	4621      	mov	r1, r4
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f001 f85a 	bl	8005cc4 <BSP_SPI2_Send>
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d109      	bne.n	8004c28 <BSP_LSM303AGR_WriteReg_Mag+0x48>
  LSM_MAG_CS_HIGH();
 8004c14:	2201      	movs	r2, #1
 8004c16:	2102      	movs	r1, #2
 8004c18:	4805      	ldr	r0, [pc, #20]	; (8004c30 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 8004c1a:	f001 fb76 	bl	800630a <HAL_GPIO_WritePin>
}
 8004c1e:	4630      	mov	r0, r6
 8004c20:	b002      	add	sp, #8
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 8004c24:	2600      	movs	r6, #0
 8004c26:	e7ef      	b.n	8004c08 <BSP_LSM303AGR_WriteReg_Mag+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8004c28:	f06f 0605 	mvn.w	r6, #5
 8004c2c:	e7f2      	b.n	8004c14 <BSP_LSM303AGR_WriteReg_Mag+0x34>
 8004c2e:	bf00      	nop
 8004c30:	48000400 	.word	0x48000400

08004c34 <Init_BlueNRG_Stack>:
{
 8004c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c36:	b0d3      	sub	sp, #332	; 0x14c
  char customName[8] = "CSys704";
 8004c38:	4a6d      	ldr	r2, [pc, #436]	; (8004df0 <Init_BlueNRG_Stack+0x1bc>)
 8004c3a:	ab4e      	add	r3, sp, #312	; 0x138
 8004c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c40:	e883 0003 	stmia.w	r3, {r0, r1}
  for(int i=0; i<7; i++)
 8004c44:	2300      	movs	r3, #0
 8004c46:	2b06      	cmp	r3, #6
 8004c48:	dc08      	bgt.n	8004c5c <Init_BlueNRG_Stack+0x28>
    BoardName[i]= customName[i];
 8004c4a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8004c4e:	446a      	add	r2, sp
 8004c50:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8004c54:	f802 1c08 	strb.w	r1, [r2, #-8]
  for(int i=0; i<7; i++)
 8004c58:	3301      	adds	r3, #1
 8004c5a:	e7f4      	b.n	8004c46 <Init_BlueNRG_Stack+0x12>
  BoardName[7]= 0;
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	f88d 1147 	strb.w	r1, [sp, #327]	; 0x147
  hci_init(HCI_Event_CB, NULL);
 8004c62:	4864      	ldr	r0, [pc, #400]	; (8004df4 <Init_BlueNRG_Stack+0x1c0>)
 8004c64:	f005 fb64 	bl	800a330 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8004c68:	f50d 7197 	add.w	r1, sp, #302	; 0x12e
 8004c6c:	a84c      	add	r0, sp, #304	; 0x130
 8004c6e:	f005 fa46 	bl	800a0fe <getBlueNRGVersion>
  aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, 6, &data_len_out, bdaddr);
 8004c72:	4c61      	ldr	r4, [pc, #388]	; (8004df8 <Init_BlueNRG_Stack+0x1c4>)
 8004c74:	f104 0318 	add.w	r3, r4, #24
 8004c78:	f20d 1231 	addw	r2, sp, #305	; 0x131
 8004c7c:	2106      	movs	r1, #6
 8004c7e:	2080      	movs	r0, #128	; 0x80
 8004c80:	f005 f9d9 	bl	800a036 <aci_hal_read_config_data>
  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8004c84:	7f63      	ldrb	r3, [r4, #29]
 8004c86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c8c:	d016      	beq.n	8004cbc <Init_BlueNRG_Stack+0x88>
    XPRINTF("\r\nStatic Random address not well formed.\r\n");
 8004c8e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8004c92:	4c5a      	ldr	r4, [pc, #360]	; (8004dfc <Init_BlueNRG_Stack+0x1c8>)
 8004c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004c9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004ca0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004ca4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004ca8:	f82c 2b02 	strh.w	r2, [ip], #2
 8004cac:	0c12      	lsrs	r2, r2, #16
 8004cae:	f88c 2000 	strb.w	r2, [ip]
 8004cb2:	212a      	movs	r1, #42	; 0x2a
 8004cb4:	a80b      	add	r0, sp, #44	; 0x2c
 8004cb6:	f000 fdad 	bl	8005814 <CDC_Fill_Buffer>
    while(1);
 8004cba:	e7fe      	b.n	8004cba <Init_BlueNRG_Stack+0x86>
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, data_len_out,
 8004cbc:	4a50      	ldr	r2, [pc, #320]	; (8004e00 <Init_BlueNRG_Stack+0x1cc>)
 8004cbe:	f89d 1131 	ldrb.w	r1, [sp, #305]	; 0x131
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f005 f984 	bl	8009fd0 <aci_hal_write_config_data>
  hci_reset();
 8004cc8:	f005 fa42 	bl	800a150 <hci_reset>
  ret = aci_gatt_init();    
 8004ccc:	f005 f855 	bl	8009d7a <aci_gatt_init>
  if(ret){
 8004cd0:	bb38      	cbnz	r0, 8004d22 <Init_BlueNRG_Stack+0xee>
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8004cd2:	f50d 7399 	add.w	r3, sp, #306	; 0x132
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	ab4d      	add	r3, sp, #308	; 0x134
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	f50d 739b 	add.w	r3, sp, #310	; 0x136
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	f004 ff39 	bl	8009b5c <aci_gap_init_IDB05A1>
  if(ret != BLE_STATUS_SUCCESS){
 8004cea:	bb48      	cbnz	r0, 8004d40 <Init_BlueNRG_Stack+0x10c>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8004cec:	ab50      	add	r3, sp, #320	; 0x140
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	2307      	movs	r3, #7
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8bd 1134 	ldrh.w	r1, [sp, #308]	; 0x134
 8004cf8:	f8bd 0136 	ldrh.w	r0, [sp, #310]	; 0x136
 8004cfc:	f005 f909 	bl	8009f12 <aci_gatt_update_char_value>
  if(ret){
 8004d00:	b348      	cbz	r0, 8004d56 <Init_BlueNRG_Stack+0x122>
     XPRINTF("\r\naci_gatt_update_char_value failed\r\n");
 8004d02:	ac0b      	add	r4, sp, #44	; 0x2c
 8004d04:	4d3f      	ldr	r5, [pc, #252]	; (8004e04 <Init_BlueNRG_Stack+0x1d0>)
 8004d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004d12:	f844 0b04 	str.w	r0, [r4], #4
 8004d16:	8021      	strh	r1, [r4, #0]
 8004d18:	2125      	movs	r1, #37	; 0x25
 8004d1a:	a80b      	add	r0, sp, #44	; 0x2c
 8004d1c:	f000 fd7a 	bl	8005814 <CDC_Fill_Buffer>
    while(1);
 8004d20:	e7fe      	b.n	8004d20 <Init_BlueNRG_Stack+0xec>
     XPRINTF("\r\nGATT_Init failed\r\n");
 8004d22:	ac0b      	add	r4, sp, #44	; 0x2c
 8004d24:	4d38      	ldr	r5, [pc, #224]	; (8004e08 <Init_BlueNRG_Stack+0x1d4>)
 8004d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004d2e:	f844 0b04 	str.w	r0, [r4], #4
 8004d32:	7021      	strb	r1, [r4, #0]
 8004d34:	2114      	movs	r1, #20
 8004d36:	a80b      	add	r0, sp, #44	; 0x2c
 8004d38:	f000 fd6c 	bl	8005814 <CDC_Fill_Buffer>
}
 8004d3c:	b053      	add	sp, #332	; 0x14c
 8004d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     XPRINTF("\r\nGAP_Init failed\r\n");
 8004d40:	ac0b      	add	r4, sp, #44	; 0x2c
 8004d42:	4d32      	ldr	r5, [pc, #200]	; (8004e0c <Init_BlueNRG_Stack+0x1d8>)
 8004d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	6023      	str	r3, [r4, #0]
 8004d4c:	2113      	movs	r1, #19
 8004d4e:	a80b      	add	r0, sp, #44	; 0x2c
 8004d50:	f000 fd60 	bl	8005814 <CDC_Fill_Buffer>
     goto fail;
 8004d54:	e7f2      	b.n	8004d3c <Init_BlueNRG_Stack+0x108>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8004d56:	2001      	movs	r0, #1
 8004d58:	9003      	str	r0, [sp, #12]
 8004d5a:	4b2d      	ldr	r3, [pc, #180]	; (8004e10 <Init_BlueNRG_Stack+0x1dc>)
 8004d5c:	9302      	str	r3, [sp, #8]
 8004d5e:	2100      	movs	r1, #0
 8004d60:	9101      	str	r1, [sp, #4]
 8004d62:	2310      	movs	r3, #16
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	2307      	movs	r3, #7
 8004d68:	460a      	mov	r2, r1
 8004d6a:	f004 ff8f 	bl	8009c8c <aci_gap_set_auth_requirement>
  if (ret != BLE_STATUS_SUCCESS) {
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d12d      	bne.n	8004dce <Init_BlueNRG_Stack+0x19a>
  XPRINTF("SERVER: BLE Stack Initialized \r\n"
 8004d72:	f89d 2130 	ldrb.w	r2, [sp, #304]	; 0x130
 8004d76:	f8bd 112e 	ldrh.w	r1, [sp, #302]	; 0x12e
 8004d7a:	f001 000f 	and.w	r0, r1, #15
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <Init_BlueNRG_Stack+0x1c4>)
 8004d80:	7f5c      	ldrb	r4, [r3, #29]
 8004d82:	7f1f      	ldrb	r7, [r3, #28]
 8004d84:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8004d88:	7e9d      	ldrb	r5, [r3, #26]
 8004d8a:	7e5e      	ldrb	r6, [r3, #25]
 8004d8c:	7e1b      	ldrb	r3, [r3, #24]
 8004d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d90:	9608      	str	r6, [sp, #32]
 8004d92:	9507      	str	r5, [sp, #28]
 8004d94:	f8cd e018 	str.w	lr, [sp, #24]
 8004d98:	9705      	str	r7, [sp, #20]
 8004d9a:	9404      	str	r4, [sp, #16]
 8004d9c:	ab50      	add	r3, sp, #320	; 0x140
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	3061      	adds	r0, #97	; 0x61
 8004da2:	9002      	str	r0, [sp, #8]
 8004da4:	f3c1 1303 	ubfx	r3, r1, #4, #4
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	0a09      	lsrs	r1, r1, #8
 8004dac:	9100      	str	r1, [sp, #0]
 8004dae:	f002 030f 	and.w	r3, r2, #15
 8004db2:	0912      	lsrs	r2, r2, #4
 8004db4:	4917      	ldr	r1, [pc, #92]	; (8004e14 <Init_BlueNRG_Stack+0x1e0>)
 8004db6:	a80b      	add	r0, sp, #44	; 0x2c
 8004db8:	f006 fbf8 	bl	800b5ac <siprintf>
 8004dbc:	4601      	mov	r1, r0
 8004dbe:	a80b      	add	r0, sp, #44	; 0x2c
 8004dc0:	f000 fd28 	bl	8005814 <CDC_Fill_Buffer>
  aci_hal_set_tx_power_level(1,4);
 8004dc4:	2104      	movs	r1, #4
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	f005 f971 	bl	800a0ae <aci_hal_set_tx_power_level>
  return;
 8004dcc:	e7b6      	b.n	8004d3c <Init_BlueNRG_Stack+0x108>
     XPRINTF("\r\nGAP setting Authentication failed\r\n");
 8004dce:	ac0b      	add	r4, sp, #44	; 0x2c
 8004dd0:	4d11      	ldr	r5, [pc, #68]	; (8004e18 <Init_BlueNRG_Stack+0x1e4>)
 8004dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004dde:	f844 0b04 	str.w	r0, [r4], #4
 8004de2:	8021      	strh	r1, [r4, #0]
 8004de4:	2125      	movs	r1, #37	; 0x25
 8004de6:	a80b      	add	r0, sp, #44	; 0x2c
 8004de8:	f000 fd14 	bl	8005814 <CDC_Fill_Buffer>
     goto fail;
 8004dec:	e7a6      	b.n	8004d3c <Init_BlueNRG_Stack+0x108>
 8004dee:	bf00      	nop
 8004df0:	0800bffc 	.word	0x0800bffc
 8004df4:	08004751 	.word	0x08004751
 8004df8:	20000318 	.word	0x20000318
 8004dfc:	0800bee0 	.word	0x0800bee0
 8004e00:	20000330 	.word	0x20000330
 8004e04:	0800bf38 	.word	0x0800bf38
 8004e08:	0800bf0c 	.word	0x0800bf0c
 8004e0c:	0800bf24 	.word	0x0800bf24
 8004e10:	0001e240 	.word	0x0001e240
 8004e14:	0800bf88 	.word	0x0800bf88
 8004e18:	0800bf60 	.word	0x0800bf60

08004e1c <Init_BlueNRG_Custom_Services>:
{
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	b0c0      	sub	sp, #256	; 0x100
  ret = Add_HW_SW_ServW2ST_Service();
 8004e20:	f7ff faea 	bl	80043f8 <Add_HW_SW_ServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS)
 8004e24:	b998      	cbnz	r0, 8004e4e <Init_BlueNRG_Custom_Services+0x32>
     XPRINTF("HW & SW Service W2ST added successfully\r\n");
 8004e26:	46ec      	mov	ip, sp
 8004e28:	4c11      	ldr	r4, [pc, #68]	; (8004e70 <Init_BlueNRG_Custom_Services+0x54>)
 8004e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e36:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004e3a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004e3e:	f8ac 2000 	strh.w	r2, [ip]
 8004e42:	2129      	movs	r1, #41	; 0x29
 8004e44:	4668      	mov	r0, sp
 8004e46:	f000 fce5 	bl	8005814 <CDC_Fill_Buffer>
}
 8004e4a:	b040      	add	sp, #256	; 0x100
 8004e4c:	bd10      	pop	{r4, pc}
     XPRINTF("\r\nError while adding HW & SW Service W2ST\r\n");
 8004e4e:	46ec      	mov	ip, sp
 8004e50:	4c08      	ldr	r4, [pc, #32]	; (8004e74 <Init_BlueNRG_Custom_Services+0x58>)
 8004e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004e5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004e62:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8004e66:	212b      	movs	r1, #43	; 0x2b
 8004e68:	4668      	mov	r0, sp
 8004e6a:	f000 fcd3 	bl	8005814 <CDC_Fill_Buffer>
}
 8004e6e:	e7ec      	b.n	8004e4a <Init_BlueNRG_Custom_Services+0x2e>
 8004e70:	0800c004 	.word	0x0800c004
 8004e74:	0800c030 	.word	0x0800c030

08004e78 <SendMotionData>:
{
 8004e78:	b508      	push	{r3, lr}
  AccGyroMag_Update(&ACC_Value,(BSP_MOTION_SENSOR_Axes_t*)&COMP_Value,&MAG_Value);
 8004e7a:	4a04      	ldr	r2, [pc, #16]	; (8004e8c <SendMotionData+0x14>)
 8004e7c:	f102 0120 	add.w	r1, r2, #32
 8004e80:	f102 000c 	add.w	r0, r2, #12
 8004e84:	f7ff fb58 	bl	8004538 <AccGyroMag_Update>
}
 8004e88:	bd08      	pop	{r3, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000318 	.word	0x20000318

08004e90 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8004e90:	b508      	push	{r3, lr}
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8004e92:	7f03      	ldrb	r3, [r0, #28]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d000      	beq.n	8004e9a <HAL_TIM_OC_DelayElapsedCallback+0xa>
}
 8004e98:	bd08      	pop	{r3, pc}
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8004e9a:	210c      	movs	r1, #12
 8004e9c:	f003 fdee 	bl	8008a7c <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8004ea0:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 8004ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea4:	4904      	ldr	r1, [pc, #16]	; (8004eb8 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8004ea6:	6809      	ldr	r1, [r1, #0]
 8004ea8:	4408      	add	r0, r1
 8004eaa:	6410      	str	r0, [r2, #64]	; 0x40
    SendAccGyroMag=1;
 8004eac:	2201      	movs	r2, #1
 8004eae:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004eb0:	e7f2      	b.n	8004e98 <HAL_TIM_OC_DelayElapsedCallback+0x8>
 8004eb2:	bf00      	nop
 8004eb4:	20000318 	.word	0x20000318
 8004eb8:	20000004 	.word	0x20000004

08004ebc <HAL_TIM_PeriodElapsedCallback>:
{
 8004ebc:	b508      	push	{r3, lr}
  if(htim == (&TimEnvHandle)) {
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ec0:	4298      	cmp	r0, r3
 8004ec2:	d003      	beq.n	8004ecc <HAL_TIM_PeriodElapsedCallback+0x10>
    } else if(htim == (&TimHandle)) {
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004ec6:	4298      	cmp	r0, r3
 8004ec8:	d005      	beq.n	8004ed6 <HAL_TIM_PeriodElapsedCallback+0x1a>
}
 8004eca:	bd08      	pop	{r3, pc}
	  ReadSensor=1;
 8004ecc:	3b7c      	subs	r3, #124	; 0x7c
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8004ed4:	e7f9      	b.n	8004eca <HAL_TIM_PeriodElapsedCallback+0xe>
      CDC_TIM_PeriodElapsedCallback(htim);
 8004ed6:	f000 fcbd 	bl	8005854 <CDC_TIM_PeriodElapsedCallback>
}
 8004eda:	e7f6      	b.n	8004eca <HAL_TIM_PeriodElapsedCallback+0xe>
 8004edc:	20000394 	.word	0x20000394
 8004ee0:	20000808 	.word	0x20000808

08004ee4 <Sensor_IO_SPI_CS_Init_All>:
{
 8004ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee8:	b08b      	sub	sp, #44	; 0x2c
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 8004eea:	4b72      	ldr	r3, [pc, #456]	; (80050b4 <Sensor_IO_SPI_CS_Init_All+0x1d0>)
 8004eec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eee:	f042 0202 	orr.w	r2, r2, #2
 8004ef2:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ef6:	f002 0202 	and.w	r2, r2, #2
 8004efa:	9200      	str	r2, [sp, #0]
 8004efc:	9a00      	ldr	r2, [sp, #0]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 8004efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f00:	f042 0202 	orr.w	r2, r2, #2
 8004f04:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f08:	f002 0202 	and.w	r2, r2, #2
 8004f0c:	9201      	str	r2, [sp, #4]
 8004f0e:	9a01      	ldr	r2, [sp, #4]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8004f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f12:	f042 0204 	orr.w	r2, r2, #4
 8004f16:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f1a:	f002 0204 	and.w	r2, r2, #4
 8004f1e:	9202      	str	r2, [sp, #8]
 8004f20:	9a02      	ldr	r2, [sp, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 8004f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	64da      	str	r2, [r3, #76]	; 0x4c
 8004f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8004f34:	4d60      	ldr	r5, [pc, #384]	; (80050b8 <Sensor_IO_SPI_CS_Init_All+0x1d4>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f001 f9e4 	bl	800630a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004f42:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80050bc <Sensor_IO_SPI_CS_Init_All+0x1d8>
 8004f46:	2201      	movs	r2, #1
 8004f48:	2110      	movs	r1, #16
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f001 f9dd 	bl	800630a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8004f50:	2201      	movs	r2, #1
 8004f52:	2102      	movs	r1, #2
 8004f54:	4628      	mov	r0, r5
 8004f56:	f001 f9d8 	bl	800630a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	2108      	movs	r1, #8
 8004f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f62:	f001 f9d2 	bl	800630a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004f66:	2303      	movs	r3, #3
 8004f68:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f6e:	2401      	movs	r4, #1
 8004f70:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 8004f72:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8004f76:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8004f7a:	a905      	add	r1, sp, #20
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f001 f839 	bl	8005ff4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8004f82:	4622      	mov	r2, r4
 8004f84:	4649      	mov	r1, r9
 8004f86:	4628      	mov	r0, r5
 8004f88:	f001 f9bf 	bl	800630a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8004f8c:	2710      	movs	r7, #16
 8004f8e:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8004f90:	a905      	add	r1, sp, #20
 8004f92:	4640      	mov	r0, r8
 8004f94:	f001 f82e 	bl	8005ff4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8004f98:	4622      	mov	r2, r4
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	f001 f9b4 	bl	800630a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 8004fa2:	f04f 0b02 	mov.w	fp, #2
 8004fa6:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 8004faa:	a905      	add	r1, sp, #20
 8004fac:	4628      	mov	r0, r5
 8004fae:	f001 f821 	bl	8005ff4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f001 f9a7 	bl	800630a <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 8004fbc:	f04f 0a08 	mov.w	sl, #8
 8004fc0:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 8004fc4:	a905      	add	r1, sp, #20
 8004fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fca:	f001 f813 	bl	8005ff4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8004fce:	4622      	mov	r2, r4
 8004fd0:	4651      	mov	r1, sl
 8004fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fd6:	f001 f998 	bl	800630a <HAL_GPIO_WritePin>
  	 if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 8004fda:	f000 ff15 	bl	8005e08 <BSP_SPI2_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 8004fde:	4632      	mov	r2, r6
 8004fe0:	4659      	mov	r1, fp
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f001 f991 	bl	800630a <HAL_GPIO_WritePin>
  inData[0] = (0x62U);
 8004fe8:	2362      	movs	r3, #98	; 0x62
 8004fea:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8004fee:	4621      	mov	r1, r4
 8004ff0:	eb0d 0007 	add.w	r0, sp, r7
 8004ff4:	f000 fe66 	bl	8005cc4 <BSP_SPI2_Send>
  inData[0] = 0x20;
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8004ffe:	4621      	mov	r1, r4
 8005000:	eb0d 0007 	add.w	r0, sp, r7
 8005004:	f000 fe5e 	bl	8005cc4 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005008:	4622      	mov	r2, r4
 800500a:	4659      	mov	r1, fp
 800500c:	4628      	mov	r0, r5
 800500e:	f001 f97c 	bl	800630a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_RESET);
 8005012:	4632      	mov	r2, r6
 8005014:	4639      	mov	r1, r7
 8005016:	4640      	mov	r0, r8
 8005018:	f001 f977 	bl	800630a <HAL_GPIO_WritePin>
  inData[0] = (0x23U);
 800501c:	2323      	movs	r3, #35	; 0x23
 800501e:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005022:	4621      	mov	r1, r4
 8005024:	eb0d 0007 	add.w	r0, sp, r7
 8005028:	f000 fe4c 	bl	8005cc4 <BSP_SPI2_Send>
  inData[0] = 0x01;
 800502c:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005030:	4621      	mov	r1, r4
 8005032:	eb0d 0007 	add.w	r0, sp, r7
 8005036:	f000 fe45 	bl	8005cc4 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 800503a:	4622      	mov	r2, r4
 800503c:	4639      	mov	r1, r7
 800503e:	4640      	mov	r0, r8
 8005040:	f001 f963 	bl	800630a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 8005044:	4632      	mov	r2, r6
 8005046:	4651      	mov	r1, sl
 8005048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800504c:	f001 f95d 	bl	800630a <HAL_GPIO_WritePin>
  inData[0] = (0x10U);
 8005050:	f88d 7010 	strb.w	r7, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005054:	4621      	mov	r1, r4
 8005056:	eb0d 0007 	add.w	r0, sp, r7
 800505a:	f000 fe33 	bl	8005cc4 <BSP_SPI2_Send>
  inData[0] = 0x01;
 800505e:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005062:	4621      	mov	r1, r4
 8005064:	eb0d 0007 	add.w	r0, sp, r7
 8005068:	f000 fe2c 	bl	8005cc4 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 800506c:	4622      	mov	r2, r4
 800506e:	4651      	mov	r1, sl
 8005070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005074:	f001 f949 	bl	800630a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 8005078:	4632      	mov	r2, r6
 800507a:	4649      	mov	r1, r9
 800507c:	4628      	mov	r0, r5
 800507e:	f001 f944 	bl	800630a <HAL_GPIO_WritePin>
  inData[0] = (0x12U);
 8005082:	2312      	movs	r3, #18
 8005084:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005088:	4621      	mov	r1, r4
 800508a:	eb0d 0007 	add.w	r0, sp, r7
 800508e:	f000 fe19 	bl	8005cc4 <BSP_SPI2_Send>
  inData[0] = 0x0C;
 8005092:	230c      	movs	r3, #12
 8005094:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005098:	4621      	mov	r1, r4
 800509a:	eb0d 0007 	add.w	r0, sp, r7
 800509e:	f000 fe11 	bl	8005cc4 <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 80050a2:	4622      	mov	r2, r4
 80050a4:	4649      	mov	r1, r9
 80050a6:	4628      	mov	r0, r5
 80050a8:	f001 f92f 	bl	800630a <HAL_GPIO_WritePin>
}
 80050ac:	4630      	mov	r0, r6
 80050ae:	b00b      	add	sp, #44	; 0x2c
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	48000400 	.word	0x48000400
 80050bc:	48000800 	.word	0x48000800

080050c0 <LSM303AGR_SPI_Read_nBytes>:
{
 80050c0:	b410      	push	{r4}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050c2:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 80050c4:	6804      	ldr	r4, [r0, #0]
 80050c6:	6823      	ldr	r3, [r4, #0]
 80050c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050cc:	6023      	str	r3, [r4, #0]
  while (nBytesToRead > 1U)
 80050ce:	2a01      	cmp	r2, #1
 80050d0:	d90a      	bls.n	80050e8 <LSM303AGR_SPI_Read_nBytes+0x28>
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 80050d2:	6803      	ldr	r3, [r0, #0]
 80050d4:	689c      	ldr	r4, [r3, #8]
 80050d6:	f014 0f01 	tst.w	r4, #1
 80050da:	d0f8      	beq.n	80050ce <LSM303AGR_SPI_Read_nBytes+0xe>
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 80050dc:	7b1b      	ldrb	r3, [r3, #12]
 80050de:	f801 3b01 	strb.w	r3, [r1], #1
      nBytesToRead--;
 80050e2:	3a01      	subs	r2, #1
 80050e4:	b292      	uxth	r2, r2
 80050e6:	e7f2      	b.n	80050ce <LSM303AGR_SPI_Read_nBytes+0xe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 80050f0:	6802      	ldr	r2, [r0, #0]
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80050fa:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80050fc:	6803      	ldr	r3, [r0, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	f012 0f01 	tst.w	r2, #1
 8005104:	d0fa      	beq.n	80050fc <LSM303AGR_SPI_Read_nBytes+0x3c>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005106:	7b1b      	ldrb	r3, [r3, #12]
 8005108:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800510a:	6803      	ldr	r3, [r0, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005112:	d1fa      	bne.n	800510a <LSM303AGR_SPI_Read_nBytes+0x4a>
}
 8005114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005118:	4770      	bx	lr

0800511a <LSM303AGR_SPI_Read>:
  __ASM volatile ("cpsid i" : : : "memory");
 800511a:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 800511c:	6802      	ldr	r2, [r0, #0]
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005124:	6013      	str	r3, [r2, #0]
  __asm("dsb\n");
 8005126:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 800512a:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 800512e:	6802      	ldr	r2, [r0, #0]
 8005130:	6813      	ldr	r3, [r2, #0]
 8005132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005136:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005138:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 800513a:	6803      	ldr	r3, [r0, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	f012 0f01 	tst.w	r2, #1
 8005142:	d0fa      	beq.n	800513a <LSM303AGR_SPI_Read+0x20>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005144:	7b1b      	ldrb	r3, [r3, #12]
 8005146:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005148:	6803      	ldr	r3, [r0, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005150:	d1fa      	bne.n	8005148 <LSM303AGR_SPI_Read+0x2e>
}
 8005152:	4770      	bx	lr

08005154 <LSM303AGR_SPI_Write>:
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005154:	6803      	ldr	r3, [r0, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	f012 0f02 	tst.w	r2, #2
 800515c:	d0fa      	beq.n	8005154 <LSM303AGR_SPI_Write>
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 800515e:	7319      	strb	r1, [r3, #12]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8005160:	6803      	ldr	r3, [r0, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8005168:	d1fa      	bne.n	8005160 <LSM303AGR_SPI_Write+0xc>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005170:	d1fb      	bne.n	800516a <LSM303AGR_SPI_Write+0x16>
}
 8005172:	4770      	bx	lr

08005174 <BSP_LSM303AGR_ReadReg_Mag>:
{
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	460d      	mov	r5, r1
 8005178:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 800517a:	b2c7      	uxtb	r7, r0
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 800517c:	2200      	movs	r2, #0
 800517e:	2102      	movs	r1, #2
 8005180:	4818      	ldr	r0, [pc, #96]	; (80051e4 <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8005182:	f001 f8c2 	bl	800630a <HAL_GPIO_WritePin>
  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005186:	4e18      	ldr	r6, [pc, #96]	; (80051e8 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005188:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 800518c:	4630      	mov	r0, r6
 800518e:	f7ff ffe1 	bl	8005154 <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005192:	6832      	ldr	r2, [r6, #0]
 8005194:	6813      	ldr	r3, [r2, #0]
 8005196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519a:	6013      	str	r3, [r2, #0]
  SPI_1LINE_RX(&hbusspi2);
 800519c:	6832      	ldr	r2, [r6, #0]
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a4:	6013      	str	r3, [r2, #0]
  if (len > 1)
 80051a6:	2c01      	cmp	r4, #1
 80051a8:	d916      	bls.n	80051d8 <BSP_LSM303AGR_ReadReg_Mag+0x64>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 80051aa:	4622      	mov	r2, r4
 80051ac:	4629      	mov	r1, r5
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff ff86 	bl	80050c0 <LSM303AGR_SPI_Read_nBytes>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 80051b4:	2201      	movs	r2, #1
 80051b6:	2102      	movs	r1, #2
 80051b8:	480a      	ldr	r0, [pc, #40]	; (80051e4 <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 80051ba:	f001 f8a6 	bl	800630a <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 80051c0:	6811      	ldr	r1, [r2, #0]
 80051c2:	680b      	ldr	r3, [r1, #0]
 80051c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c8:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d2:	6013      	str	r3, [r2, #0]
}
 80051d4:	2000      	movs	r0, #0
 80051d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 80051d8:	4629      	mov	r1, r5
 80051da:	4803      	ldr	r0, [pc, #12]	; (80051e8 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 80051dc:	f7ff ff9d 	bl	800511a <LSM303AGR_SPI_Read>
 80051e0:	e7e8      	b.n	80051b4 <BSP_LSM303AGR_ReadReg_Mag+0x40>
 80051e2:	bf00      	nop
 80051e4:	48000400 	.word	0x48000400
 80051e8:	2000256c 	.word	0x2000256c

080051ec <BSP_LSM303AGR_ReadReg_Acc>:
{
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	460d      	mov	r5, r1
 80051f0:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 80051f2:	b2c6      	uxtb	r6, r0
  LSM_ACC_CS_LOW();
 80051f4:	2200      	movs	r2, #0
 80051f6:	2110      	movs	r1, #16
 80051f8:	481c      	ldr	r0, [pc, #112]	; (800526c <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 80051fa:	f001 f886 	bl	800630a <HAL_GPIO_WritePin>
  if (len > 1) {
 80051fe:	2c01      	cmp	r4, #1
 8005200:	d928      	bls.n	8005254 <BSP_LSM303AGR_ReadReg_Acc+0x68>
	  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80 | 0x40);
 8005202:	f046 01c0 	orr.w	r1, r6, #192	; 0xc0
 8005206:	481a      	ldr	r0, [pc, #104]	; (8005270 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005208:	f7ff ffa4 	bl	8005154 <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 800520c:	4a18      	ldr	r2, [pc, #96]	; (8005270 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 800520e:	6811      	ldr	r1, [r2, #0]
 8005210:	680b      	ldr	r3, [r1, #0]
 8005212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005216:	600b      	str	r3, [r1, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6813      	ldr	r3, [r2, #0]
 800521c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005220:	6013      	str	r3, [r2, #0]
  if (len > 1)
 8005222:	2c01      	cmp	r4, #1
 8005224:	d91c      	bls.n	8005260 <BSP_LSM303AGR_ReadReg_Acc+0x74>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005226:	4622      	mov	r2, r4
 8005228:	4629      	mov	r1, r5
 800522a:	4811      	ldr	r0, [pc, #68]	; (8005270 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 800522c:	f7ff ff48 	bl	80050c0 <LSM303AGR_SPI_Read_nBytes>
  LSM_ACC_CS_HIGH();
 8005230:	2201      	movs	r2, #1
 8005232:	2110      	movs	r1, #16
 8005234:	480d      	ldr	r0, [pc, #52]	; (800526c <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005236:	f001 f868 	bl	800630a <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 800523a:	4a0d      	ldr	r2, [pc, #52]	; (8005270 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 800523c:	6811      	ldr	r1, [r2, #0]
 800523e:	680b      	ldr	r3, [r1, #0]
 8005240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005244:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	6813      	ldr	r3, [r2, #0]
 800524a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800524e:	6013      	str	r3, [r2, #0]
}
 8005250:	2000      	movs	r0, #0
 8005252:	bd70      	pop	{r4, r5, r6, pc}
	  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005254:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8005258:	4805      	ldr	r0, [pc, #20]	; (8005270 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 800525a:	f7ff ff7b 	bl	8005154 <LSM303AGR_SPI_Write>
 800525e:	e7d5      	b.n	800520c <BSP_LSM303AGR_ReadReg_Acc+0x20>
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8005260:	4629      	mov	r1, r5
 8005262:	4803      	ldr	r0, [pc, #12]	; (8005270 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005264:	f7ff ff59 	bl	800511a <LSM303AGR_SPI_Read>
 8005268:	e7e2      	b.n	8005230 <BSP_LSM303AGR_ReadReg_Acc+0x44>
 800526a:	bf00      	nop
 800526c:	48000800 	.word	0x48000800
 8005270:	2000256c 	.word	0x2000256c

08005274 <InitLSM>:
static void InitLSM() {
 8005274:	b510      	push	{r4, lr}
 8005276:	b0c4      	sub	sp, #272	; 0x110
	Sensor_IO_SPI_CS_Init_All();
 8005278:	f7ff fe34 	bl	8004ee4 <Sensor_IO_SPI_CS_Init_All>
	inData[0] = 0x01;
 800527c:	2401      	movs	r4, #1
 800527e:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
	BSP_LSM303AGR_WriteReg_Acc(0x23,inData,1);
 8005282:	4622      	mov	r2, r4
 8005284:	a941      	add	r1, sp, #260	; 0x104
 8005286:	2023      	movs	r0, #35	; 0x23
 8005288:	f7ff fc80 	bl	8004b8c <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x20;
 800528c:	2320      	movs	r3, #32
 800528e:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
	BSP_LSM303AGR_WriteReg_Mag(0x62U,inData,1);
 8005292:	4622      	mov	r2, r4
 8005294:	a941      	add	r1, sp, #260	; 0x104
 8005296:	2062      	movs	r0, #98	; 0x62
 8005298:	f7ff fca2 	bl	8004be0 <BSP_LSM303AGR_WriteReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(0x4F,inData,1);
 800529c:	4622      	mov	r2, r4
 800529e:	a941      	add	r1, sp, #260	; 0x104
 80052a0:	204f      	movs	r0, #79	; 0x4f
 80052a2:	f7ff ff67 	bl	8005174 <BSP_LSM303AGR_ReadReg_Mag>
	XPRINTF("IAM Mag= %d,%d",inData[0],inData[1]);
 80052a6:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 80052aa:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 80052ae:	490d      	ldr	r1, [pc, #52]	; (80052e4 <InitLSM+0x70>)
 80052b0:	a801      	add	r0, sp, #4
 80052b2:	f006 f97b 	bl	800b5ac <siprintf>
 80052b6:	4601      	mov	r1, r0
 80052b8:	a801      	add	r0, sp, #4
 80052ba:	f000 faab 	bl	8005814 <CDC_Fill_Buffer>
	BSP_LSM303AGR_ReadReg_Acc(0x0F,inData,1);
 80052be:	4622      	mov	r2, r4
 80052c0:	a941      	add	r1, sp, #260	; 0x104
 80052c2:	200f      	movs	r0, #15
 80052c4:	f7ff ff92 	bl	80051ec <BSP_LSM303AGR_ReadReg_Acc>
	XPRINTF("IAM Acc= %d,%d",inData[0],inData[1]);
 80052c8:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 80052cc:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 80052d0:	4905      	ldr	r1, [pc, #20]	; (80052e8 <InitLSM+0x74>)
 80052d2:	a801      	add	r0, sp, #4
 80052d4:	f006 f96a 	bl	800b5ac <siprintf>
 80052d8:	4601      	mov	r1, r0
 80052da:	a801      	add	r0, sp, #4
 80052dc:	f000 fa9a 	bl	8005814 <CDC_Fill_Buffer>
}
 80052e0:	b044      	add	sp, #272	; 0x110
 80052e2:	bd10      	pop	{r4, pc}
 80052e4:	0800c05c 	.word	0x0800c05c
 80052e8:	0800c06c 	.word	0x0800c06c

080052ec <HAL_Delay>:
  * @note This is a user implementation using WFI state
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80052ec:	b510      	push	{r4, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80052f2:	f000 fe0d 	bl	8005f10 <HAL_GetTick>
 80052f6:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay){
 80052f8:	e000      	b.n	80052fc <HAL_Delay+0x10>
    __WFI();
 80052fa:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay){
 80052fc:	f000 fe08 	bl	8005f10 <HAL_GetTick>
 8005300:	1b00      	subs	r0, r0, r4
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	4298      	cmp	r0, r3
 8005306:	d3f8      	bcc.n	80052fa <HAL_Delay+0xe>
  }
}
 8005308:	b002      	add	sp, #8
 800530a:	bd10      	pop	{r4, pc}

0800530c <InitTargetPlatform>:
{
 800530c:	b510      	push	{r4, lr}
  HAL_PWREx_EnableVddUSB();
 800530e:	f001 fd65 	bl	8006ddc <HAL_PWREx_EnableVddUSB>
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 8005312:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <InitTargetPlatform+0x3c>)
 8005314:	2200      	movs	r2, #0
 8005316:	490d      	ldr	r1, [pc, #52]	; (800534c <InitTargetPlatform+0x40>)
 8005318:	4620      	mov	r0, r4
 800531a:	f005 fb5d 	bl	800a9d8 <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 800531e:	490c      	ldr	r1, [pc, #48]	; (8005350 <InitTargetPlatform+0x44>)
 8005320:	4620      	mov	r0, r4
 8005322:	f005 fb70 	bl	800aa06 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 8005326:	490b      	ldr	r1, [pc, #44]	; (8005354 <InitTargetPlatform+0x48>)
 8005328:	4620      	mov	r0, r4
 800532a:	f005 fb20 	bl	800a96e <USBD_CDC_RegisterInterface>
  USBD_Start(&USBD_Device);
 800532e:	4620      	mov	r0, r4
 8005330:	f005 fb80 	bl	800aa34 <USBD_Start>
  HAL_Delay(5000);
 8005334:	f241 3088 	movw	r0, #5000	; 0x1388
 8005338:	f7ff ffd8 	bl	80052ec <HAL_Delay>
  BSP_LED_Init( LED1 );
 800533c:	2000      	movs	r0, #0
 800533e:	f000 fc1f 	bl	8005b80 <BSP_LED_Init>
  InitLSM(); //N4S
 8005342:	f7ff ff97 	bl	8005274 <InitLSM>
}
 8005346:	bd10      	pop	{r4, pc}
 8005348:	200003e4 	.word	0x200003e4
 800534c:	20000058 	.word	0x20000058
 8005350:	20000160 	.word	0x20000160
 8005354:	20000010 	.word	0x20000010

08005358 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1){
 8005358:	e7fe      	b.n	8005358 <Error_Handler>
	...

0800535c <InitTimers>:
{
 800535c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535e:	b089      	sub	sp, #36	; 0x24
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 8005360:	4f2e      	ldr	r7, [pc, #184]	; (800541c <InitTimers+0xc0>)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	4e2e      	ldr	r6, [pc, #184]	; (8005420 <InitTimers+0xc4>)
 8005366:	fba6 2303 	umull	r2, r3, r6, r3
 800536a:	0b5b      	lsrs	r3, r3, #13
 800536c:	3b01      	subs	r3, #1
  TimEnvHandle.Instance = TIM4;
 800536e:	4c2d      	ldr	r4, [pc, #180]	; (8005424 <InitTimers+0xc8>)
 8005370:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <InitTimers+0xcc>)
 8005372:	67e2      	str	r2, [r4, #124]	; 0x7c
  TimEnvHandle.Init.Period = 655;
 8005374:	f240 228f 	movw	r2, #655	; 0x28f
 8005378:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  TimEnvHandle.Init.Prescaler = uwPrescalerValue;
 800537c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  TimEnvHandle.Init.ClockDivision = 0;
 8005380:	2500      	movs	r5, #0
 8005382:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  TimEnvHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005386:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  if(HAL_TIM_Base_Init(&TimEnvHandle) != HAL_OK) {
 800538a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800538e:	f003 fcc3 	bl	8008d18 <HAL_TIM_Base_Init>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	fba6 6303 	umull	r6, r3, r6, r3
 8005398:	0b5b      	lsrs	r3, r3, #13
 800539a:	3b01      	subs	r3, #1
  TimCCHandle.Instance = TIM1;  
 800539c:	4a23      	ldr	r2, [pc, #140]	; (800542c <InitTimers+0xd0>)
 800539e:	62e2      	str	r2, [r4, #44]	; 0x2c
  TimCCHandle.Init.Period        = 65535;
 80053a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053a4:	63a2      	str	r2, [r4, #56]	; 0x38
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 80053a6:	6323      	str	r3, [r4, #48]	; 0x30
  TimCCHandle.Init.ClockDivision = 0;
 80053a8:	63e5      	str	r5, [r4, #60]	; 0x3c
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 80053aa:	6365      	str	r5, [r4, #52]	; 0x34
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 80053ac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80053b0:	f003 fce2 	bl	8008d78 <HAL_TIM_OC_Init>
 80053b4:	bb40      	cbnz	r0, 8005408 <InitTimers+0xac>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 80053b6:	2330      	movs	r3, #48	; 0x30
 80053b8:	9301      	str	r3, [sp, #4]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 80053ba:	2302      	movs	r3, #2
 80053bc:	9303      	str	r3, [sp, #12]
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 80053be:	2364      	movs	r3, #100	; 0x64
 80053c0:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 80053c2:	2200      	movs	r2, #0
 80053c4:	a901      	add	r1, sp, #4
 80053c6:	481a      	ldr	r0, [pc, #104]	; (8005430 <InitTimers+0xd4>)
 80053c8:	f003 fd4c 	bl	8008e64 <HAL_TIM_OC_ConfigChannel>
 80053cc:	b9f0      	cbnz	r0, 800540c <InitTimers+0xb0>
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 80053ce:	23c8      	movs	r3, #200	; 0xc8
 80053d0:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK)
 80053d2:	2204      	movs	r2, #4
 80053d4:	eb0d 0102 	add.w	r1, sp, r2
 80053d8:	4815      	ldr	r0, [pc, #84]	; (8005430 <InitTimers+0xd4>)
 80053da:	f003 fd43 	bl	8008e64 <HAL_TIM_OC_ConfigChannel>
 80053de:	b9b8      	cbnz	r0, 8005410 <InitTimers+0xb4>
  sConfig.Pulse = DEFAULT_uhCCR3_Val;
 80053e0:	f240 2371 	movw	r3, #625	; 0x271
 80053e4:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 80053e6:	2208      	movs	r2, #8
 80053e8:	a901      	add	r1, sp, #4
 80053ea:	4811      	ldr	r0, [pc, #68]	; (8005430 <InitTimers+0xd4>)
 80053ec:	f003 fd3a 	bl	8008e64 <HAL_TIM_OC_ConfigChannel>
 80053f0:	b980      	cbnz	r0, 8005414 <InitTimers+0xb8>
  sConfig.Pulse = DEFAULT_uhCCR4_Val;
 80053f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80053f6:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK)
 80053f8:	220c      	movs	r2, #12
 80053fa:	a901      	add	r1, sp, #4
 80053fc:	480c      	ldr	r0, [pc, #48]	; (8005430 <InitTimers+0xd4>)
 80053fe:	f003 fd31 	bl	8008e64 <HAL_TIM_OC_ConfigChannel>
 8005402:	b948      	cbnz	r0, 8005418 <InitTimers+0xbc>
}
 8005404:	b009      	add	sp, #36	; 0x24
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8005408:	f7ff ffa6 	bl	8005358 <Error_Handler>
    Error_Handler();
 800540c:	f7ff ffa4 	bl	8005358 <Error_Handler>
    Error_Handler();
 8005410:	f7ff ffa2 	bl	8005358 <Error_Handler>
    Error_Handler();
 8005414:	f7ff ffa0 	bl	8005358 <Error_Handler>
    Error_Handler();
 8005418:	f7ff ff9e 	bl	8005358 <Error_Handler>
 800541c:	2000007c 	.word	0x2000007c
 8005420:	d1b71759 	.word	0xd1b71759
 8005424:	20000318 	.word	0x20000318
 8005428:	40000800 	.word	0x40000800
 800542c:	40012c00 	.word	0x40012c00
 8005430:	20000344 	.word	0x20000344

08005434 <main>:
{
 8005434:	b510      	push	{r4, lr}
 8005436:	b0c0      	sub	sp, #256	; 0x100
  HAL_Init();
 8005438:	f000 fd4e 	bl	8005ed8 <HAL_Init>
  SystemClock_Config();
 800543c:	f7ff fb3c 	bl	8004ab8 <SystemClock_Config>
  InitTargetPlatform();
 8005440:	f7ff ff64 	bl	800530c <InitTargetPlatform>
  Init_BlueNRG_Stack();
 8005444:	f7ff fbf6 	bl	8004c34 <Init_BlueNRG_Stack>
  Init_BlueNRG_Custom_Services();
 8005448:	f7ff fce8 	bl	8004e1c <Init_BlueNRG_Custom_Services>
  InitTimers();
 800544c:	f7ff ff86 	bl	800535c <InitTimers>
  if(HAL_TIM_Base_Start_IT(&TimEnvHandle) != HAL_OK){
 8005450:	4835      	ldr	r0, [pc, #212]	; (8005528 <main+0xf4>)
 8005452:	f003 facd 	bl	80089f0 <HAL_TIM_Base_Start_IT>
 8005456:	b9c8      	cbnz	r0, 800548c <main+0x58>
  connected = FALSE;
 8005458:	4b34      	ldr	r3, [pc, #208]	; (800552c <main+0xf8>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
  NodeName[1] = 'A';
 800545e:	4b34      	ldr	r3, [pc, #208]	; (8005530 <main+0xfc>)
 8005460:	2241      	movs	r2, #65	; 0x41
 8005462:	f883 239d 	strb.w	r2, [r3, #925]	; 0x39d
  NodeName[2] = 'B';
 8005466:	2242      	movs	r2, #66	; 0x42
 8005468:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
  NodeName[3] = 'C';
 800546c:	2243      	movs	r2, #67	; 0x43
 800546e:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
  NodeName[4] = 'D';
 8005472:	2244      	movs	r2, #68	; 0x44
 8005474:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
  NodeName[5] = 'E';
 8005478:	2245      	movs	r2, #69	; 0x45
 800547a:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
  NodeName[6] = 'F';
 800547e:	2246      	movs	r2, #70	; 0x46
 8005480:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
  NodeName[7] = 'G';
 8005484:	2247      	movs	r2, #71	; 0x47
 8005486:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
  startAcc();
 800548a:	e036      	b.n	80054fa <main+0xc6>
    Error_Handler();
 800548c:	f7ff ff64 	bl	8005358 <Error_Handler>
          if(!(HAL_GetTick()&0x3FF)) {
 8005490:	f000 fd3e 	bl	8005f10 <HAL_GetTick>
 8005494:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005498:	2800      	cmp	r0, #0
 800549a:	d132      	bne.n	8005502 <main+0xce>
        	  BSP_LED_Toggle(LED1);
 800549c:	f000 fbb0 	bl	8005c00 <BSP_LED_Toggle>
 80054a0:	e02f      	b.n	8005502 <main+0xce>
      setConnectable();
 80054a2:	f7ff f8c5 	bl	8004630 <setConnectable>
      set_connectable = FALSE;
 80054a6:	4b23      	ldr	r3, [pc, #140]	; (8005534 <main+0x100>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	e02d      	b.n	800550a <main+0xd6>
      HCI_ProcessEvent=0;
 80054ae:	4b20      	ldr	r3, [pc, #128]	; (8005530 <main+0xfc>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
      hci_user_evt_proc();
 80054b6:	f005 f81d 	bl	800a4f4 <hci_user_evt_proc>
 80054ba:	e02b      	b.n	8005514 <main+0xe0>
    	ReadSensor=0;
 80054bc:	4c1c      	ldr	r4, [pc, #112]	; (8005530 <main+0xfc>)
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    	readMag();
 80054c4:	f7ff fae0 	bl	8004a88 <readMag>
    	readAcc();
 80054c8:	f7ff faea 	bl	8004aa0 <readAcc>
    	COMP_Value.x++;
 80054cc:	6a22      	ldr	r2, [r4, #32]
 80054ce:	3201      	adds	r2, #1
 80054d0:	6222      	str	r2, [r4, #32]
    	COMP_Value.y=120;
 80054d2:	2378      	movs	r3, #120	; 0x78
 80054d4:	6263      	str	r3, [r4, #36]	; 0x24
    	COMP_Value.Heading+=10;
 80054d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054d8:	330a      	adds	r3, #10
 80054da:	62a3      	str	r3, [r4, #40]	; 0x28
    	XPRINTF("**STEP INCREMENTS = %d**\r\n",(int)COMP_Value.x);
 80054dc:	4916      	ldr	r1, [pc, #88]	; (8005538 <main+0x104>)
 80054de:	4668      	mov	r0, sp
 80054e0:	f006 f864 	bl	800b5ac <siprintf>
 80054e4:	4601      	mov	r1, r0
 80054e6:	4668      	mov	r0, sp
 80054e8:	f000 f994 	bl	8005814 <CDC_Fill_Buffer>
 80054ec:	e017      	b.n	800551e <main+0xea>
		SendMotionData();
 80054ee:	f7ff fcc3 	bl	8004e78 <SendMotionData>
    	SendAccGyroMag=0;
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <main+0xfc>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	679a      	str	r2, [r3, #120]	; 0x78
    __WFI();
 80054f8:	bf30      	wfi
      if(!connected) {
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <main+0xf8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0c6      	beq.n	8005490 <main+0x5c>
    if(set_connectable){
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <main+0x100>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1cb      	bne.n	80054a2 <main+0x6e>
    if(HCI_ProcessEvent) {
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <main+0xfc>)
 800550c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1cc      	bne.n	80054ae <main+0x7a>
    if(ReadSensor) {
 8005514:	4b06      	ldr	r3, [pc, #24]	; (8005530 <main+0xfc>)
 8005516:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ce      	bne.n	80054bc <main+0x88>
    if(SendAccGyroMag) {
 800551e:	4b04      	ldr	r3, [pc, #16]	; (8005530 <main+0xfc>)
 8005520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0e8      	beq.n	80054f8 <main+0xc4>
 8005526:	e7e2      	b.n	80054ee <main+0xba>
 8005528:	20000394 	.word	0x20000394
 800552c:	20000204 	.word	0x20000204
 8005530:	20000318 	.word	0x20000318
 8005534:	20000000 	.word	0x20000000
 8005538:	0800c07c 	.word	0x0800c07c

0800553c <HAL_GPIO_EXTI_Callback>:
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
  switch(GPIO_Pin){
 800553c:	2820      	cmp	r0, #32
 800553e:	d000      	beq.n	8005542 <HAL_GPIO_EXTI_Callback+0x6>
 8005540:	4770      	bx	lr
{  
 8005542:	b508      	push	{r3, lr}
  case HCI_TL_SPI_EXTI_PIN: 
      hci_tl_lowlevel_isr();
 8005544:	f7ff fa96 	bl	8004a74 <hci_tl_lowlevel_isr>
      HCI_ProcessEvent=1;
 8005548:	4b02      	ldr	r3, [pc, #8]	; (8005554 <HAL_GPIO_EXTI_Callback+0x18>)
 800554a:	2201      	movs	r2, #1
 800554c:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4

//  case BSP_LSM6DSM_INT2:
//    MEMSInterrupt=1;
//    break;
  }
}
 8005550:	bd08      	pop	{r3, pc}
 8005552:	bf00      	nop
 8005554:	20000318 	.word	0x20000318

08005558 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8005558:	b530      	push	{r4, r5, lr}
 800555a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800555c:	4c16      	ldr	r4, [pc, #88]	; (80055b8 <HAL_PCD_MspInit+0x60>)
 800555e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005566:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	9b01      	ldr	r3, [sp, #4]

  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8005570:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005574:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005576:	2302      	movs	r3, #2
 8005578:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	2500      	movs	r5, #0
 800557c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557e:	2303      	movs	r3, #3
 8005580:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005582:	230a      	movs	r3, #10
 8005584:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005586:	a903      	add	r1, sp, #12
 8005588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800558c:	f000 fd32 	bl	8005ff4 <HAL_GPIO_Init>

  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005590:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005592:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005596:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005598:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800559a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800559e:	9302      	str	r3, [sp, #8]
 80055a0:	9b02      	ldr	r3, [sp, #8]

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80055a2:	462a      	mov	r2, r5
 80055a4:	2106      	movs	r1, #6
 80055a6:	2043      	movs	r0, #67	; 0x43
 80055a8:	f000 fcca 	bl	8005f40 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80055ac:	2043      	movs	r0, #67	; 0x43
 80055ae:	f000 fcff 	bl	8005fb0 <HAL_NVIC_EnableIRQ>
}
 80055b2:	b009      	add	sp, #36	; 0x24
 80055b4:	bd30      	pop	{r4, r5, pc}
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000

080055bc <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055bc:	b500      	push	{lr}
 80055be:	b083      	sub	sp, #12
  if (htim->Instance == TIM4) {
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <HAL_TIM_Base_MspInit+0x64>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d005      	beq.n	80055d4 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  #endif /* ALLMEMS1_MOTIONFA */
  } else if (htim->Instance == TIM5) {
 80055c8:	4a16      	ldr	r2, [pc, #88]	; (8005624 <HAL_TIM_Base_MspInit+0x68>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d015      	beq.n	80055fa <HAL_TIM_Base_MspInit+0x3e>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }

}  
 80055ce:	b003      	add	sp, #12
 80055d0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80055d4:	4b14      	ldr	r3, [pc, #80]	; (8005628 <HAL_TIM_Base_MspInit+0x6c>)
 80055d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055d8:	f042 0204 	orr.w	r2, r2, #4
 80055dc:	659a      	str	r2, [r3, #88]	; 0x58
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 80055e8:	2200      	movs	r2, #0
 80055ea:	210f      	movs	r1, #15
 80055ec:	201e      	movs	r0, #30
 80055ee:	f000 fca7 	bl	8005f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80055f2:	201e      	movs	r0, #30
 80055f4:	f000 fcdc 	bl	8005fb0 <HAL_NVIC_EnableIRQ>
 80055f8:	e7e9      	b.n	80055ce <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_TIM_Base_MspInit+0x6c>)
 80055fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055fe:	f042 0208 	orr.w	r2, r2, #8
 8005602:	659a      	str	r2, [r3, #88]	; 0x58
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 800560e:	2200      	movs	r2, #0
 8005610:	210f      	movs	r1, #15
 8005612:	2032      	movs	r0, #50	; 0x32
 8005614:	f000 fc94 	bl	8005f40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005618:	2032      	movs	r0, #50	; 0x32
 800561a:	f000 fcc9 	bl	8005fb0 <HAL_NVIC_EnableIRQ>
}  
 800561e:	e7d6      	b.n	80055ce <HAL_TIM_Base_MspInit+0x12>
 8005620:	40000800 	.word	0x40000800
 8005624:	40000c00 	.word	0x40000c00
 8005628:	40021000 	.word	0x40021000

0800562c <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 800562c:	b500      	push	{lr}
 800562e:	b083      	sub	sp, #12
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <HAL_TIM_OC_MspInit+0x30>)
 8005632:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005638:	661a      	str	r2, [r3, #96]	; 0x60
 800563a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 8005644:	2200      	movs	r2, #0
 8005646:	2108      	movs	r1, #8
 8005648:	201b      	movs	r0, #27
 800564a:	f000 fc79 	bl	8005f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800564e:	201b      	movs	r0, #27
 8005650:	f000 fcae 	bl	8005fb0 <HAL_NVIC_EnableIRQ>
}
 8005654:	b003      	add	sp, #12
 8005656:	f85d fb04 	ldr.w	pc, [sp], #4
 800565a:	bf00      	nop
 800565c:	40021000 	.word	0x40021000

08005660 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005660:	4770      	bx	lr

08005662 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005662:	e7fe      	b.n	8005662 <HardFault_Handler>

08005664 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005664:	e7fe      	b.n	8005664 <MemManage_Handler>

08005666 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005666:	e7fe      	b.n	8005666 <BusFault_Handler>

08005668 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005668:	e7fe      	b.n	8005668 <UsageFault_Handler>

0800566a <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800566a:	4770      	bx	lr

0800566c <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 800566c:	4770      	bx	lr

0800566e <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800566e:	4770      	bx	lr

08005670 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005670:	b508      	push	{r3, lr}
  HAL_IncTick();
 8005672:	f000 fc41 	bl	8005ef8 <HAL_IncTick>
}
 8005676:	bd08      	pop	{r3, pc}

08005678 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8005678:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimEnvHandle);
 800567a:	4802      	ldr	r0, [pc, #8]	; (8005684 <TIM4_IRQHandler+0xc>)
 800567c:	f003 fa1a 	bl	8008ab4 <HAL_TIM_IRQHandler>
}
 8005680:	bd08      	pop	{r3, pc}
 8005682:	bf00      	nop
 8005684:	20000394 	.word	0x20000394

08005688 <TIM5_IRQHandler>:
  * @retval None
  */
void TIM5_IRQHandler(void)
{  

}
 8005688:	4770      	bx	lr
	...

0800568c <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 800568c:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimCCHandle);
 800568e:	4802      	ldr	r0, [pc, #8]	; (8005698 <TIM1_CC_IRQHandler+0xc>)
 8005690:	f003 fa10 	bl	8008ab4 <HAL_TIM_IRQHandler>
}
 8005694:	bd08      	pop	{r3, pc}
 8005696:	bf00      	nop
 8005698:	20000344 	.word	0x20000344

0800569c <EXTI3_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 800569c:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800569e:	2008      	movs	r0, #8
 80056a0:	f000 fe42 	bl	8006328 <HAL_GPIO_EXTI_IRQHandler>
//  SW_BV_send_Callback();

}
 80056a4:	bd08      	pop	{r3, pc}

080056a6 <EXTI9_5_IRQHandler>:
  *         interrupt request for BlueNRG.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 80056a6:	b508      	push	{r3, lr}
  //HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
  HAL_GPIO_EXTI_IRQHandler(HCI_TL_SPI_EXTI_PIN);
 80056a8:	2020      	movs	r0, #32
 80056aa:	f000 fe3d 	bl	8006328 <HAL_GPIO_EXTI_IRQHandler>
}
 80056ae:	bd08      	pop	{r3, pc}

080056b0 <EXTI2_IRQHandler>:
  * @retval None
  */
void EXTI2_IRQHandler( void )
{
//  HAL_GPIO_EXTI_IRQHandler(BSP_LSM6DSM_INT2);
}
 80056b0:	4770      	bx	lr
	...

080056b4 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 80056b4:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 80056b6:	4802      	ldr	r0, [pc, #8]	; (80056c0 <OTG_FS_IRQHandler+0xc>)
 80056b8:	f000 ffa0 	bl	80065fc <HAL_PCD_IRQHandler>
}
 80056bc:	bd08      	pop	{r3, pc}
 80056be:	bf00      	nop
 80056c0:	20002064 	.word	0x20002064

080056c4 <TIM8_UP_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM8_IRQHandler(void)
{
 80056c4:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimHandle);
 80056c6:	4802      	ldr	r0, [pc, #8]	; (80056d0 <TIM8_UP_IRQHandler+0xc>)
 80056c8:	f003 f9f4 	bl	8008ab4 <HAL_TIM_IRQHandler>
}
 80056cc:	bd08      	pop	{r3, pc}
 80056ce:	bf00      	nop
 80056d0:	20000808 	.word	0x20000808

080056d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056d4:	b510      	push	{r4, lr}
 80056d6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056d8:	4a0c      	ldr	r2, [pc, #48]	; (800570c <_sbrk+0x38>)
 80056da:	490d      	ldr	r1, [pc, #52]	; (8005710 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056dc:	480d      	ldr	r0, [pc, #52]	; (8005714 <_sbrk+0x40>)
 80056de:	6800      	ldr	r0, [r0, #0]
 80056e0:	b140      	cbz	r0, 80056f4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056e2:	480c      	ldr	r0, [pc, #48]	; (8005714 <_sbrk+0x40>)
 80056e4:	6800      	ldr	r0, [r0, #0]
 80056e6:	4403      	add	r3, r0
 80056e8:	1a52      	subs	r2, r2, r1
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d806      	bhi.n	80056fc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80056ee:	4a09      	ldr	r2, [pc, #36]	; (8005714 <_sbrk+0x40>)
 80056f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80056f2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80056f4:	4807      	ldr	r0, [pc, #28]	; (8005714 <_sbrk+0x40>)
 80056f6:	4c08      	ldr	r4, [pc, #32]	; (8005718 <_sbrk+0x44>)
 80056f8:	6004      	str	r4, [r0, #0]
 80056fa:	e7f2      	b.n	80056e2 <_sbrk+0xe>
    errno = ENOMEM;
 80056fc:	f005 ff8e 	bl	800b61c <__errno>
 8005700:	230c      	movs	r3, #12
 8005702:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005708:	e7f3      	b.n	80056f2 <_sbrk+0x1e>
 800570a:	bf00      	nop
 800570c:	20018000 	.word	0x20018000
 8005710:	00002000 	.word	0x00002000
 8005714:	20000804 	.word	0x20000804
 8005718:	20002a70 	.word	0x20002a70

0800571c <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 800571c:	2000      	movs	r0, #0
 800571e:	4770      	bx	lr

08005720 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 8005720:	2820      	cmp	r0, #32
 8005722:	d003      	beq.n	800572c <CDC_Itf_Control+0xc>
 8005724:	2821      	cmp	r0, #33	; 0x21
 8005726:	d014      	beq.n	8005752 <CDC_Itf_Control+0x32>
  default:
    break;
  }
  
  return (USBD_OK);
}
 8005728:	2000      	movs	r0, #0
 800572a:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800572c:	780b      	ldrb	r3, [r1, #0]
 800572e:	784a      	ldrb	r2, [r1, #1]
 8005730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8005734:	788a      	ldrb	r2, [r1, #2]
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8005736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 800573a:	78ca      	ldrb	r2, [r1, #3]
 800573c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8005740:	4a0c      	ldr	r2, [pc, #48]	; (8005774 <CDC_Itf_Control+0x54>)
 8005742:	6013      	str	r3, [r2, #0]
    LineCoding.format     = pbuf[4];
 8005744:	790b      	ldrb	r3, [r1, #4]
 8005746:	7113      	strb	r3, [r2, #4]
    LineCoding.paritytype = pbuf[5];
 8005748:	794b      	ldrb	r3, [r1, #5]
 800574a:	7153      	strb	r3, [r2, #5]
    LineCoding.datatype   = pbuf[6];
 800574c:	798b      	ldrb	r3, [r1, #6]
 800574e:	7193      	strb	r3, [r2, #6]
    break;
 8005750:	e7ea      	b.n	8005728 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <CDC_Itf_Control+0x54>)
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8005758:	785a      	ldrb	r2, [r3, #1]
 800575a:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800575c:	789a      	ldrb	r2, [r3, #2]
 800575e:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8005760:	78da      	ldrb	r2, [r3, #3]
 8005762:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 8005764:	791a      	ldrb	r2, [r3, #4]
 8005766:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8005768:	795a      	ldrb	r2, [r3, #5]
 800576a:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800576c:	799b      	ldrb	r3, [r3, #6]
 800576e:	718b      	strb	r3, [r1, #6]
    break;
 8005770:	e7da      	b.n	8005728 <CDC_Itf_Control+0x8>
 8005772:	bf00      	nop
 8005774:	20000008 	.word	0x20000008

08005778 <CDC_Itf_Receive>:
//  }
//  
//  /* Initiate next USB packet transfer */
//  USBD_CDC_ReceivePacket(&USBD_Device);
  return (USBD_OK);
}
 8005778:	2000      	movs	r0, #0
 800577a:	4770      	bx	lr

0800577c <CDC_TIM_Config>:
  * @brief  CDC_TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void CDC_TIM_Config(void)
{  
 800577c:	b508      	push	{r3, lr}
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 800577e:	4809      	ldr	r0, [pc, #36]	; (80057a4 <CDC_TIM_Config+0x28>)
 8005780:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <CDC_TIM_Config+0x2c>)
 8005782:	6003      	str	r3, [r0, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8005784:	f241 3387 	movw	r3, #4999	; 0x1387
 8005788:	60c3      	str	r3, [r0, #12]
  TimHandle.Init.Prescaler = 80-1;
 800578a:	234f      	movs	r3, #79	; 0x4f
 800578c:	6043      	str	r3, [r0, #4]
  TimHandle.Init.ClockDivision = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	6103      	str	r3, [r0, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005792:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8005794:	f003 fac0 	bl	8008d18 <HAL_TIM_Base_Init>
 8005798:	b900      	cbnz	r0, 800579c <CDC_TIM_Config+0x20>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 800579a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800579c:	f7ff fddc 	bl	8005358 <Error_Handler>
}
 80057a0:	e7fb      	b.n	800579a <CDC_TIM_Config+0x1e>
 80057a2:	bf00      	nop
 80057a4:	20000808 	.word	0x20000808
 80057a8:	40013400 	.word	0x40013400

080057ac <CDC_Itf_Init>:
{
 80057ac:	b530      	push	{r4, r5, lr}
 80057ae:	b083      	sub	sp, #12
  TIMx_CLK_ENABLE();
 80057b0:	4b15      	ldr	r3, [pc, #84]	; (8005808 <CDC_Itf_Init+0x5c>)
 80057b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057b8:	661a      	str	r2, [r3, #96]	; 0x60
 80057ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057c0:	9301      	str	r3, [sp, #4]
 80057c2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 80057c4:	2200      	movs	r2, #0
 80057c6:	2106      	movs	r1, #6
 80057c8:	202c      	movs	r0, #44	; 0x2c
 80057ca:	f000 fbb9 	bl	8005f40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80057ce:	202c      	movs	r0, #44	; 0x2c
 80057d0:	f000 fbee 	bl	8005fb0 <HAL_NVIC_EnableIRQ>
  CDC_TIM_Config();
 80057d4:	f7ff ffd2 	bl	800577c <CDC_TIM_Config>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 80057d8:	480c      	ldr	r0, [pc, #48]	; (800580c <CDC_Itf_Init+0x60>)
 80057da:	f003 f909 	bl	80089f0 <HAL_TIM_Base_Start_IT>
 80057de:	b978      	cbnz	r0, 8005800 <CDC_Itf_Init+0x54>
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 80057e0:	4d0a      	ldr	r5, [pc, #40]	; (800580c <CDC_Itf_Init+0x60>)
 80057e2:	4c0b      	ldr	r4, [pc, #44]	; (8005810 <CDC_Itf_Init+0x64>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80057ea:	4620      	mov	r0, r4
 80057ec:	f005 f8c6 	bl	800a97c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 80057f0:	f605 014c 	addw	r1, r5, #2124	; 0x84c
 80057f4:	4620      	mov	r0, r4
 80057f6:	f005 f8cc 	bl	800a992 <USBD_CDC_SetRxBuffer>
}
 80057fa:	2000      	movs	r0, #0
 80057fc:	b003      	add	sp, #12
 80057fe:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8005800:	f7ff fdaa 	bl	8005358 <Error_Handler>
 8005804:	e7ec      	b.n	80057e0 <CDC_Itf_Init+0x34>
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	20000808 	.word	0x20000808
 8005810:	200003e4 	.word	0x200003e4

08005814 <CDC_Fill_Buffer>:
  for (i = 0; i < TotalLen; i++)
 8005814:	2200      	movs	r2, #0
 8005816:	428a      	cmp	r2, r1
 8005818:	d215      	bcs.n	8005846 <CDC_Fill_Buffer+0x32>
{
 800581a:	b530      	push	{r4, r5, lr}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 800581c:	4d0b      	ldr	r5, [pc, #44]	; (800584c <CDC_Fill_Buffer+0x38>)
 800581e:	f855 3cac 	ldr.w	r3, [r5, #-172]
 8005822:	f810 e002 	ldrb.w	lr, [r0, r2]
 8005826:	4c0a      	ldr	r4, [pc, #40]	; (8005850 <CDC_Fill_Buffer+0x3c>)
 8005828:	eb04 0c03 	add.w	ip, r4, r3
 800582c:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 8005830:	3301      	adds	r3, #1
 8005832:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005836:	f845 3cac 	str.w	r3, [r5, #-172]
  for (i = 0; i < TotalLen; i++)
 800583a:	3201      	adds	r2, #1
 800583c:	b292      	uxth	r2, r2
 800583e:	428a      	cmp	r2, r1
 8005840:	d3ec      	bcc.n	800581c <CDC_Fill_Buffer+0x8>
}
 8005842:	2000      	movs	r0, #0
 8005844:	bd30      	pop	{r4, r5, pc}
 8005846:	2000      	movs	r0, #0
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20001900 	.word	0x20001900
 8005850:	20000808 	.word	0x20000808

08005854 <CDC_TIM_PeriodElapsedCallback>:
{
 8005854:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8005856:	4a12      	ldr	r2, [pc, #72]	; (80058a0 <CDC_TIM_PeriodElapsedCallback+0x4c>)
 8005858:	f852 3ca8 	ldr.w	r3, [r2, #-168]
 800585c:	f852 4cac 	ldr.w	r4, [r2, #-172]
 8005860:	42a3      	cmp	r3, r4
 8005862:	d016      	beq.n	8005892 <CDC_TIM_PeriodElapsedCallback+0x3e>
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8005864:	d916      	bls.n	8005894 <CDC_TIM_PeriodElapsedCallback+0x40>
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8005866:	f5c3 6400 	rsb	r4, r3, #2048	; 0x800
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 800586a:	4d0e      	ldr	r5, [pc, #56]	; (80058a4 <CDC_TIM_PeriodElapsedCallback+0x50>)
 800586c:	4622      	mov	r2, r4
 800586e:	490e      	ldr	r1, [pc, #56]	; (80058a8 <CDC_TIM_PeriodElapsedCallback+0x54>)
 8005870:	4419      	add	r1, r3
 8005872:	4628      	mov	r0, r5
 8005874:	f005 f882 	bl	800a97c <USBD_CDC_SetTxBuffer>
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8005878:	4628      	mov	r0, r5
 800587a:	f005 f893 	bl	800a9a4 <USBD_CDC_TransmitPacket>
 800587e:	b940      	cbnz	r0, 8005892 <CDC_TIM_PeriodElapsedCallback+0x3e>
      UserTxBufPtrOut += buffsize;
 8005880:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <CDC_TIM_PeriodElapsedCallback+0x4c>)
 8005882:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8005886:	4422      	add	r2, r4
 8005888:	f843 2ca8 	str.w	r2, [r3, #-168]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 800588c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005890:	d002      	beq.n	8005898 <CDC_TIM_PeriodElapsedCallback+0x44>
}
 8005892:	bd38      	pop	{r3, r4, r5, pc}
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8005894:	1ae4      	subs	r4, r4, r3
 8005896:	e7e8      	b.n	800586a <CDC_TIM_PeriodElapsedCallback+0x16>
        UserTxBufPtrOut = 0;
 8005898:	2200      	movs	r2, #0
 800589a:	f843 2ca8 	str.w	r2, [r3, #-168]
}
 800589e:	e7f8      	b.n	8005892 <CDC_TIM_PeriodElapsedCallback+0x3e>
 80058a0:	20001900 	.word	0x20001900
 80058a4:	200003e4 	.word	0x200003e4
 80058a8:	20000854 	.word	0x20000854

080058ac <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80058ac:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80058ae:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80058b2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80058b6:	f005 f8d2 	bl	800aa5e <USBD_LL_SetupStage>
}
 80058ba:	bd08      	pop	{r3, pc}

080058bc <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80058bc:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80058be:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80058c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80058c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058ca:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80058ce:	f005 f8f2 	bl	800aab6 <USBD_LL_DataOutStage>
}
 80058d2:	bd08      	pop	{r3, pc}

080058d4 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80058d4:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80058d6:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80058da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80058de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058e0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80058e4:	f005 f923 	bl	800ab2e <USBD_LL_DataInStage>
}
 80058e8:	bd08      	pop	{r3, pc}

080058ea <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80058ea:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 80058ec:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80058f0:	f005 f9c3 	bl	800ac7a <USBD_LL_SOF>
}
 80058f4:	bd08      	pop	{r3, pc}

080058f6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 80058f6:	b510      	push	{r4, lr}
 80058f8:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 80058fa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80058fe:	f005 f975 	bl	800abec <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8005902:	2101      	movs	r1, #1
 8005904:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8005908:	f005 f99d 	bl	800ac46 <USBD_LL_SetSpeed>
}
 800590c:	bd10      	pop	{r4, pc}

0800590e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 800590e:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 8005910:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005914:	f005 f99a 	bl	800ac4c <USBD_LL_Suspend>
}
 8005918:	bd08      	pop	{r3, pc}

0800591a <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800591a:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 800591c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005920:	f005 f99e 	bl	800ac60 <USBD_LL_Resume>
}
 8005924:	bd08      	pop	{r3, pc}

08005926 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005926:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8005928:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800592c:	f005 f9cd 	bl	800acca <USBD_LL_IsoOUTIncomplete>
}
 8005930:	bd08      	pop	{r3, pc}

08005932 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005932:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8005934:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005938:	f005 f9b3 	bl	800aca2 <USBD_LL_IsoINIncomplete>
}
 800593c:	bd08      	pop	{r3, pc}

0800593e <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800593e:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 8005940:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005944:	f005 f9d5 	bl	800acf2 <USBD_LL_DevConnected>
}
 8005948:	bd08      	pop	{r3, pc}

0800594a <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800594a:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 800594c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005950:	f005 f9d1 	bl	800acf6 <USBD_LL_DevDisconnected>
}
 8005954:	bd08      	pop	{r3, pc}
	...

08005958 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005958:	b570      	push	{r4, r5, r6, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800595a:	4c15      	ldr	r4, [pc, #84]	; (80059b0 <USBD_LL_Init+0x58>)
 800595c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005960:	6023      	str	r3, [r4, #0]
  hpcd.Init.dev_endpoints = 5;
 8005962:	2305      	movs	r3, #5
 8005964:	6063      	str	r3, [r4, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 8005966:	2500      	movs	r5, #0
 8005968:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 800596a:	2640      	movs	r6, #64	; 0x40
 800596c:	6166      	str	r6, [r4, #20]
  hpcd.Init.dma_enable = 0;
 800596e:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8005970:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 8005972:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8005974:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005976:	2302      	movs	r3, #2
 8005978:	61a3      	str	r3, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 800597a:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800597c:	60e3      	str	r3, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 800597e:	62e5      	str	r5, [r4, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8005980:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  pdev->pData = &hpcd;
 8005984:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fd40 	bl	800640e <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 800598e:	2180      	movs	r1, #128	; 0x80
 8005990:	4620      	mov	r0, r4
 8005992:	f001 f9fa 	bl	8006d8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8005996:	4632      	mov	r2, r6
 8005998:	4629      	mov	r1, r5
 800599a:	4620      	mov	r0, r4
 800599c:	f001 f9cf 	bl	8006d3e <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 80059a0:	2280      	movs	r2, #128	; 0x80
 80059a2:	2101      	movs	r1, #1
 80059a4:	4620      	mov	r0, r4
 80059a6:	f001 f9ca 	bl	8006d3e <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 80059aa:	4628      	mov	r0, r5
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	bf00      	nop
 80059b0:	20002064 	.word	0x20002064

080059b4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80059b4:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80059b6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80059ba:	f000 fdc6 	bl	800654a <HAL_PCD_Start>
  return USBD_OK;
}
 80059be:	2000      	movs	r0, #0
 80059c0:	bd08      	pop	{r3, pc}

080059c2 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80059c2:	b508      	push	{r3, lr}
 80059c4:	4694      	mov	ip, r2
 80059c6:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 80059c8:	4663      	mov	r3, ip
 80059ca:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80059ce:	f001 f86b 	bl	8006aa8 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80059d2:	2000      	movs	r0, #0
 80059d4:	bd08      	pop	{r3, pc}

080059d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059d6:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80059d8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80059dc:	f001 f8a9 	bl	8006b32 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80059e0:	2000      	movs	r0, #0
 80059e2:	bd08      	pop	{r3, pc}

080059e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059e4:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80059e6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80059ea:	f001 f92a 	bl	8006c42 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80059ee:	2000      	movs	r0, #0
 80059f0:	bd08      	pop	{r3, pc}

080059f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80059f2:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80059f4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80059f8:	f001 f966 	bl	8006cc8 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80059fc:	2000      	movs	r0, #0
 80059fe:	bd08      	pop	{r3, pc}

08005a00 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005a00:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  
  if((ep_addr & 0x80) == 0x80)
 8005a04:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a08:	d108      	bne.n	8005a1c <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005a0a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005a0e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005a12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005a16:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8005a1a:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005a1c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8005a20:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005a24:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005a28:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8005a2c:	4770      	bx	lr

08005a2e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005a2e:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005a30:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005a34:	f001 f824 	bl	8006a80 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8005a38:	2000      	movs	r0, #0
 8005a3a:	bd08      	pop	{r3, pc}

08005a3c <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8005a3c:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005a3e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005a42:	f001 f8db 	bl	8006bfc <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8005a46:	2000      	movs	r0, #0
 8005a48:	bd08      	pop	{r3, pc}

08005a4a <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8005a4a:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005a4c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005a50:	f001 f8a8 	bl	8006ba4 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8005a54:	2000      	movs	r0, #0
 8005a56:	bd08      	pop	{r3, pc}

08005a58 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a58:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8005a5a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005a5e:	f001 f8c4 	bl	8006bea <HAL_PCD_EP_GetRxCount>
}
 8005a62:	bd08      	pop	{r3, pc}

08005a64 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8005a64:	2312      	movs	r3, #18
 8005a66:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8005a68:	4800      	ldr	r0, [pc, #0]	; (8005a6c <USBD_VCP_DeviceDescriptor+0x8>)
 8005a6a:	4770      	bx	lr
 8005a6c:	20000024 	.word	0x20000024

08005a70 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8005a70:	2304      	movs	r3, #4
 8005a72:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8005a74:	4800      	ldr	r0, [pc, #0]	; (8005a78 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8005a76:	4770      	bx	lr
 8005a78:	20000038 	.word	0x20000038

08005a7c <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d21e      	bcs.n	8005ac0 <IntToUnicode+0x44>
{
 8005a82:	b500      	push	{lr}
 8005a84:	e010      	b.n	8005aa8 <IntToUnicode+0x2c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8005a86:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 8005a8a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }
    
    value = value << 4;
 8005a8e:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 8005a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a94:	f10c 0c01 	add.w	ip, ip, #1
 8005a98:	f04f 0e00 	mov.w	lr, #0
 8005a9c:	f801 e00c 	strb.w	lr, [r1, ip]
  for( idx = 0 ; idx < len ; idx ++)
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d209      	bcs.n	8005abc <IntToUnicode+0x40>
    if( ((value >> 28)) < 0xA )
 8005aa8:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8005aac:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8005ab0:	d2e9      	bcs.n	8005a86 <IntToUnicode+0xa>
      pbuf[ 2* idx] = (value >> 28) + '0';
 8005ab2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8005ab6:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8005aba:	e7e8      	b.n	8005a8e <IntToUnicode+0x12>
  }
}
 8005abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <Get_SerialNum>:
{
 8005ac4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <Get_SerialNum+0x30>)
 8005ac8:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8005acc:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8005ad0:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8005ad4:	18c0      	adds	r0, r0, r3
 8005ad6:	d100      	bne.n	8005ada <Get_SerialNum+0x16>
}
 8005ad8:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8005ada:	4d07      	ldr	r5, [pc, #28]	; (8005af8 <Get_SerialNum+0x34>)
 8005adc:	2208      	movs	r2, #8
 8005ade:	f105 011a 	add.w	r1, r5, #26
 8005ae2:	f7ff ffcb 	bl	8005a7c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8005aec:	4620      	mov	r0, r4
 8005aee:	f7ff ffc5 	bl	8005a7c <IntToUnicode>
}
 8005af2:	e7f1      	b.n	8005ad8 <Get_SerialNum+0x14>
 8005af4:	1fff7000 	.word	0x1fff7000
 8005af8:	20000024 	.word	0x20000024

08005afc <USBD_VCP_SerialStrDescriptor>:
{
 8005afc:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005afe:	231a      	movs	r3, #26
 8005b00:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005b02:	f7ff ffdf 	bl	8005ac4 <Get_SerialNum>
}
 8005b06:	4801      	ldr	r0, [pc, #4]	; (8005b0c <USBD_VCP_SerialStrDescriptor+0x10>)
 8005b08:	bd08      	pop	{r3, pc}
 8005b0a:	bf00      	nop
 8005b0c:	2000003c 	.word	0x2000003c

08005b10 <USBD_VCP_ProductStrDescriptor>:
{  
 8005b10:	b510      	push	{r4, lr}
 8005b12:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8005b14:	4c03      	ldr	r4, [pc, #12]	; (8005b24 <USBD_VCP_ProductStrDescriptor+0x14>)
 8005b16:	4621      	mov	r1, r4
 8005b18:	4803      	ldr	r0, [pc, #12]	; (8005b28 <USBD_VCP_ProductStrDescriptor+0x18>)
 8005b1a:	f005 fc2c 	bl	800b376 <USBD_GetString>
}
 8005b1e:	4620      	mov	r0, r4
 8005b20:	bd10      	pop	{r4, pc}
 8005b22:	bf00      	nop
 8005b24:	2000246c 	.word	0x2000246c
 8005b28:	0800c098 	.word	0x0800c098

08005b2c <USBD_VCP_ManufacturerStrDescriptor>:
{
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005b30:	4c03      	ldr	r4, [pc, #12]	; (8005b40 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8005b32:	4621      	mov	r1, r4
 8005b34:	4803      	ldr	r0, [pc, #12]	; (8005b44 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8005b36:	f005 fc1e 	bl	800b376 <USBD_GetString>
}
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000246c 	.word	0x2000246c
 8005b44:	0800c0bc 	.word	0x0800c0bc

08005b48 <USBD_VCP_ConfigStrDescriptor>:
{ 
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8005b4c:	4c03      	ldr	r4, [pc, #12]	; (8005b5c <USBD_VCP_ConfigStrDescriptor+0x14>)
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4803      	ldr	r0, [pc, #12]	; (8005b60 <USBD_VCP_ConfigStrDescriptor+0x18>)
 8005b52:	f005 fc10 	bl	800b376 <USBD_GetString>
}
 8005b56:	4620      	mov	r0, r4
 8005b58:	bd10      	pop	{r4, pc}
 8005b5a:	bf00      	nop
 8005b5c:	2000246c 	.word	0x2000246c
 8005b60:	0800c0d0 	.word	0x0800c0d0

08005b64 <USBD_VCP_InterfaceStrDescriptor>:
{
 8005b64:	b510      	push	{r4, lr}
 8005b66:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8005b68:	4c03      	ldr	r4, [pc, #12]	; (8005b78 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4803      	ldr	r0, [pc, #12]	; (8005b7c <USBD_VCP_InterfaceStrDescriptor+0x18>)
 8005b6e:	f005 fc02 	bl	800b376 <USBD_GetString>
}
 8005b72:	4620      	mov	r0, r4
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	bf00      	nop
 8005b78:	2000246c 	.word	0x2000246c
 8005b7c:	0800c0dc 	.word	0x0800c0dc

08005b80 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8005b80:	b510      	push	{r4, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b86:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <BSP_LED_Init+0x74>)
 8005b88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b8e:	659a      	str	r2, [r3, #88]	; 0x58
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 8005b9a:	f001 f927 	bl	8006dec <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005b9e:	b94c      	cbnz	r4, 8005bb4 <BSP_LED_Init+0x34>
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <BSP_LED_Init+0x74>)
 8005ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ba8:	64da      	str	r2, [r3, #76]	; 0x4c
 8005baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	9b01      	ldr	r3, [sp, #4]
 8005bb4:	2c01      	cmp	r4, #1
 8005bb6:	d011      	beq.n	8005bdc <BSP_LED_Init+0x5c>
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <BSP_LED_Init+0x78>)
 8005bba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005bbe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8005bcc:	a903      	add	r1, sp, #12
 8005bce:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <BSP_LED_Init+0x7c>)
 8005bd0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005bd4:	f000 fa0e 	bl	8005ff4 <HAL_GPIO_Init>
}
 8005bd8:	b008      	add	sp, #32
 8005bda:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <BSP_LED_Init+0x74>)
 8005bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	64da      	str	r2, [r3, #76]	; 0x4c
 8005be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	9302      	str	r3, [sp, #8]
 8005bee:	9b02      	ldr	r3, [sp, #8]
 8005bf0:	e7e2      	b.n	8005bb8 <BSP_LED_Init+0x38>
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	0800bdc8 	.word	0x0800bdc8
 8005bfc:	20000074 	.word	0x20000074

08005c00 <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005c00:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8005c02:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <BSP_LED_Toggle+0x14>)
 8005c04:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8005c08:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <BSP_LED_Toggle+0x18>)
 8005c0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005c0e:	f000 fb81 	bl	8006314 <HAL_GPIO_TogglePin>
}
 8005c12:	bd08      	pop	{r3, pc}
 8005c14:	0800bdc8 	.word	0x0800bdc8
 8005c18:	20000074 	.word	0x20000074

08005c1c <SPI2_MspInit>:
  return ret;
}


static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005c1c:	b500      	push	{lr}
 8005c1e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005c20:	4b11      	ldr	r3, [pc, #68]	; (8005c68 <SPI2_MspInit+0x4c>)
 8005c22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c28:	659a      	str	r2, [r3, #88]	; 0x58
 8005c2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c2c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005c30:	9201      	str	r2, [sp, #4]
 8005c32:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c36:	f042 0202 	orr.w	r2, r2, #2
 8005c3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	9302      	str	r3, [sp, #8]
 8005c44:	9b02      	ldr	r3, [sp, #8]

    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005c46:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005c4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c50:	2201      	movs	r2, #1
 8005c52:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c54:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005c56:	2305      	movs	r3, #5
 8005c58:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c5a:	a903      	add	r1, sp, #12
 8005c5c:	4803      	ldr	r0, [pc, #12]	; (8005c6c <SPI2_MspInit+0x50>)
 8005c5e:	f000 f9c9 	bl	8005ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8005c62:	b009      	add	sp, #36	; 0x24
 8005c64:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	48000400 	.word	0x48000400

08005c70 <SPI1_MspInit>:
{
 8005c70:	b500      	push	{lr}
 8005c72:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c74:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <SPI1_MspInit+0x50>)
 8005c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c7c:	661a      	str	r2, [r3, #96]	; 0x60
 8005c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c84:	9201      	str	r2, [sp, #4]
 8005c86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	9302      	str	r3, [sp, #8]
 8005c98:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8005c9a:	23e0      	movs	r3, #224	; 0xe0
 8005c9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005caa:	2305      	movs	r3, #5
 8005cac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cae:	a903      	add	r1, sp, #12
 8005cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cb4:	f000 f99e 	bl	8005ff4 <HAL_GPIO_Init>
}
 8005cb8:	b009      	add	sp, #36	; 0x24
 8005cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cbe:	bf00      	nop
 8005cc0:	40021000 	.word	0x40021000

08005cc4 <BSP_SPI2_Send>:
{
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8005cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ccc:	460a      	mov	r2, r1
 8005cce:	4601      	mov	r1, r0
 8005cd0:	4804      	ldr	r0, [pc, #16]	; (8005ce4 <BSP_SPI2_Send+0x20>)
 8005cd2:	f002 fa37 	bl	8008144 <HAL_SPI_Transmit>
 8005cd6:	b908      	cbnz	r0, 8005cdc <BSP_SPI2_Send+0x18>
      ret = len;
 8005cd8:	4620      	mov	r0, r4
}
 8005cda:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005cdc:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8005ce0:	e7fb      	b.n	8005cda <BSP_SPI2_Send+0x16>
 8005ce2:	bf00      	nop
 8005ce4:	2000256c 	.word	0x2000256c

08005ce8 <BSP_SPI1_SendRecv>:
{
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8005cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	460a      	mov	r2, r1
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	4805      	ldr	r0, [pc, #20]	; (8005d10 <BSP_SPI1_SendRecv+0x28>)
 8005cfc:	f002 fb3c 	bl	8008378 <HAL_SPI_TransmitReceive>
 8005d00:	b910      	cbnz	r0, 8005d08 <BSP_SPI1_SendRecv+0x20>
      ret = len;
 8005d02:	4620      	mov	r0, r4
}
 8005d04:	b002      	add	sp, #8
 8005d06:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005d08:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8005d0c:	e7fa      	b.n	8005d04 <BSP_SPI1_SendRecv+0x1c>
 8005d0e:	bf00      	nop
 8005d10:	200025d0 	.word	0x200025d0

08005d14 <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8005d14:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8005d16:	f000 f8fb 	bl	8005f10 <HAL_GetTick>
}
 8005d1a:	bd08      	pop	{r3, pc}

08005d1c <MX_SPI1_Init>:
{
 8005d1c:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 8005d1e:	4a0f      	ldr	r2, [pc, #60]	; (8005d5c <MX_SPI1_Init+0x40>)
 8005d20:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005d22:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005d26:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8005d28:	2200      	movs	r2, #0
 8005d2a:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005d2c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005d30:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d32:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005d34:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d3a:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005d3c:	2118      	movs	r1, #24
 8005d3e:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005d40:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8005d42:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d44:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005d46:	2107      	movs	r1, #7
 8005d48:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005d4a:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005d50:	f002 f96a 	bl	8008028 <HAL_SPI_Init>
 8005d54:	b100      	cbz	r0, 8005d58 <MX_SPI1_Init+0x3c>
    ret = HAL_ERROR;
 8005d56:	2001      	movs	r0, #1
}
 8005d58:	bd08      	pop	{r3, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40013000 	.word	0x40013000

08005d60 <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 8005d60:	b510      	push	{r4, lr}
  hbusspi1.Instance  = SPI1;
 8005d62:	480a      	ldr	r0, [pc, #40]	; (8005d8c <BSP_SPI1_Init+0x2c>)
 8005d64:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <BSP_SPI1_Init+0x30>)
 8005d66:	f840 3f64 	str.w	r3, [r0, #100]!
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8005d6a:	f002 fd0a 	bl	8008782 <HAL_SPI_GetState>
 8005d6e:	b108      	cbz	r0, 8005d74 <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8005d70:	2000      	movs	r0, #0
}
 8005d72:	bd10      	pop	{r4, pc}
    SPI1_MspInit(&hbusspi1);
 8005d74:	4c07      	ldr	r4, [pc, #28]	; (8005d94 <BSP_SPI1_Init+0x34>)
 8005d76:	4620      	mov	r0, r4
 8005d78:	f7ff ff7a 	bl	8005c70 <SPI1_MspInit>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f7ff ffcd 	bl	8005d1c <MX_SPI1_Init>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d0f5      	beq.n	8005d72 <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 8005d86:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005d8a:	e7f2      	b.n	8005d72 <BSP_SPI1_Init+0x12>
 8005d8c:	2000256c 	.word	0x2000256c
 8005d90:	40013000 	.word	0x40013000
 8005d94:	200025d0 	.word	0x200025d0

08005d98 <MX_SPI2_Init>:
{
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4604      	mov	r4, r0
  hspi->Instance = SPI2;
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <MX_SPI2_Init+0x6c>)
 8005d9e:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005da0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005da4:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8005da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005daa:	6083      	str	r3, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005dac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005db0:	60c3      	str	r3, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005db2:	2302      	movs	r3, #2
 8005db4:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	6143      	str	r3, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dbe:	6183      	str	r3, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005dc0:	2330      	movs	r3, #48	; 0x30
 8005dc2:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8005dc8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dca:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005dcc:	2207      	movs	r2, #7
 8005dce:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005dd0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005dd2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005dd4:	f002 f928 	bl	8008028 <HAL_SPI_Init>
 8005dd8:	4605      	mov	r5, r0
 8005dda:	b100      	cbz	r0, 8005dde <MX_SPI2_Init+0x46>
    ret = HAL_ERROR;
 8005ddc:	2501      	movs	r5, #1
  HAL_Delay(5);
 8005dde:	2005      	movs	r0, #5
 8005de0:	f7ff fa84 	bl	80052ec <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8005de4:	6822      	ldr	r2, [r4, #0]
 8005de6:	6813      	ldr	r3, [r2, #0]
 8005de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dec:	6013      	str	r3, [r2, #0]
  HAL_Delay(5);
 8005dee:	2005      	movs	r0, #5
 8005df0:	f7ff fa7c 	bl	80052ec <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dfc:	6013      	str	r3, [r2, #0]
}
 8005dfe:	4628      	mov	r0, r5
 8005e00:	bd38      	pop	{r3, r4, r5, pc}
 8005e02:	bf00      	nop
 8005e04:	40003800 	.word	0x40003800

08005e08 <BSP_SPI2_Init>:
int32_t BSP_SPI2_Init(void) {
 8005e08:	b510      	push	{r4, lr}
  hbusspi2.Instance  = SPI2;
 8005e0a:	480a      	ldr	r0, [pc, #40]	; (8005e34 <BSP_SPI2_Init+0x2c>)
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <BSP_SPI2_Init+0x30>)
 8005e0e:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 8005e10:	f002 fcb7 	bl	8008782 <HAL_SPI_GetState>
 8005e14:	b108      	cbz	r0, 8005e1a <BSP_SPI2_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8005e16:	2000      	movs	r0, #0
}
 8005e18:	bd10      	pop	{r4, pc}
    SPI2_MspInit(&hbusspi2);
 8005e1a:	4c06      	ldr	r4, [pc, #24]	; (8005e34 <BSP_SPI2_Init+0x2c>)
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f7ff fefd 	bl	8005c1c <SPI2_MspInit>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8005e22:	4620      	mov	r0, r4
 8005e24:	f7ff ffb8 	bl	8005d98 <MX_SPI2_Init>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d0f5      	beq.n	8005e18 <BSP_SPI2_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 8005e2c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005e30:	e7f2      	b.n	8005e18 <BSP_SPI2_Init+0x10>
 8005e32:	bf00      	nop
 8005e34:	2000256c 	.word	0x2000256c
 8005e38:	40003800 	.word	0x40003800

08005e3c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e3c:	490f      	ldr	r1, [pc, #60]	; (8005e7c <SystemInit+0x40>)
 8005e3e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005e42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	; (8005e80 <SystemInit+0x44>)
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005e54:	2000      	movs	r0, #0
 8005e56:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8005e5e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005e62:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e70:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005e72:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e74:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <SystemInit+0x48>)
 8005e76:	608b      	str	r3, [r1, #8]
#endif
}
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	e000ed00 	.word	0xe000ed00
 8005e80:	40021000 	.word	0x40021000
 8005e84:	08004000 	.word	0x08004000

08005e88 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005e88:	4770      	bx	lr
	...

08005e8c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005e8c:	4b10      	ldr	r3, [pc, #64]	; (8005ed0 <HAL_InitTick+0x44>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b90b      	cbnz	r3, 8005e96 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e92:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005e94:	4770      	bx	lr
{
 8005e96:	b510      	push	{r4, lr}
 8005e98:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ea2:	4a0c      	ldr	r2, [pc, #48]	; (8005ed4 <HAL_InitTick+0x48>)
 8005ea4:	6810      	ldr	r0, [r2, #0]
 8005ea6:	fbb0 f0f3 	udiv	r0, r0, r3
 8005eaa:	f000 f88f 	bl	8005fcc <HAL_SYSTICK_Config>
 8005eae:	b968      	cbnz	r0, 8005ecc <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005eb0:	2c0f      	cmp	r4, #15
 8005eb2:	d901      	bls.n	8005eb8 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	e00a      	b.n	8005ece <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4621      	mov	r1, r4
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec0:	f000 f83e 	bl	8005f40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ec4:	4b02      	ldr	r3, [pc, #8]	; (8005ed0 <HAL_InitTick+0x44>)
 8005ec6:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e000      	b.n	8005ece <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8005ecc:	2001      	movs	r0, #1
}
 8005ece:	bd10      	pop	{r4, pc}
 8005ed0:	20000080 	.word	0x20000080
 8005ed4:	2000007c 	.word	0x2000007c

08005ed8 <HAL_Init>:
{
 8005ed8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005eda:	2003      	movs	r0, #3
 8005edc:	f000 f81e 	bl	8005f1c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ee0:	200f      	movs	r0, #15
 8005ee2:	f7ff ffd3 	bl	8005e8c <HAL_InitTick>
 8005ee6:	b110      	cbz	r0, 8005eee <HAL_Init+0x16>
    status = HAL_ERROR;
 8005ee8:	2401      	movs	r4, #1
}
 8005eea:	4620      	mov	r0, r4
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	4604      	mov	r4, r0
    HAL_MspInit();
 8005ef0:	f7ff ffca 	bl	8005e88 <HAL_MspInit>
 8005ef4:	e7f9      	b.n	8005eea <HAL_Init+0x12>
	...

08005ef8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005ef8:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <HAL_IncTick+0x10>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	4a03      	ldr	r2, [pc, #12]	; (8005f0c <HAL_IncTick+0x14>)
 8005efe:	6811      	ldr	r1, [r2, #0]
 8005f00:	440b      	add	r3, r1
 8005f02:	6013      	str	r3, [r2, #0]
}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000080 	.word	0x20000080
 8005f0c:	20002634 	.word	0x20002634

08005f10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005f10:	4b01      	ldr	r3, [pc, #4]	; (8005f18 <HAL_GetTick+0x8>)
 8005f12:	6818      	ldr	r0, [r3, #0]
}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20002634 	.word	0x20002634

08005f1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f1c:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005f1e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f28:	0200      	lsls	r0, r0, #8
 8005f2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f2e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8005f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005f38:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005f3a:	4770      	bx	lr
 8005f3c:	e000ed00 	.word	0xe000ed00

08005f40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f40:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f42:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <HAL_NVIC_SetPriority+0x68>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f4a:	f1c3 0c07 	rsb	ip, r3, #7
 8005f4e:	f1bc 0f04 	cmp.w	ip, #4
 8005f52:	bf28      	it	cs
 8005f54:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f58:	f103 0e04 	add.w	lr, r3, #4
 8005f5c:	f1be 0f06 	cmp.w	lr, #6
 8005f60:	d918      	bls.n	8005f94 <HAL_NVIC_SetPriority+0x54>
 8005f62:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f64:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8005f68:	fa0e fc0c 	lsl.w	ip, lr, ip
 8005f6c:	ea21 010c 	bic.w	r1, r1, ip
 8005f70:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f72:	fa0e fe03 	lsl.w	lr, lr, r3
 8005f76:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f7a:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	db0b      	blt.n	8005f98 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f80:	0112      	lsls	r2, r2, #4
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005f88:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005f8c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005f90:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f94:	2300      	movs	r3, #0
 8005f96:	e7e5      	b.n	8005f64 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f98:	f000 000f 	and.w	r0, r0, #15
 8005f9c:	0112      	lsls	r2, r2, #4
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	4b02      	ldr	r3, [pc, #8]	; (8005fac <HAL_NVIC_SetPriority+0x6c>)
 8005fa2:	541a      	strb	r2, [r3, r0]
 8005fa4:	e7f4      	b.n	8005f90 <HAL_NVIC_SetPriority+0x50>
 8005fa6:	bf00      	nop
 8005fa8:	e000ed00 	.word	0xe000ed00
 8005fac:	e000ed14 	.word	0xe000ed14

08005fb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	db07      	blt.n	8005fc4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fb4:	f000 021f 	and.w	r2, r0, #31
 8005fb8:	0940      	lsrs	r0, r0, #5
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4093      	lsls	r3, r2
 8005fbe:	4a02      	ldr	r2, [pc, #8]	; (8005fc8 <HAL_NVIC_EnableIRQ+0x18>)
 8005fc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	e000e100 	.word	0xe000e100

08005fcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fcc:	3801      	subs	r0, #1
 8005fce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005fd2:	d20b      	bcs.n	8005fec <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005fd8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fda:	4a05      	ldr	r2, [pc, #20]	; (8005ff0 <HAL_SYSTICK_Config+0x24>)
 8005fdc:	21f0      	movs	r1, #240	; 0xf0
 8005fde:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fe6:	2207      	movs	r2, #7
 8005fe8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fea:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005fec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005fee:	4770      	bx	lr
 8005ff0:	e000ed00 	.word	0xe000ed00

08005ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ff6:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8005ff8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ffa:	e03f      	b.n	800607c <HAL_GPIO_Init+0x88>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005ffc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005ffe:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8006002:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8006006:	409c      	lsls	r4, r3
 8006008:	432c      	orrs	r4, r5
        GPIOx->ASCR = temp;
 800600a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800600c:	e062      	b.n	80060d4 <HAL_GPIO_Init+0xe0>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800600e:	2406      	movs	r4, #6
 8006010:	e000      	b.n	8006014 <HAL_GPIO_Init+0x20>
 8006012:	2400      	movs	r4, #0
 8006014:	40b4      	lsls	r4, r6
 8006016:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006018:	3502      	adds	r5, #2
 800601a:	4e68      	ldr	r6, [pc, #416]	; (80061bc <HAL_GPIO_Init+0x1c8>)
 800601c:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006020:	4c67      	ldr	r4, [pc, #412]	; (80061c0 <HAL_GPIO_Init+0x1cc>)
 8006022:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006024:	43d4      	mvns	r4, r2
 8006026:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800602a:	684f      	ldr	r7, [r1, #4]
 800602c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8006030:	d001      	beq.n	8006036 <HAL_GPIO_Init+0x42>
        {
          temp |= iocurrent;
 8006032:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8006036:	4d62      	ldr	r5, [pc, #392]	; (80061c0 <HAL_GPIO_Init+0x1cc>)
 8006038:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 800603a:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800603c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006040:	684f      	ldr	r7, [r1, #4]
 8006042:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8006046:	d001      	beq.n	800604c <HAL_GPIO_Init+0x58>
        {
          temp |= iocurrent;
 8006048:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800604c:	4d5c      	ldr	r5, [pc, #368]	; (80061c0 <HAL_GPIO_Init+0x1cc>)
 800604e:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006050:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8006052:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006056:	684f      	ldr	r7, [r1, #4]
 8006058:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800605c:	d001      	beq.n	8006062 <HAL_GPIO_Init+0x6e>
        {
          temp |= iocurrent;
 800605e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8006062:	4d57      	ldr	r5, [pc, #348]	; (80061c0 <HAL_GPIO_Init+0x1cc>)
 8006064:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8006066:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8006068:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800606a:	684e      	ldr	r6, [r1, #4]
 800606c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8006070:	d001      	beq.n	8006076 <HAL_GPIO_Init+0x82>
        {
          temp |= iocurrent;
 8006072:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8006076:	4a52      	ldr	r2, [pc, #328]	; (80061c0 <HAL_GPIO_Init+0x1cc>)
 8006078:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 800607a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800607c:	680a      	ldr	r2, [r1, #0]
 800607e:	fa32 f403 	lsrs.w	r4, r2, r3
 8006082:	f000 8098 	beq.w	80061b6 <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006086:	f04f 0c01 	mov.w	ip, #1
 800608a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800608e:	ea1c 0202 	ands.w	r2, ip, r2
 8006092:	d0f2      	beq.n	800607a <HAL_GPIO_Init+0x86>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006094:	684c      	ldr	r4, [r1, #4]
 8006096:	1e65      	subs	r5, r4, #1
 8006098:	2d01      	cmp	r5, #1
 800609a:	d903      	bls.n	80060a4 <HAL_GPIO_Init+0xb0>
 800609c:	2c11      	cmp	r4, #17
 800609e:	d001      	beq.n	80060a4 <HAL_GPIO_Init+0xb0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060a0:	2c12      	cmp	r4, #18
 80060a2:	d112      	bne.n	80060ca <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 80060a4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060a6:	005e      	lsls	r6, r3, #1
 80060a8:	2403      	movs	r4, #3
 80060aa:	40b4      	lsls	r4, r6
 80060ac:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060b0:	68cc      	ldr	r4, [r1, #12]
 80060b2:	40b4      	lsls	r4, r6
 80060b4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80060b6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80060b8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ba:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80060be:	684c      	ldr	r4, [r1, #4]
 80060c0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80060c4:	409c      	lsls	r4, r3
 80060c6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80060c8:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80060ca:	684c      	ldr	r4, [r1, #4]
 80060cc:	f004 0503 	and.w	r5, r4, #3
 80060d0:	2d03      	cmp	r5, #3
 80060d2:	d093      	beq.n	8005ffc <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 80060d4:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80060d6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80060da:	2403      	movs	r4, #3
 80060dc:	fa04 f40e 	lsl.w	r4, r4, lr
 80060e0:	ea6f 0c04 	mvn.w	ip, r4
 80060e4:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80060e8:	688c      	ldr	r4, [r1, #8]
 80060ea:	fa04 f40e 	lsl.w	r4, r4, lr
 80060ee:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80060f0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060f2:	684c      	ldr	r4, [r1, #4]
 80060f4:	2c02      	cmp	r4, #2
 80060f6:	d001      	beq.n	80060fc <HAL_GPIO_Init+0x108>
 80060f8:	2c12      	cmp	r4, #18
 80060fa:	d10f      	bne.n	800611c <HAL_GPIO_Init+0x128>
        temp = GPIOx->AFR[position >> 3u];
 80060fc:	08dd      	lsrs	r5, r3, #3
 80060fe:	3508      	adds	r5, #8
 8006100:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006104:	f003 0607 	and.w	r6, r3, #7
 8006108:	00b6      	lsls	r6, r6, #2
 800610a:	240f      	movs	r4, #15
 800610c:	40b4      	lsls	r4, r6
 800610e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006112:	690c      	ldr	r4, [r1, #16]
 8006114:	40b4      	lsls	r4, r6
 8006116:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3u] = temp;
 8006118:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800611c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800611e:	ea0c 0c04 	and.w	ip, ip, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006122:	684c      	ldr	r4, [r1, #4]
 8006124:	f004 0403 	and.w	r4, r4, #3
 8006128:	fa04 f40e 	lsl.w	r4, r4, lr
 800612c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8006130:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006132:	684c      	ldr	r4, [r1, #4]
 8006134:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8006138:	d09f      	beq.n	800607a <HAL_GPIO_Init+0x86>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800613a:	4c22      	ldr	r4, [pc, #136]	; (80061c4 <HAL_GPIO_Init+0x1d0>)
 800613c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800613e:	f045 0501 	orr.w	r5, r5, #1
 8006142:	6625      	str	r5, [r4, #96]	; 0x60
 8006144:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8006146:	f004 0401 	and.w	r4, r4, #1
 800614a:	9401      	str	r4, [sp, #4]
 800614c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800614e:	089d      	lsrs	r5, r3, #2
 8006150:	1cae      	adds	r6, r5, #2
 8006152:	4c1a      	ldr	r4, [pc, #104]	; (80061bc <HAL_GPIO_Init+0x1c8>)
 8006154:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006158:	f003 0603 	and.w	r6, r3, #3
 800615c:	00b6      	lsls	r6, r6, #2
 800615e:	240f      	movs	r4, #15
 8006160:	40b4      	lsls	r4, r6
 8006162:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006166:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800616a:	f43f af52 	beq.w	8006012 <HAL_GPIO_Init+0x1e>
 800616e:	4c16      	ldr	r4, [pc, #88]	; (80061c8 <HAL_GPIO_Init+0x1d4>)
 8006170:	42a0      	cmp	r0, r4
 8006172:	d016      	beq.n	80061a2 <HAL_GPIO_Init+0x1ae>
 8006174:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006178:	42a0      	cmp	r0, r4
 800617a:	d014      	beq.n	80061a6 <HAL_GPIO_Init+0x1b2>
 800617c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006180:	42a0      	cmp	r0, r4
 8006182:	d012      	beq.n	80061aa <HAL_GPIO_Init+0x1b6>
 8006184:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006188:	42a0      	cmp	r0, r4
 800618a:	d010      	beq.n	80061ae <HAL_GPIO_Init+0x1ba>
 800618c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006190:	42a0      	cmp	r0, r4
 8006192:	d00e      	beq.n	80061b2 <HAL_GPIO_Init+0x1be>
 8006194:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006198:	42a0      	cmp	r0, r4
 800619a:	f43f af38 	beq.w	800600e <HAL_GPIO_Init+0x1a>
 800619e:	2407      	movs	r4, #7
 80061a0:	e738      	b.n	8006014 <HAL_GPIO_Init+0x20>
 80061a2:	2401      	movs	r4, #1
 80061a4:	e736      	b.n	8006014 <HAL_GPIO_Init+0x20>
 80061a6:	2402      	movs	r4, #2
 80061a8:	e734      	b.n	8006014 <HAL_GPIO_Init+0x20>
 80061aa:	2403      	movs	r4, #3
 80061ac:	e732      	b.n	8006014 <HAL_GPIO_Init+0x20>
 80061ae:	2404      	movs	r4, #4
 80061b0:	e730      	b.n	8006014 <HAL_GPIO_Init+0x20>
 80061b2:	2405      	movs	r4, #5
 80061b4:	e72e      	b.n	8006014 <HAL_GPIO_Init+0x20>
  }
}
 80061b6:	b003      	add	sp, #12
 80061b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40010400 	.word	0x40010400
 80061c4:	40021000 	.word	0x40021000
 80061c8:	48000400 	.word	0x48000400

080061cc <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80061cc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80061ce:	fa31 f203 	lsrs.w	r2, r1, r3
 80061d2:	f000 808b 	beq.w	80062ec <HAL_GPIO_DeInit+0x120>
{
 80061d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d8:	e032      	b.n	8006240 <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80061da:	2506      	movs	r5, #6
 80061dc:	e000      	b.n	80061e0 <HAL_GPIO_DeInit+0x14>
 80061de:	2500      	movs	r5, #0
 80061e0:	fa05 f50c 	lsl.w	r5, r5, ip
 80061e4:	42a5      	cmp	r5, r4
 80061e6:	d065      	beq.n	80062b4 <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80061e8:	6804      	ldr	r4, [r0, #0]
 80061ea:	005d      	lsls	r5, r3, #1
 80061ec:	f04f 0c03 	mov.w	ip, #3
 80061f0:	fa0c fc05 	lsl.w	ip, ip, r5
 80061f4:	ea44 040c 	orr.w	r4, r4, ip
 80061f8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80061fa:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80061fe:	f10e 0e08 	add.w	lr, lr, #8
 8006202:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8006206:	f003 0607 	and.w	r6, r3, #7
 800620a:	00b6      	lsls	r6, r6, #2
 800620c:	250f      	movs	r5, #15
 800620e:	40b5      	lsls	r5, r6
 8006210:	ea24 0405 	bic.w	r4, r4, r5
 8006214:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006218:	6884      	ldr	r4, [r0, #8]
 800621a:	ea24 040c 	bic.w	r4, r4, ip
 800621e:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006220:	6844      	ldr	r4, [r0, #4]
 8006222:	ea24 0402 	bic.w	r4, r4, r2
 8006226:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006228:	68c4      	ldr	r4, [r0, #12]
 800622a:	ea24 040c 	bic.w	r4, r4, ip
 800622e:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006230:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006232:	ea24 0202 	bic.w	r2, r4, r2
 8006236:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006238:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800623a:	fa31 f203 	lsrs.w	r2, r1, r3
 800623e:	d054      	beq.n	80062ea <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006240:	2201      	movs	r2, #1
 8006242:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8006244:	ea12 0701 	ands.w	r7, r2, r1
 8006248:	d0f6      	beq.n	8006238 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800624a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800624e:	f10e 0502 	add.w	r5, lr, #2
 8006252:	4c27      	ldr	r4, [pc, #156]	; (80062f0 <HAL_GPIO_DeInit+0x124>)
 8006254:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006258:	f003 0c03 	and.w	ip, r3, #3
 800625c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006260:	250f      	movs	r5, #15
 8006262:	fa05 f60c 	lsl.w	r6, r5, ip
 8006266:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006268:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800626c:	d0b7      	beq.n	80061de <HAL_GPIO_DeInit+0x12>
 800626e:	4d21      	ldr	r5, [pc, #132]	; (80062f4 <HAL_GPIO_DeInit+0x128>)
 8006270:	42a8      	cmp	r0, r5
 8006272:	d015      	beq.n	80062a0 <HAL_GPIO_DeInit+0xd4>
 8006274:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006278:	42a8      	cmp	r0, r5
 800627a:	d013      	beq.n	80062a4 <HAL_GPIO_DeInit+0xd8>
 800627c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006280:	42a8      	cmp	r0, r5
 8006282:	d011      	beq.n	80062a8 <HAL_GPIO_DeInit+0xdc>
 8006284:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006288:	42a8      	cmp	r0, r5
 800628a:	d00f      	beq.n	80062ac <HAL_GPIO_DeInit+0xe0>
 800628c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006290:	42a8      	cmp	r0, r5
 8006292:	d00d      	beq.n	80062b0 <HAL_GPIO_DeInit+0xe4>
 8006294:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006298:	42a8      	cmp	r0, r5
 800629a:	d09e      	beq.n	80061da <HAL_GPIO_DeInit+0xe>
 800629c:	2507      	movs	r5, #7
 800629e:	e79f      	b.n	80061e0 <HAL_GPIO_DeInit+0x14>
 80062a0:	2501      	movs	r5, #1
 80062a2:	e79d      	b.n	80061e0 <HAL_GPIO_DeInit+0x14>
 80062a4:	2502      	movs	r5, #2
 80062a6:	e79b      	b.n	80061e0 <HAL_GPIO_DeInit+0x14>
 80062a8:	2503      	movs	r5, #3
 80062aa:	e799      	b.n	80061e0 <HAL_GPIO_DeInit+0x14>
 80062ac:	2504      	movs	r5, #4
 80062ae:	e797      	b.n	80061e0 <HAL_GPIO_DeInit+0x14>
 80062b0:	2505      	movs	r5, #5
 80062b2:	e795      	b.n	80061e0 <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 80062b4:	4c10      	ldr	r4, [pc, #64]	; (80062f8 <HAL_GPIO_DeInit+0x12c>)
 80062b6:	6825      	ldr	r5, [r4, #0]
 80062b8:	ea25 0507 	bic.w	r5, r5, r7
 80062bc:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80062be:	6865      	ldr	r5, [r4, #4]
 80062c0:	ea25 0507 	bic.w	r5, r5, r7
 80062c4:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80062c6:	68a5      	ldr	r5, [r4, #8]
 80062c8:	ea25 0507 	bic.w	r5, r5, r7
 80062cc:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80062ce:	68e5      	ldr	r5, [r4, #12]
 80062d0:	ea25 0507 	bic.w	r5, r5, r7
 80062d4:	60e5      	str	r5, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80062d6:	4f06      	ldr	r7, [pc, #24]	; (80062f0 <HAL_GPIO_DeInit+0x124>)
 80062d8:	f10e 0402 	add.w	r4, lr, #2
 80062dc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80062e0:	ea25 0506 	bic.w	r5, r5, r6
 80062e4:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80062e8:	e77e      	b.n	80061e8 <HAL_GPIO_DeInit+0x1c>
  }
}
 80062ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40010000 	.word	0x40010000
 80062f4:	48000400 	.word	0x48000400
 80062f8:	40010400 	.word	0x40010400

080062fc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80062fc:	6903      	ldr	r3, [r0, #16]
 80062fe:	4219      	tst	r1, r3
 8006300:	d001      	beq.n	8006306 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8006302:	2001      	movs	r0, #1
 8006304:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006306:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8006308:	4770      	bx	lr

0800630a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800630a:	b10a      	cbz	r2, 8006310 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800630c:	6181      	str	r1, [r0, #24]
 800630e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006310:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006312:	4770      	bx	lr

08006314 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006314:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006316:	ea01 0203 	and.w	r2, r1, r3
 800631a:	ea21 0103 	bic.w	r1, r1, r3
 800631e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006322:	6181      	str	r1, [r0, #24]
}
 8006324:	4770      	bx	lr
	...

08006328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006328:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	4203      	tst	r3, r0
 8006330:	d100      	bne.n	8006334 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8006332:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006334:	4b02      	ldr	r3, [pc, #8]	; (8006340 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8006336:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006338:	f7ff f900 	bl	800553c <HAL_GPIO_EXTI_Callback>
}
 800633c:	e7f9      	b.n	8006332 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800633e:	bf00      	nop
 8006340:	40010400 	.word	0x40010400

08006344 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006348:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800634a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800634e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006356:	429a      	cmp	r2, r3
 8006358:	d854      	bhi.n	8006404 <PCD_WriteEmptyTxFifo+0xc0>
 800635a:	4680      	mov	r8, r0
 800635c:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800635e:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8006360:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8006364:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006368:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800636a:	429a      	cmp	r2, r3
 800636c:	d300      	bcc.n	8006370 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 800636e:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8006370:	f102 0903 	add.w	r9, r2, #3
 8006374:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006378:	e013      	b.n	80063a2 <PCD_WriteEmptyTxFifo+0x5e>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 800637a:	f106 0903 	add.w	r9, r6, #3
 800637e:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8006382:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8006386:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800638a:	b2b3      	uxth	r3, r6
 800638c:	b2e2      	uxtb	r2, r4
 800638e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8006390:	4638      	mov	r0, r7
 8006392:	f003 f9fc 	bl	800978e <USB_WritePacket>

    ep->xfer_buff  += len;
 8006396:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8006398:	4433      	add	r3, r6
 800639a:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800639c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800639e:	4433      	add	r3, r6
 80063a0:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063a2:	eb07 1344 	add.w	r3, r7, r4, lsl #5
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063ae:	454b      	cmp	r3, r9
 80063b0:	d312      	bcc.n	80063d8 <PCD_WriteEmptyTxFifo+0x94>
 80063b2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80063b6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80063ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063be:	429a      	cmp	r2, r3
 80063c0:	d20a      	bcs.n	80063d8 <PCD_WriteEmptyTxFifo+0x94>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80063c2:	b14b      	cbz	r3, 80063d8 <PCD_WriteEmptyTxFifo+0x94>
    len = ep->xfer_len - ep->xfer_count;
 80063c4:	1a9b      	subs	r3, r3, r2
    if (len > ep->maxpacket)
 80063c6:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80063ca:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80063ce:	6c56      	ldr	r6, [r2, #68]	; 0x44
 80063d0:	429e      	cmp	r6, r3
 80063d2:	d3d2      	bcc.n	800637a <PCD_WriteEmptyTxFifo+0x36>
    len = ep->xfer_len - ep->xfer_count;
 80063d4:	461e      	mov	r6, r3
 80063d6:	e7d0      	b.n	800637a <PCD_WriteEmptyTxFifo+0x36>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80063d8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80063dc:	eb08 0883 	add.w	r8, r8, r3, lsl #2
 80063e0:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80063e4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d80e      	bhi.n	800640a <PCD_WriteEmptyTxFifo+0xc6>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063ec:	f004 040f 	and.w	r4, r4, #15
 80063f0:	2201      	movs	r2, #1
 80063f2:	40a2      	lsls	r2, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063f4:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80063f8:	ea23 0302 	bic.w	r3, r3, r2
 80063fc:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 8006400:	2000      	movs	r0, #0
 8006402:	e000      	b.n	8006406 <PCD_WriteEmptyTxFifo+0xc2>
    return HAL_ERROR;
 8006404:	2001      	movs	r0, #1
}
 8006406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 800640a:	2000      	movs	r0, #0
 800640c:	e7fb      	b.n	8006406 <PCD_WriteEmptyTxFifo+0xc2>

0800640e <HAL_PCD_Init>:
{
 800640e:	b570      	push	{r4, r5, r6, lr}
 8006410:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8006412:	2800      	cmp	r0, #0
 8006414:	f000 8097 	beq.w	8006546 <HAL_PCD_Init+0x138>
 8006418:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 800641a:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800641c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8006420:	b33b      	cbz	r3, 8006472 <HAL_PCD_Init+0x64>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8006422:	2303      	movs	r3, #3
 8006424:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006428:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800642a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800642e:	d101      	bne.n	8006434 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8006434:	6828      	ldr	r0, [r5, #0]
 8006436:	f002 ff69 	bl	800930c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800643a:	462c      	mov	r4, r5
 800643c:	f854 6b10 	ldr.w	r6, [r4], #16
 8006440:	46ec      	mov	ip, sp
 8006442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006444:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800644a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800644e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006452:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006456:	1d2b      	adds	r3, r5, #4
 8006458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800645a:	4630      	mov	r0, r6
 800645c:	f002 fec2 	bl	80091e4 <USB_CoreInit>
 8006460:	4604      	mov	r4, r0
 8006462:	b158      	cbz	r0, 800647c <HAL_PCD_Init+0x6e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006464:	2302      	movs	r3, #2
 8006466:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 800646a:	2401      	movs	r4, #1
}
 800646c:	4620      	mov	r0, r4
 800646e:	b00a      	add	sp, #40	; 0x28
 8006470:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8006472:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8006476:	f7ff f86f 	bl	8005558 <HAL_PCD_MspInit>
 800647a:	e7d2      	b.n	8006422 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800647c:	2100      	movs	r1, #0
 800647e:	6828      	ldr	r0, [r5, #0]
 8006480:	f002 ff4a 	bl	8009318 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006484:	4623      	mov	r3, r4
 8006486:	e016      	b.n	80064b6 <HAL_PCD_Init+0xa8>
    hpcd->IN_ep[i].is_in = 1U;
 8006488:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800648c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006490:	2101      	movs	r1, #1
 8006492:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8006496:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800649a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800649e:	2100      	movs	r1, #0
 80064a0:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80064a4:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80064a6:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80064a8:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80064ac:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80064b0:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064b2:	3301      	adds	r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	6869      	ldr	r1, [r5, #4]
 80064b8:	428b      	cmp	r3, r1
 80064ba:	d3e5      	bcc.n	8006488 <HAL_PCD_Init+0x7a>
 80064bc:	e016      	b.n	80064ec <HAL_PCD_Init+0xde>
    hpcd->OUT_ep[i].is_in = 0U;
 80064be:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80064c2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80064cc:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064d0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80064dc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80064e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80064e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064e8:	3401      	adds	r4, #1
 80064ea:	b2e4      	uxtb	r4, r4
 80064ec:	42a1      	cmp	r1, r4
 80064ee:	d8e6      	bhi.n	80064be <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064f0:	462c      	mov	r4, r5
 80064f2:	f854 6b10 	ldr.w	r6, [r4], #16
 80064f6:	46ec      	mov	ip, sp
 80064f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80064fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006500:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006504:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006508:	e88c 0003 	stmia.w	ip, {r0, r1}
 800650c:	1d2b      	adds	r3, r5, #4
 800650e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006510:	4630      	mov	r0, r6
 8006512:	f002 ff47 	bl	80093a4 <USB_DevInit>
 8006516:	4604      	mov	r4, r0
 8006518:	b960      	cbnz	r0, 8006534 <HAL_PCD_Init+0x126>
  hpcd->USB_Address = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006520:	2301      	movs	r3, #1
 8006522:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8006526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006528:	2b01      	cmp	r3, #1
 800652a:	d008      	beq.n	800653e <HAL_PCD_Init+0x130>
  (void)USB_DevDisconnect(hpcd->Instance);
 800652c:	6828      	ldr	r0, [r5, #0]
 800652e:	f003 faa1 	bl	8009a74 <USB_DevDisconnect>
  return HAL_OK;
 8006532:	e79b      	b.n	800646c <HAL_PCD_Init+0x5e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006534:	2302      	movs	r3, #2
 8006536:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 800653a:	2401      	movs	r4, #1
 800653c:	e796      	b.n	800646c <HAL_PCD_Init+0x5e>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800653e:	4628      	mov	r0, r5
 8006540:	f000 fc27 	bl	8006d92 <HAL_PCDEx_ActivateLPM>
 8006544:	e7f2      	b.n	800652c <HAL_PCD_Init+0x11e>
    return HAL_ERROR;
 8006546:	2401      	movs	r4, #1
 8006548:	e790      	b.n	800646c <HAL_PCD_Init+0x5e>

0800654a <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800654a:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 800654c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8006550:	2b01      	cmp	r3, #1
 8006552:	d016      	beq.n	8006582 <HAL_PCD_Start+0x38>
{
 8006554:	b510      	push	{r4, lr}
 8006556:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006558:	2301      	movs	r3, #1
 800655a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 800655e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006560:	2b01      	cmp	r3, #1
 8006562:	d009      	beq.n	8006578 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	f002 fecb 	bl	8009300 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800656a:	6820      	ldr	r0, [r4, #0]
 800656c:	f003 fa74 	bl	8009a58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006570:	2000      	movs	r0, #0
 8006572:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006576:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006578:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800657a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657e:	6393      	str	r3, [r2, #56]	; 0x38
 8006580:	e7f0      	b.n	8006564 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8006582:	2002      	movs	r0, #2
}
 8006584:	4770      	bx	lr
	...

08006588 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006588:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800658a:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800658c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800658e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	689d      	ldr	r5, [r3, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006598:	4a0b      	ldr	r2, [pc, #44]	; (80065c8 <PCD_EP_OutXfrComplete_int+0x40>)
 800659a:	4294      	cmp	r4, r2
 800659c:	d10f      	bne.n	80065be <PCD_EP_OutXfrComplete_int+0x36>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800659e:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 80065a2:	d003      	beq.n	80065ac <PCD_EP_OutXfrComplete_int+0x24>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	e00b      	b.n	80065c4 <PCD_EP_OutXfrComplete_int+0x3c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065ac:	f015 0f20 	tst.w	r5, #32
 80065b0:	d001      	beq.n	80065b6 <PCD_EP_OutXfrComplete_int+0x2e>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065b2:	2220      	movs	r2, #32
 80065b4:	609a      	str	r2, [r3, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065b6:	b2c9      	uxtb	r1, r1
 80065b8:	f7ff f980 	bl	80058bc <HAL_PCD_DataOutStageCallback>
 80065bc:	e002      	b.n	80065c4 <PCD_EP_OutXfrComplete_int+0x3c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065be:	b2c9      	uxtb	r1, r1
 80065c0:	f7ff f97c 	bl	80058bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
}
 80065c4:	2000      	movs	r0, #0
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	4f54310a 	.word	0x4f54310a

080065cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065cc:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065ce:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065d0:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80065d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80065d6:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065da:	4a07      	ldr	r2, [pc, #28]	; (80065f8 <PCD_EP_OutSetupPacket_int+0x2c>)
 80065dc:	4294      	cmp	r4, r2
 80065de:	d907      	bls.n	80065f0 <PCD_EP_OutSetupPacket_int+0x24>
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80065e8:	d002      	beq.n	80065f0 <PCD_EP_OutSetupPacket_int+0x24>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065ee:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80065f0:	f7ff f95c 	bl	80058ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
}
 80065f4:	2000      	movs	r0, #0
 80065f6:	bd10      	pop	{r4, pc}
 80065f8:	4f54300a 	.word	0x4f54300a

080065fc <HAL_PCD_IRQHandler>:
{
 80065fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006602:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006604:	4628      	mov	r0, r5
 8006606:	f003 fa72 	bl	8009aee <USB_GetMode>
 800660a:	b108      	cbz	r0, 8006610 <HAL_PCD_IRQHandler+0x14>
}
 800660c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006610:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	f003 fa3c 	bl	8009a90 <USB_ReadInterrupts>
 8006618:	2800      	cmp	r0, #0
 800661a:	d0f7      	beq.n	800660c <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	f003 fa37 	bl	8009a90 <USB_ReadInterrupts>
 8006622:	f010 0f02 	tst.w	r0, #2
 8006626:	d004      	beq.n	8006632 <HAL_PCD_IRQHandler+0x36>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006628:	6822      	ldr	r2, [r4, #0]
 800662a:	6953      	ldr	r3, [r2, #20]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006632:	6820      	ldr	r0, [r4, #0]
 8006634:	f003 fa2c 	bl	8009a90 <USB_ReadInterrupts>
 8006638:	f010 0f10 	tst.w	r0, #16
 800663c:	d014      	beq.n	8006668 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800663e:	6822      	ldr	r2, [r4, #0]
 8006640:	6993      	ldr	r3, [r2, #24]
 8006642:	f023 0310 	bic.w	r3, r3, #16
 8006646:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8006648:	6a2f      	ldr	r7, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800664a:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800664e:	f3c7 4343 	ubfx	r3, r7, #17, #4
 8006652:	2b02      	cmp	r3, #2
 8006654:	f000 8085 	beq.w	8006762 <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006658:	2b06      	cmp	r3, #6
 800665a:	f000 80a1 	beq.w	80067a0 <HAL_PCD_IRQHandler+0x1a4>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	6993      	ldr	r3, [r2, #24]
 8006662:	f043 0310 	orr.w	r3, r3, #16
 8006666:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006668:	6820      	ldr	r0, [r4, #0]
 800666a:	f003 fa11 	bl	8009a90 <USB_ReadInterrupts>
 800666e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8006672:	f040 80a7 	bne.w	80067c4 <HAL_PCD_IRQHandler+0x1c8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	f003 fa0a 	bl	8009a90 <USB_ReadInterrupts>
 800667c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8006680:	f040 80e9 	bne.w	8006856 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006684:	6820      	ldr	r0, [r4, #0]
 8006686:	f003 fa03 	bl	8009a90 <USB_ReadInterrupts>
 800668a:	2800      	cmp	r0, #0
 800668c:	f2c0 8139 	blt.w	8006902 <HAL_PCD_IRQHandler+0x306>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	f003 f9fd 	bl	8009a90 <USB_ReadInterrupts>
 8006696:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800669a:	d00a      	beq.n	80066b2 <HAL_PCD_IRQHandler+0xb6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800669c:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 80066a0:	f013 0f01 	tst.w	r3, #1
 80066a4:	f040 8147 	bne.w	8006936 <HAL_PCD_IRQHandler+0x33a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	6953      	ldr	r3, [r2, #20]
 80066ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b0:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80066b2:	6820      	ldr	r0, [r4, #0]
 80066b4:	f003 f9ec 	bl	8009a90 <USB_ReadInterrupts>
 80066b8:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80066bc:	d015      	beq.n	80066ea <HAL_PCD_IRQHandler+0xee>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	6953      	ldr	r3, [r2, #20]
 80066c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80066c8:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 8136 	bne.w	800693e <HAL_PCD_IRQHandler+0x342>
        hpcd->LPM_State = LPM_L1;
 80066d2:	2101      	movs	r1, #1
 80066d4:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066dc:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80066e0:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fb67 	bl	8006db8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	f003 f9d0 	bl	8009a90 <USB_ReadInterrupts>
 80066f0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80066f4:	f040 8127 	bne.w	8006946 <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80066f8:	6820      	ldr	r0, [r4, #0]
 80066fa:	f003 f9c9 	bl	8009a90 <USB_ReadInterrupts>
 80066fe:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8006702:	f040 817b 	bne.w	80069fc <HAL_PCD_IRQHandler+0x400>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006706:	6820      	ldr	r0, [r4, #0]
 8006708:	f003 f9c2 	bl	8009a90 <USB_ReadInterrupts>
 800670c:	f010 0f08 	tst.w	r0, #8
 8006710:	f040 818c 	bne.w	8006a2c <HAL_PCD_IRQHandler+0x430>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	f003 f9bb 	bl	8009a90 <USB_ReadInterrupts>
 800671a:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 800671e:	f040 818e 	bne.w	8006a3e <HAL_PCD_IRQHandler+0x442>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	f003 f9b4 	bl	8009a90 <USB_ReadInterrupts>
 8006728:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800672c:	f040 8191 	bne.w	8006a52 <HAL_PCD_IRQHandler+0x456>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006730:	6820      	ldr	r0, [r4, #0]
 8006732:	f003 f9ad 	bl	8009a90 <USB_ReadInterrupts>
 8006736:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800673a:	f040 8194 	bne.w	8006a66 <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800673e:	6820      	ldr	r0, [r4, #0]
 8006740:	f003 f9a6 	bl	8009a90 <USB_ReadInterrupts>
 8006744:	f010 0f04 	tst.w	r0, #4
 8006748:	f43f af60 	beq.w	800660c <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006750:	f015 0f04 	tst.w	r5, #4
 8006754:	f040 8190 	bne.w	8006a78 <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->GOTGINT |= temp;
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	6853      	ldr	r3, [r2, #4]
 800675c:	432b      	orrs	r3, r5
 800675e:	6053      	str	r3, [r2, #4]
 8006760:	e754      	b.n	800660c <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006762:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006766:	421f      	tst	r7, r3
 8006768:	f43f af79 	beq.w	800665e <HAL_PCD_IRQHandler+0x62>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800676c:	ea4f 1b17 	mov.w	fp, r7, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006770:	ebc8 09c8 	rsb	r9, r8, r8, lsl #3
 8006774:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 8006778:	f3c7 120a 	ubfx	r2, r7, #4, #11
 800677c:	f8d9 1208 	ldr.w	r1, [r9, #520]	; 0x208
 8006780:	4628      	mov	r0, r5
 8006782:	f003 f8ef 	bl	8009964 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006786:	f3cb 020a 	ubfx	r2, fp, #0, #11
 800678a:	f8d9 3208 	ldr.w	r3, [r9, #520]	; 0x208
 800678e:	4413      	add	r3, r2
 8006790:	f8c9 3208 	str.w	r3, [r9, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006794:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
 8006798:	4413      	add	r3, r2
 800679a:	f8c9 3214 	str.w	r3, [r9, #532]	; 0x214
 800679e:	e75e      	b.n	800665e <HAL_PCD_IRQHandler+0x62>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80067a0:	2208      	movs	r2, #8
 80067a2:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80067a6:	4628      	mov	r0, r5
 80067a8:	f003 f8dc 	bl	8009964 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067ac:	f3c7 170a 	ubfx	r7, r7, #4, #11
 80067b0:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 80067b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80067b8:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80067bc:	443b      	add	r3, r7
 80067be:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80067c2:	e74c      	b.n	800665e <HAL_PCD_IRQHandler+0x62>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	f003 f967 	bl	8009a98 <USB_ReadDevAllOutEpInterrupt>
 80067ca:	4607      	mov	r7, r0
      epnum = 0U;
 80067cc:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 80067ce:	e016      	b.n	80067fe <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80067d0:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80067d4:	2201      	movs	r2, #1
 80067d6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80067da:	4641      	mov	r1, r8
 80067dc:	4620      	mov	r0, r4
 80067de:	f7ff fed3 	bl	8006588 <PCD_EP_OutXfrComplete_int>
 80067e2:	e01b      	b.n	800681c <HAL_PCD_IRQHandler+0x220>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80067e4:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80067e8:	2208      	movs	r2, #8
 80067ea:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80067ee:	4641      	mov	r1, r8
 80067f0:	4620      	mov	r0, r4
 80067f2:	f7ff feeb 	bl	80065cc <PCD_EP_OutSetupPacket_int>
 80067f6:	e014      	b.n	8006822 <HAL_PCD_IRQHandler+0x226>
        epnum++;
 80067f8:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80067fc:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 80067fe:	2f00      	cmp	r7, #0
 8006800:	f43f af39 	beq.w	8006676 <HAL_PCD_IRQHandler+0x7a>
        if ((ep_intr & 0x1U) != 0U)
 8006804:	f017 0f01 	tst.w	r7, #1
 8006808:	d0f6      	beq.n	80067f8 <HAL_PCD_IRQHandler+0x1fc>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800680a:	fa5f f188 	uxtb.w	r1, r8
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	f003 f952 	bl	8009ab8 <USB_ReadDevOutEPInterrupt>
 8006814:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006816:	f010 0f01 	tst.w	r0, #1
 800681a:	d1d9      	bne.n	80067d0 <HAL_PCD_IRQHandler+0x1d4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800681c:	f019 0f08 	tst.w	r9, #8
 8006820:	d1e0      	bne.n	80067e4 <HAL_PCD_IRQHandler+0x1e8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006822:	f019 0f10 	tst.w	r9, #16
 8006826:	d004      	beq.n	8006832 <HAL_PCD_IRQHandler+0x236>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006828:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 800682c:	2210      	movs	r2, #16
 800682e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006832:	f019 0f20 	tst.w	r9, #32
 8006836:	d004      	beq.n	8006842 <HAL_PCD_IRQHandler+0x246>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006838:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006842:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8006846:	d0d7      	beq.n	80067f8 <HAL_PCD_IRQHandler+0x1fc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006848:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 800684c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006850:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8006854:	e7d0      	b.n	80067f8 <HAL_PCD_IRQHandler+0x1fc>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006856:	6820      	ldr	r0, [r4, #0]
 8006858:	f003 f926 	bl	8009aa8 <USB_ReadDevAllInEpInterrupt>
 800685c:	4607      	mov	r7, r0
      epnum = 0U;
 800685e:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 8006860:	e019      	b.n	8006896 <HAL_PCD_IRQHandler+0x29a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006862:	f008 020f 	and.w	r2, r8, #15
 8006866:	2101      	movs	r1, #1
 8006868:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800686c:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
 8006870:	ea23 0302 	bic.w	r3, r3, r2
 8006874:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006878:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 800687c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006880:	4651      	mov	r1, sl
 8006882:	4620      	mov	r0, r4
 8006884:	f7ff f826 	bl	80058d4 <HAL_PCD_DataInStageCallback>
 8006888:	e015      	b.n	80068b6 <HAL_PCD_IRQHandler+0x2ba>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800688a:	f019 0f80 	tst.w	r9, #128	; 0x80
 800688e:	d133      	bne.n	80068f8 <HAL_PCD_IRQHandler+0x2fc>
        epnum++;
 8006890:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8006894:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 8006896:	2f00      	cmp	r7, #0
 8006898:	f43f aef4 	beq.w	8006684 <HAL_PCD_IRQHandler+0x88>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800689c:	f017 0f01 	tst.w	r7, #1
 80068a0:	d0f6      	beq.n	8006890 <HAL_PCD_IRQHandler+0x294>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068a2:	fa5f fa88 	uxtb.w	sl, r8
 80068a6:	4651      	mov	r1, sl
 80068a8:	6820      	ldr	r0, [r4, #0]
 80068aa:	f003 f90e 	bl	8009aca <USB_ReadDevInEPInterrupt>
 80068ae:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80068b0:	f010 0f01 	tst.w	r0, #1
 80068b4:	d1d5      	bne.n	8006862 <HAL_PCD_IRQHandler+0x266>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80068b6:	f019 0f08 	tst.w	r9, #8
 80068ba:	d004      	beq.n	80068c6 <HAL_PCD_IRQHandler+0x2ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80068bc:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80068c0:	2208      	movs	r2, #8
 80068c2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80068c6:	f019 0f10 	tst.w	r9, #16
 80068ca:	d004      	beq.n	80068d6 <HAL_PCD_IRQHandler+0x2da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80068cc:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80068d0:	2210      	movs	r2, #16
 80068d2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80068d6:	f019 0f40 	tst.w	r9, #64	; 0x40
 80068da:	d004      	beq.n	80068e6 <HAL_PCD_IRQHandler+0x2ea>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80068dc:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80068e0:	2240      	movs	r2, #64	; 0x40
 80068e2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80068e6:	f019 0f02 	tst.w	r9, #2
 80068ea:	d0ce      	beq.n	800688a <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80068ec:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80068f0:	2202      	movs	r2, #2
 80068f2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80068f6:	e7c8      	b.n	800688a <HAL_PCD_IRQHandler+0x28e>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80068f8:	4641      	mov	r1, r8
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff fd22 	bl	8006344 <PCD_WriteEmptyTxFifo>
 8006900:	e7c6      	b.n	8006890 <HAL_PCD_IRQHandler+0x294>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006902:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800690e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8006912:	2b01      	cmp	r3, #1
 8006914:	d008      	beq.n	8006928 <HAL_PCD_IRQHandler+0x32c>
        HAL_PCD_ResumeCallback(hpcd);
 8006916:	4620      	mov	r0, r4
 8006918:	f7fe ffff 	bl	800591a <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800691c:	6822      	ldr	r2, [r4, #0]
 800691e:	6953      	ldr	r3, [r2, #20]
 8006920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006924:	6153      	str	r3, [r2, #20]
 8006926:	e6b3      	b.n	8006690 <HAL_PCD_IRQHandler+0x94>
        hpcd->LPM_State = LPM_L0;
 8006928:	2100      	movs	r1, #0
 800692a:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800692e:	4620      	mov	r0, r4
 8006930:	f000 fa42 	bl	8006db8 <HAL_PCDEx_LPM_Callback>
 8006934:	e7f2      	b.n	800691c <HAL_PCD_IRQHandler+0x320>
        HAL_PCD_SuspendCallback(hpcd);
 8006936:	4620      	mov	r0, r4
 8006938:	f7fe ffe9 	bl	800590e <HAL_PCD_SuspendCallback>
 800693c:	e6b4      	b.n	80066a8 <HAL_PCD_IRQHandler+0xac>
        HAL_PCD_SuspendCallback(hpcd);
 800693e:	4620      	mov	r0, r4
 8006940:	f7fe ffe5 	bl	800590e <HAL_PCD_SuspendCallback>
 8006944:	e6d1      	b.n	80066ea <HAL_PCD_IRQHandler+0xee>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006946:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006952:	2110      	movs	r1, #16
 8006954:	6820      	ldr	r0, [r4, #0]
 8006956:	f002 fcf7 	bl	8009348 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800695a:	e020      	b.n	800699e <HAL_PCD_IRQHandler+0x3a2>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800695c:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8006960:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8006964:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006968:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800696c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006970:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006974:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8006978:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800697c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006980:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006984:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006988:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800698c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006990:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006994:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006998:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800699c:	3601      	adds	r6, #1
 800699e:	6863      	ldr	r3, [r4, #4]
 80069a0:	42b3      	cmp	r3, r6
 80069a2:	d8db      	bhi.n	800695c <HAL_PCD_IRQHandler+0x360>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80069aa:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80069ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069ae:	b1d3      	cbz	r3, 80069e6 <HAL_PCD_IRQHandler+0x3ea>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80069b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069b4:	f043 030b 	orr.w	r3, r3, #11
 80069b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80069bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069be:	f043 030b 	orr.w	r3, r3, #11
 80069c2:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80069c4:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80069c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069cc:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80069d0:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	f003 f89f 	bl	8009b18 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	6953      	ldr	r3, [r2, #20]
 80069de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069e2:	6153      	str	r3, [r2, #20]
 80069e4:	e688      	b.n	80066f8 <HAL_PCD_IRQHandler+0xfc>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80069ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80069f0:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f043 030b 	orr.w	r3, r3, #11
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	e7e3      	b.n	80069c4 <HAL_PCD_IRQHandler+0x3c8>
      (void)USB_ActivateSetup(hpcd->Instance);
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	f003 f87a 	bl	8009af6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006a02:	6820      	ldr	r0, [r4, #0]
 8006a04:	f002 fd80 	bl	8009508 <USB_GetDevSpeed>
 8006a08:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	f000 fe5c 	bl	80076c8 <HAL_RCC_GetHCLKFreq>
 8006a10:	4601      	mov	r1, r0
 8006a12:	7b22      	ldrb	r2, [r4, #12]
 8006a14:	4628      	mov	r0, r5
 8006a16:	f002 fc01 	bl	800921c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f7fe ff6b 	bl	80058f6 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	6953      	ldr	r3, [r2, #20]
 8006a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a28:	6153      	str	r3, [r2, #20]
 8006a2a:	e66c      	b.n	8006706 <HAL_PCD_IRQHandler+0x10a>
      HAL_PCD_SOFCallback(hpcd);
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f7fe ff5c 	bl	80058ea <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	6953      	ldr	r3, [r2, #20]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	6153      	str	r3, [r2, #20]
 8006a3c:	e66a      	b.n	8006714 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7fe ff76 	bl	8005932 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	6953      	ldr	r3, [r2, #20]
 8006a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a4e:	6153      	str	r3, [r2, #20]
 8006a50:	e667      	b.n	8006722 <HAL_PCD_IRQHandler+0x126>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a52:	2100      	movs	r1, #0
 8006a54:	4620      	mov	r0, r4
 8006a56:	f7fe ff66 	bl	8005926 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	6953      	ldr	r3, [r2, #20]
 8006a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a62:	6153      	str	r3, [r2, #20]
 8006a64:	e664      	b.n	8006730 <HAL_PCD_IRQHandler+0x134>
      HAL_PCD_ConnectCallback(hpcd);
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7fe ff69 	bl	800593e <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	6953      	ldr	r3, [r2, #20]
 8006a70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a74:	6153      	str	r3, [r2, #20]
 8006a76:	e662      	b.n	800673e <HAL_PCD_IRQHandler+0x142>
        HAL_PCD_DisconnectCallback(hpcd);
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7fe ff66 	bl	800594a <HAL_PCD_DisconnectCallback>
 8006a7e:	e66b      	b.n	8006758 <HAL_PCD_IRQHandler+0x15c>

08006a80 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8006a80:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d00d      	beq.n	8006aa4 <HAL_PCD_SetAddress+0x24>
{
 8006a88:	b510      	push	{r4, lr}
 8006a8a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006a92:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	f002 ffce 	bl	8009a38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006aa2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006aa4:	2002      	movs	r0, #2
}
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_PCD_EP_Open>:
{
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4605      	mov	r5, r0
 8006aac:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8006aae:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006ab2:	d129      	bne.n	8006b08 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ab4:	f001 0e0f 	and.w	lr, r1, #15
 8006ab8:	ebce 04ce 	rsb	r4, lr, lr, lsl #3
 8006abc:	00a4      	lsls	r4, r4, #2
 8006abe:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8006ac2:	4404      	add	r4, r0
 8006ac4:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8006ac6:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 8006aca:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f88e 01fd 	strb.w	r0, [lr, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ad4:	f00c 0c0f 	and.w	ip, ip, #15
 8006ad8:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8006adc:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8006ade:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8006ae0:	784a      	ldrb	r2, [r1, #1]
 8006ae2:	b10a      	cbz	r2, 8006ae8 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 8006ae4:	f8a1 c006 	strh.w	ip, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d01d      	beq.n	8006b28 <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 8006aec:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d01c      	beq.n	8006b2e <HAL_PCD_EP_Open+0x86>
 8006af4:	2301      	movs	r3, #1
 8006af6:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006afa:	6828      	ldr	r0, [r5, #0]
 8006afc:	f002 fd12 	bl	8009524 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b00:	2000      	movs	r0, #0
 8006b02:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8006b06:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b08:	f001 000f 	and.w	r0, r1, #15
 8006b0c:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8006b10:	0089      	lsls	r1, r1, #2
 8006b12:	3138      	adds	r1, #56	; 0x38
 8006b14:	4429      	add	r1, r5
 8006b16:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8006b18:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8006b1c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8006b20:	2401      	movs	r4, #1
 8006b22:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8006b26:	e7d5      	b.n	8006ad4 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	710b      	strb	r3, [r1, #4]
 8006b2c:	e7de      	b.n	8006aec <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 8006b2e:	2002      	movs	r0, #2
 8006b30:	e7e9      	b.n	8006b06 <HAL_PCD_EP_Open+0x5e>

08006b32 <HAL_PCD_EP_Close>:
{
 8006b32:	b510      	push	{r4, lr}
 8006b34:	4604      	mov	r4, r0
 8006b36:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8006b38:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006b3c:	d120      	bne.n	8006b80 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b3e:	f001 000f 	and.w	r0, r1, #15
 8006b42:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b4c:	4423      	add	r3, r4
 8006b4e:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8006b50:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8006b54:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b5e:	f002 020f 	and.w	r2, r2, #15
 8006b62:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006b64:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d019      	beq.n	8006ba0 <HAL_PCD_EP_Close+0x6e>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b72:	6820      	ldr	r0, [r4, #0]
 8006b74:	f002 fd24 	bl	80095c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b78:	2000      	movs	r0, #0
 8006b7a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006b7e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b80:	f001 000f 	and.w	r0, r1, #15
 8006b84:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	3338      	adds	r3, #56	; 0x38
 8006b8c:	4423      	add	r3, r4
 8006b8e:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8006b90:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8006b94:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8006b9e:	e7de      	b.n	8006b5e <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8006ba0:	2002      	movs	r0, #2
 8006ba2:	e7ec      	b.n	8006b7e <HAL_PCD_EP_Close+0x4c>

08006ba4 <HAL_PCD_EP_Receive>:
{
 8006ba4:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ba6:	f001 040f 	and.w	r4, r1, #15
 8006baa:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8006bae:	0089      	lsls	r1, r1, #2
 8006bb0:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8006bb4:	4401      	add	r1, r0
 8006bb6:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8006bb8:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8006bbc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006bc0:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->xfer_len = len;
 8006bc4:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8006bce:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bd2:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bd6:	b924      	cbnz	r4, 8006be2 <HAL_PCD_EP_Receive+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006bd8:	6800      	ldr	r0, [r0, #0]
 8006bda:	f002 fd61 	bl	80096a0 <USB_EP0StartXfer>
}
 8006bde:	2000      	movs	r0, #0
 8006be0:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006be2:	6800      	ldr	r0, [r0, #0]
 8006be4:	f002 fde8 	bl	80097b8 <USB_EPStartXfer>
 8006be8:	e7f9      	b.n	8006bde <HAL_PCD_EP_Receive+0x3a>

08006bea <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006bea:	f001 010f 	and.w	r1, r1, #15
 8006bee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006bf2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
}
 8006bf6:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8006bfa:	4770      	bx	lr

08006bfc <HAL_PCD_EP_Transmit>:
{
 8006bfc:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bfe:	f001 040f 	and.w	r4, r1, #15
 8006c02:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8006c06:	0089      	lsls	r1, r1, #2
 8006c08:	3138      	adds	r1, #56	; 0x38
 8006c0a:	4401      	add	r1, r0
 8006c0c:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8006c0e:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8006c12:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006c16:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_len = len;
 8006c1a:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c2a:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c2e:	b924      	cbnz	r4, 8006c3a <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006c30:	6800      	ldr	r0, [r0, #0]
 8006c32:	f002 fd35 	bl	80096a0 <USB_EP0StartXfer>
}
 8006c36:	2000      	movs	r0, #0
 8006c38:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c3a:	6800      	ldr	r0, [r0, #0]
 8006c3c:	f002 fdbc 	bl	80097b8 <USB_EPStartXfer>
 8006c40:	e7f9      	b.n	8006c36 <HAL_PCD_EP_Transmit+0x3a>

08006c42 <HAL_PCD_EP_SetStall>:
{
 8006c42:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c44:	f001 050f 	and.w	r5, r1, #15
 8006c48:	6842      	ldr	r2, [r0, #4]
 8006c4a:	4295      	cmp	r5, r2
 8006c4c:	d838      	bhi.n	8006cc0 <HAL_PCD_EP_SetStall+0x7e>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8006c52:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006c56:	d11f      	bne.n	8006c98 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8006c58:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006c5c:	0089      	lsls	r1, r1, #2
 8006c5e:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8006c62:	4401      	add	r1, r0
 8006c64:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8006c66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006c6a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8006c74:	2301      	movs	r3, #1
 8006c76:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c78:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8006c7a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d020      	beq.n	8006cc4 <HAL_PCD_EP_SetStall+0x82>
 8006c82:	2301      	movs	r3, #1
 8006c84:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	f002 fe7a 	bl	8009982 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c8e:	b18d      	cbz	r5, 8006cb4 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8006c90:	2000      	movs	r0, #0
 8006c92:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c98:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8006c9c:	0089      	lsls	r1, r1, #2
 8006c9e:	3138      	adds	r1, #56	; 0x38
 8006ca0:	4401      	add	r1, r0
 8006ca2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8006ca4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8006ca8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cb2:	e7df      	b.n	8006c74 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006cb4:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8006cb8:	6820      	ldr	r0, [r4, #0]
 8006cba:	f002 ff2d 	bl	8009b18 <USB_EP0_OutStart>
 8006cbe:	e7e7      	b.n	8006c90 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e7e8      	b.n	8006c96 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8006cc4:	2002      	movs	r0, #2
 8006cc6:	e7e6      	b.n	8006c96 <HAL_PCD_EP_SetStall+0x54>

08006cc8 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006cc8:	f001 030f 	and.w	r3, r1, #15
 8006ccc:	6842      	ldr	r2, [r0, #4]
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d831      	bhi.n	8006d36 <HAL_PCD_EP_ClrStall+0x6e>
{
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8006cd6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006cda:	d11e      	bne.n	8006d1a <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cdc:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8006ce0:	0089      	lsls	r1, r1, #2
 8006ce2:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8006ce6:	4401      	add	r1, r0
 8006ce8:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8006cea:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8006cee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cfc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8006cfe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d019      	beq.n	8006d3a <HAL_PCD_EP_ClrStall+0x72>
 8006d06:	2301      	movs	r3, #1
 8006d08:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	f002 fe65 	bl	80099dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d12:	2000      	movs	r0, #0
 8006d14:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8006d18:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d1a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8006d1e:	0089      	lsls	r1, r1, #2
 8006d20:	3138      	adds	r1, #56	; 0x38
 8006d22:	4401      	add	r1, r0
 8006d24:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8006d26:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8006d2a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006d2e:	2001      	movs	r0, #1
 8006d30:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8006d34:	e7e0      	b.n	8006cf8 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8006d36:	2001      	movs	r0, #1
}
 8006d38:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8006d3a:	2002      	movs	r0, #2
 8006d3c:	e7ec      	b.n	8006d18 <HAL_PCD_EP_ClrStall+0x50>

08006d3e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d3e:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d40:	6804      	ldr	r4, [r0, #0]
 8006d42:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8006d44:	b931      	cbnz	r1, 8006d54 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d46:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8006d4a:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d58:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e008      	b.n	8006d72 <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d60:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006d64:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006d68:	6849      	ldr	r1, [r1, #4]
 8006d6a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8006d6e:	3301      	adds	r3, #1
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8006d76:	428b      	cmp	r3, r1
 8006d78:	d3f2      	bcc.n	8006d60 <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d7a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8006d7e:	f10c 013f 	add.w	r1, ip, #63	; 0x3f
 8006d82:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8006d86:	6060      	str	r0, [r4, #4]
 8006d88:	e7e0      	b.n	8006d4c <HAL_PCDEx_SetTxFiFo+0xe>

08006d8a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8006d8a:	6803      	ldr	r3, [r0, #0]
 8006d8c:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8006d8e:	2000      	movs	r0, #0
 8006d90:	4770      	bx	lr

08006d92 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d92:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d94:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8006d96:	2101      	movs	r1, #1
 8006d98:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006da2:	6993      	ldr	r3, [r2, #24]
 8006da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006da8:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006daa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db0:	f043 0303 	orr.w	r3, r3, #3
 8006db4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8006db6:	4770      	bx	lr

08006db8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006db8:	4770      	bx	lr
	...

08006dbc <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dbc:	4a02      	ldr	r2, [pc, #8]	; (8006dc8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8006dbe:	6813      	ldr	r3, [r2, #0]
 8006dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc4:	6013      	str	r3, [r2, #0]
}
 8006dc6:	4770      	bx	lr
 8006dc8:	40007000 	.word	0x40007000

08006dcc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <HAL_PWREx_GetVoltageRange+0xc>)
 8006dce:	6818      	ldr	r0, [r3, #0]
#endif
}
 8006dd0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40007000 	.word	0x40007000

08006ddc <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006ddc:	4a02      	ldr	r2, [pc, #8]	; (8006de8 <HAL_PWREx_EnableVddUSB+0xc>)
 8006dde:	6853      	ldr	r3, [r2, #4]
 8006de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006de4:	6053      	str	r3, [r2, #4]
}
 8006de6:	4770      	bx	lr
 8006de8:	40007000 	.word	0x40007000

08006dec <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8006dec:	4a02      	ldr	r2, [pc, #8]	; (8006df8 <HAL_PWREx_EnableVddIO2+0xc>)
 8006dee:	6853      	ldr	r3, [r2, #4]
 8006df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006df4:	6053      	str	r3, [r2, #4]
}
 8006df6:	4770      	bx	lr
 8006df8:	40007000 	.word	0x40007000

08006dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006dfc:	b530      	push	{r4, r5, lr}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e02:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8006e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e06:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006e0a:	d00b      	beq.n	8006e24 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e0c:	f7ff ffde 	bl	8006dcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006e14:	d017      	beq.n	8006e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006e16:	2c80      	cmp	r4, #128	; 0x80
 8006e18:	d81f      	bhi.n	8006e5a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006e1a:	d02d      	beq.n	8006e78 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e1c:	2c70      	cmp	r4, #112	; 0x70
 8006e1e:	d02d      	beq.n	8006e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e20:	2100      	movs	r1, #0
 8006e22:	e01b      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e24:	4d17      	ldr	r5, [pc, #92]	; (8006e84 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8006e26:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e2c:	65ab      	str	r3, [r5, #88]	; 0x58
 8006e2e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8006e38:	f7ff ffc8 	bl	8006dcc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e3c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8006e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e42:	65ab      	str	r3, [r5, #88]	; 0x58
 8006e44:	e7e4      	b.n	8006e10 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8006e46:	2c80      	cmp	r4, #128	; 0x80
 8006e48:	d903      	bls.n	8006e52 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8006e4a:	2ca0      	cmp	r4, #160	; 0xa0
 8006e4c:	d903      	bls.n	8006e56 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e4e:	2102      	movs	r1, #2
 8006e50:	e004      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e52:	2100      	movs	r1, #0
 8006e54:	e002      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e56:	2101      	movs	r1, #1
 8006e58:	e000      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8006e5a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e5c:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8006e5e:	6813      	ldr	r3, [r2, #0]
 8006e60:	f023 0307 	bic.w	r3, r3, #7
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e68:	6813      	ldr	r3, [r2, #0]
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	428b      	cmp	r3, r1
 8006e70:	d106      	bne.n	8006e80 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e72:	2000      	movs	r0, #0
}
 8006e74:	b003      	add	sp, #12
 8006e76:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8006e78:	2102      	movs	r1, #2
 8006e7a:	e7ef      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	e7ed      	b.n	8006e5c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8006e80:	2001      	movs	r0, #1
 8006e82:	e7f7      	b.n	8006e74 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8006e84:	40021000 	.word	0x40021000
 8006e88:	40022000 	.word	0x40022000

08006e8c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e8c:	4a28      	ldr	r2, [pc, #160]	; (8006f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e8e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e90:	68d2      	ldr	r2, [r2, #12]
 8006e92:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e96:	f013 030c 	ands.w	r3, r3, #12
 8006e9a:	d00a      	beq.n	8006eb2 <HAL_RCC_GetSysClockFreq+0x26>
 8006e9c:	2b0c      	cmp	r3, #12
 8006e9e:	d006      	beq.n	8006eae <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d01f      	beq.n	8006ee4 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d020      	beq.n	8006eea <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	4602      	mov	r2, r0
 8006eac:	e010      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006eae:	2a01      	cmp	r2, #1
 8006eb0:	d1f6      	bne.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006eb2:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	f012 0f08 	tst.w	r2, #8
 8006eba:	d10c      	bne.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ebc:	4a1c      	ldr	r2, [pc, #112]	; (8006f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ebe:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8006ec2:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8006ec6:	491b      	ldr	r1, [pc, #108]	; (8006f34 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006ec8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ecc:	b143      	cbz	r3, 8006ee0 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ece:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ed0:	2b0c      	cmp	r3, #12
 8006ed2:	d00d      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x64>
}
 8006ed4:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ed6:	4a16      	ldr	r2, [pc, #88]	; (8006f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ed8:	6812      	ldr	r2, [r2, #0]
 8006eda:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006ede:	e7f2      	b.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	e7f5      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8006ee4:	4814      	ldr	r0, [pc, #80]	; (8006f38 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	e7f2      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8006eea:	4814      	ldr	r0, [pc, #80]	; (8006f3c <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006eec:	2200      	movs	r2, #0
 8006eee:	e7ef      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d016      	beq.n	8006f2a <HAL_RCC_GetSysClockFreq+0x9e>
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d100      	bne.n	8006f02 <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 8006f00:	4a0e      	ldr	r2, [pc, #56]	; (8006f3c <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f02:	490b      	ldr	r1, [pc, #44]	; (8006f30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006f04:	68cb      	ldr	r3, [r1, #12]
 8006f06:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006f0a:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f0c:	68c8      	ldr	r0, [r1, #12]
 8006f0e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8006f12:	fb02 f000 	mul.w	r0, r2, r0
 8006f16:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f1a:	68cb      	ldr	r3, [r1, #12]
 8006f1c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8006f20:	3301      	adds	r3, #1
 8006f22:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8006f24:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006f28:	e7d4      	b.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8006f2a:	4a03      	ldr	r2, [pc, #12]	; (8006f38 <HAL_RCC_GetSysClockFreq+0xac>)
 8006f2c:	e7e9      	b.n	8006f02 <HAL_RCC_GetSysClockFreq+0x76>
 8006f2e:	bf00      	nop
 8006f30:	40021000 	.word	0x40021000
 8006f34:	0800bdd0 	.word	0x0800bdd0
 8006f38:	00f42400 	.word	0x00f42400
 8006f3c:	007a1200 	.word	0x007a1200

08006f40 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f000 82fc 	beq.w	800753e <HAL_RCC_OscConfig+0x5fe>
{
 8006f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f4c:	4b96      	ldr	r3, [pc, #600]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8006f4e:	689d      	ldr	r5, [r3, #8]
 8006f50:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f54:	68de      	ldr	r6, [r3, #12]
 8006f56:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f5a:	6803      	ldr	r3, [r0, #0]
 8006f5c:	f013 0f10 	tst.w	r3, #16
 8006f60:	d05a      	beq.n	8007018 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006f62:	b1e5      	cbz	r5, 8006f9e <HAL_RCC_OscConfig+0x5e>
 8006f64:	2d0c      	cmp	r5, #12
 8006f66:	d018      	beq.n	8006f9a <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f68:	69a3      	ldr	r3, [r4, #24]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80bb 	beq.w	80070e6 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8006f70:	4a8d      	ldr	r2, [pc, #564]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8006f72:	6813      	ldr	r3, [r2, #0]
 8006f74:	f043 0301 	orr.w	r3, r3, #1
 8006f78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006f7a:	f7fe ffc9 	bl	8005f10 <HAL_GetTick>
 8006f7e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f80:	4b89      	ldr	r3, [pc, #548]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f013 0f02 	tst.w	r3, #2
 8006f88:	f040 809a 	bne.w	80070c0 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f8c:	f7fe ffc0 	bl	8005f10 <HAL_GetTick>
 8006f90:	1bc0      	subs	r0, r0, r7
 8006f92:	2802      	cmp	r0, #2
 8006f94:	d9f4      	bls.n	8006f80 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8006f96:	2003      	movs	r0, #3
 8006f98:	e2dc      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f9a:	2e01      	cmp	r6, #1
 8006f9c:	d1e4      	bne.n	8006f68 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f9e:	4b82      	ldr	r3, [pc, #520]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f013 0f02 	tst.w	r3, #2
 8006fa6:	d003      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x70>
 8006fa8:	69a3      	ldr	r3, [r4, #24]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 82c9 	beq.w	8007542 <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fb0:	6a20      	ldr	r0, [r4, #32]
 8006fb2:	4b7d      	ldr	r3, [pc, #500]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f013 0f08 	tst.w	r3, #8
 8006fba:	d05b      	beq.n	8007074 <HAL_RCC_OscConfig+0x134>
 8006fbc:	4b7a      	ldr	r3, [pc, #488]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fc4:	4298      	cmp	r0, r3
 8006fc6:	d85c      	bhi.n	8007082 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fc8:	4b77      	ldr	r3, [pc, #476]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f042 0208 	orr.w	r2, r2, #8
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006fd8:	6a21      	ldr	r1, [r4, #32]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8006fe4:	69e1      	ldr	r1, [r4, #28]
 8006fe6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006fea:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	d060      	beq.n	80070b2 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ff0:	f7ff ff4c 	bl	8006e8c <HAL_RCC_GetSysClockFreq>
 8006ff4:	4b6c      	ldr	r3, [pc, #432]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006ffc:	4a6b      	ldr	r2, [pc, #428]	; (80071ac <HAL_RCC_OscConfig+0x26c>)
 8006ffe:	5cd3      	ldrb	r3, [r2, r3]
 8007000:	f003 031f 	and.w	r3, r3, #31
 8007004:	40d8      	lsrs	r0, r3
 8007006:	4b6a      	ldr	r3, [pc, #424]	; (80071b0 <HAL_RCC_OscConfig+0x270>)
 8007008:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800700a:	4b6a      	ldr	r3, [pc, #424]	; (80071b4 <HAL_RCC_OscConfig+0x274>)
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	f7fe ff3d 	bl	8005e8c <HAL_InitTick>
        if(status != HAL_OK)
 8007012:	2800      	cmp	r0, #0
 8007014:	f040 829e 	bne.w	8007554 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	f013 0f01 	tst.w	r3, #1
 800701e:	f000 8081 	beq.w	8007124 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007022:	2d08      	cmp	r5, #8
 8007024:	d075      	beq.n	8007112 <HAL_RCC_OscConfig+0x1d2>
 8007026:	2d0c      	cmp	r5, #12
 8007028:	d071      	beq.n	800710e <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800702a:	6863      	ldr	r3, [r4, #4]
 800702c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007030:	f000 8097 	beq.w	8007162 <HAL_RCC_OscConfig+0x222>
 8007034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007038:	f000 8099 	beq.w	800716e <HAL_RCC_OscConfig+0x22e>
 800703c:	4b5a      	ldr	r3, [pc, #360]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800704c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 8099 	beq.w	8007188 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8007056:	f7fe ff5b 	bl	8005f10 <HAL_GetTick>
 800705a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800705c:	4b52      	ldr	r3, [pc, #328]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007064:	d15e      	bne.n	8007124 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007066:	f7fe ff53 	bl	8005f10 <HAL_GetTick>
 800706a:	1bc0      	subs	r0, r0, r7
 800706c:	2864      	cmp	r0, #100	; 0x64
 800706e:	d9f5      	bls.n	800705c <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8007070:	2003      	movs	r0, #3
 8007072:	e26f      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007074:	4b4c      	ldr	r3, [pc, #304]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8007076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800707a:	091b      	lsrs	r3, r3, #4
 800707c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007080:	e7a0      	b.n	8006fc4 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007082:	f7ff febb 	bl	8006dfc <RCC_SetFlashLatencyFromMSIRange>
 8007086:	2800      	cmp	r0, #0
 8007088:	f040 825d 	bne.w	8007546 <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800708c:	4b46      	ldr	r3, [pc, #280]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	f042 0208 	orr.w	r2, r2, #8
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800709c:	6a21      	ldr	r1, [r4, #32]
 800709e:	430a      	orrs	r2, r1
 80070a0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80070a8:	69e1      	ldr	r1, [r4, #28]
 80070aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80070ae:	605a      	str	r2, [r3, #4]
 80070b0:	e79e      	b.n	8006ff0 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80070b2:	6a20      	ldr	r0, [r4, #32]
 80070b4:	f7ff fea2 	bl	8006dfc <RCC_SetFlashLatencyFromMSIRange>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d099      	beq.n	8006ff0 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 80070bc:	2001      	movs	r0, #1
 80070be:	e249      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070c0:	4b39      	ldr	r3, [pc, #228]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	f042 0208 	orr.w	r2, r2, #8
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80070d0:	6a21      	ldr	r1, [r4, #32]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80070dc:	69e1      	ldr	r1, [r4, #28]
 80070de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80070e2:	605a      	str	r2, [r3, #4]
 80070e4:	e798      	b.n	8007018 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80070e6:	4a30      	ldr	r2, [pc, #192]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 80070e8:	6813      	ldr	r3, [r2, #0]
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80070f0:	f7fe ff0e 	bl	8005f10 <HAL_GetTick>
 80070f4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80070f6:	4b2c      	ldr	r3, [pc, #176]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f013 0f02 	tst.w	r3, #2
 80070fe:	d08b      	beq.n	8007018 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007100:	f7fe ff06 	bl	8005f10 <HAL_GetTick>
 8007104:	1bc0      	subs	r0, r0, r7
 8007106:	2802      	cmp	r0, #2
 8007108:	d9f5      	bls.n	80070f6 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800710a:	2003      	movs	r0, #3
 800710c:	e222      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800710e:	2e03      	cmp	r6, #3
 8007110:	d18b      	bne.n	800702a <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007112:	4b25      	ldr	r3, [pc, #148]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800711a:	d003      	beq.n	8007124 <HAL_RCC_OscConfig+0x1e4>
 800711c:	6863      	ldr	r3, [r4, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 8213 	beq.w	800754a <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	f013 0f02 	tst.w	r3, #2
 800712a:	d058      	beq.n	80071de <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800712c:	2d04      	cmp	r5, #4
 800712e:	d045      	beq.n	80071bc <HAL_RCC_OscConfig+0x27c>
 8007130:	2d0c      	cmp	r5, #12
 8007132:	d041      	beq.n	80071b8 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007134:	68e3      	ldr	r3, [r4, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d077      	beq.n	800722a <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800713a:	4a1b      	ldr	r2, [pc, #108]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 800713c:	6813      	ldr	r3, [r2, #0]
 800713e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007142:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007144:	f7fe fee4 	bl	8005f10 <HAL_GetTick>
 8007148:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800714a:	4b17      	ldr	r3, [pc, #92]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007152:	d161      	bne.n	8007218 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007154:	f7fe fedc 	bl	8005f10 <HAL_GetTick>
 8007158:	1b80      	subs	r0, r0, r6
 800715a:	2802      	cmp	r0, #2
 800715c:	d9f5      	bls.n	800714a <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800715e:	2003      	movs	r0, #3
 8007160:	e1f8      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007162:	4a11      	ldr	r2, [pc, #68]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8007164:	6813      	ldr	r3, [r2, #0]
 8007166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	e76f      	b.n	800704e <HAL_RCC_OscConfig+0x10e>
 800716e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007172:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e762      	b.n	800704e <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8007188:	f7fe fec2 	bl	8005f10 <HAL_GetTick>
 800718c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <HAL_RCC_OscConfig+0x268>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007196:	d0c5      	beq.n	8007124 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007198:	f7fe feba 	bl	8005f10 <HAL_GetTick>
 800719c:	1bc0      	subs	r0, r0, r7
 800719e:	2864      	cmp	r0, #100	; 0x64
 80071a0:	d9f5      	bls.n	800718e <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 80071a2:	2003      	movs	r0, #3
 80071a4:	e1d6      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
 80071a6:	bf00      	nop
 80071a8:	40021000 	.word	0x40021000
 80071ac:	0800be00 	.word	0x0800be00
 80071b0:	2000007c 	.word	0x2000007c
 80071b4:	20000084 	.word	0x20000084
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071b8:	2e02      	cmp	r6, #2
 80071ba:	d1bb      	bne.n	8007134 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071bc:	4b95      	ldr	r3, [pc, #596]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80071c4:	d003      	beq.n	80071ce <HAL_RCC_OscConfig+0x28e>
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 81c0 	beq.w	800754e <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ce:	4a91      	ldr	r2, [pc, #580]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80071d0:	6853      	ldr	r3, [r2, #4]
 80071d2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80071d6:	6921      	ldr	r1, [r4, #16]
 80071d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80071dc:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	f013 0f08 	tst.w	r3, #8
 80071e4:	d04c      	beq.n	8007280 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071e6:	6963      	ldr	r3, [r4, #20]
 80071e8:	b39b      	cbz	r3, 8007252 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80071ea:	4a8a      	ldr	r2, [pc, #552]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80071ec:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80071f8:	f7fe fe8a 	bl	8005f10 <HAL_GetTick>
 80071fc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071fe:	4b85      	ldr	r3, [pc, #532]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 8007200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007204:	f013 0f02 	tst.w	r3, #2
 8007208:	d13a      	bne.n	8007280 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800720a:	f7fe fe81 	bl	8005f10 <HAL_GetTick>
 800720e:	1b80      	subs	r0, r0, r6
 8007210:	2802      	cmp	r0, #2
 8007212:	d9f4      	bls.n	80071fe <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8007214:	2003      	movs	r0, #3
 8007216:	e19d      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007218:	4a7e      	ldr	r2, [pc, #504]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 800721a:	6853      	ldr	r3, [r2, #4]
 800721c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8007220:	6921      	ldr	r1, [r4, #16]
 8007222:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007226:	6053      	str	r3, [r2, #4]
 8007228:	e7d9      	b.n	80071de <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800722a:	4a7a      	ldr	r2, [pc, #488]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 800722c:	6813      	ldr	r3, [r2, #0]
 800722e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007232:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007234:	f7fe fe6c 	bl	8005f10 <HAL_GetTick>
 8007238:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800723a:	4b76      	ldr	r3, [pc, #472]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007242:	d0cc      	beq.n	80071de <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007244:	f7fe fe64 	bl	8005f10 <HAL_GetTick>
 8007248:	1b80      	subs	r0, r0, r6
 800724a:	2802      	cmp	r0, #2
 800724c:	d9f5      	bls.n	800723a <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800724e:	2003      	movs	r0, #3
 8007250:	e180      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 8007252:	4a70      	ldr	r2, [pc, #448]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 8007254:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8007258:	f023 0301 	bic.w	r3, r3, #1
 800725c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8007260:	f7fe fe56 	bl	8005f10 <HAL_GetTick>
 8007264:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007266:	4b6b      	ldr	r3, [pc, #428]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 8007268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800726c:	f013 0f02 	tst.w	r3, #2
 8007270:	d006      	beq.n	8007280 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007272:	f7fe fe4d 	bl	8005f10 <HAL_GetTick>
 8007276:	1b80      	subs	r0, r0, r6
 8007278:	2802      	cmp	r0, #2
 800727a:	d9f4      	bls.n	8007266 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800727c:	2003      	movs	r0, #3
 800727e:	e169      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	f013 0f04 	tst.w	r3, #4
 8007286:	d07a      	beq.n	800737e <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007288:	4b62      	ldr	r3, [pc, #392]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 800728a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007290:	d136      	bne.n	8007300 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007292:	4b60      	ldr	r3, [pc, #384]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 8007294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007296:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800729a:	659a      	str	r2, [r3, #88]	; 0x58
 800729c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80072a6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a8:	4b5b      	ldr	r3, [pc, #364]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80072b0:	d028      	beq.n	8007304 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072b2:	68a3      	ldr	r3, [r4, #8]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d039      	beq.n	800732c <HAL_RCC_OscConfig+0x3ec>
 80072b8:	2b05      	cmp	r3, #5
 80072ba:	d03f      	beq.n	800733c <HAL_RCC_OscConfig+0x3fc>
 80072bc:	4b55      	ldr	r3, [pc, #340]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80072be:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80072c2:	f022 0201 	bic.w	r2, r2, #1
 80072c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80072ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80072ce:	f022 0204 	bic.w	r2, r2, #4
 80072d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d03d      	beq.n	8007358 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80072dc:	f7fe fe18 	bl	8005f10 <HAL_GetTick>
 80072e0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072e2:	4b4c      	ldr	r3, [pc, #304]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80072e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e8:	f013 0f02 	tst.w	r3, #2
 80072ec:	d146      	bne.n	800737c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ee:	f7fe fe0f 	bl	8005f10 <HAL_GetTick>
 80072f2:	1bc0      	subs	r0, r0, r7
 80072f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80072f8:	4298      	cmp	r0, r3
 80072fa:	d9f2      	bls.n	80072e2 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80072fc:	2003      	movs	r0, #3
 80072fe:	e129      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 8007300:	2600      	movs	r6, #0
 8007302:	e7d1      	b.n	80072a8 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007304:	4a44      	ldr	r2, [pc, #272]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800730c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800730e:	f7fe fdff 	bl	8005f10 <HAL_GetTick>
 8007312:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007314:	4b40      	ldr	r3, [pc, #256]	; (8007418 <HAL_RCC_OscConfig+0x4d8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f413 7f80 	tst.w	r3, #256	; 0x100
 800731c:	d1c9      	bne.n	80072b2 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800731e:	f7fe fdf7 	bl	8005f10 <HAL_GetTick>
 8007322:	1bc0      	subs	r0, r0, r7
 8007324:	2802      	cmp	r0, #2
 8007326:	d9f5      	bls.n	8007314 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8007328:	2003      	movs	r0, #3
 800732a:	e113      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800732c:	4a39      	ldr	r2, [pc, #228]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 800732e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007332:	f043 0301 	orr.w	r3, r3, #1
 8007336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800733a:	e7cc      	b.n	80072d6 <HAL_RCC_OscConfig+0x396>
 800733c:	4b35      	ldr	r3, [pc, #212]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 800733e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007342:	f042 0204 	orr.w	r2, r2, #4
 8007346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800734a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007356:	e7be      	b.n	80072d6 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8007358:	f7fe fdda 	bl	8005f10 <HAL_GetTick>
 800735c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800735e:	4b2d      	ldr	r3, [pc, #180]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007364:	f013 0f02 	tst.w	r3, #2
 8007368:	d008      	beq.n	800737c <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736a:	f7fe fdd1 	bl	8005f10 <HAL_GetTick>
 800736e:	1bc0      	subs	r0, r0, r7
 8007370:	f241 3388 	movw	r3, #5000	; 0x1388
 8007374:	4298      	cmp	r0, r3
 8007376:	d9f2      	bls.n	800735e <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8007378:	2003      	movs	r0, #3
 800737a:	e0eb      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 800737c:	bb6e      	cbnz	r6, 80073da <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800737e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80e6 	beq.w	8007552 <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007386:	2b02      	cmp	r3, #2
 8007388:	d02d      	beq.n	80073e6 <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800738a:	2d0c      	cmp	r5, #12
 800738c:	f000 80e8 	beq.w	8007560 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8007390:	4b20      	ldr	r3, [pc, #128]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007398:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 80073a0:	d104      	bne.n	80073ac <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80073a2:	4a1c      	ldr	r2, [pc, #112]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80073a4:	68d3      	ldr	r3, [r2, #12]
 80073a6:	f023 0303 	bic.w	r3, r3, #3
 80073aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80073ac:	4a19      	ldr	r2, [pc, #100]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80073ae:	68d3      	ldr	r3, [r2, #12]
 80073b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80073b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80073ba:	f7fe fda9 	bl	8005f10 <HAL_GetTick>
 80073be:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073c0:	4b14      	ldr	r3, [pc, #80]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80073c8:	f000 80b7 	beq.w	800753a <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073cc:	f7fe fda0 	bl	8005f10 <HAL_GetTick>
 80073d0:	1b00      	subs	r0, r0, r4
 80073d2:	2802      	cmp	r0, #2
 80073d4:	d9f4      	bls.n	80073c0 <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 80073d6:	2003      	movs	r0, #3
 80073d8:	e0bc      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 80073da:	4a0e      	ldr	r2, [pc, #56]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80073dc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80073de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073e2:	6593      	str	r3, [r2, #88]	; 0x58
 80073e4:	e7cb      	b.n	800737e <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80073e8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ea:	f003 0103 	and.w	r1, r3, #3
 80073ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80073f0:	4291      	cmp	r1, r2
 80073f2:	d013      	beq.n	800741c <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073f4:	2d0c      	cmp	r5, #12
 80073f6:	f000 80af 	beq.w	8007558 <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8007402:	f040 80ab 	bne.w	800755c <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007406:	4b03      	ldr	r3, [pc, #12]	; (8007414 <HAL_RCC_OscConfig+0x4d4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800740e:	d031      	beq.n	8007474 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 8007410:	2001      	movs	r0, #1
 8007412:	e09f      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
 8007414:	40021000 	.word	0x40021000
 8007418:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800741c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007420:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007422:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007424:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007428:	d1e4      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800742a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800742e:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007430:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007434:	d1de      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007436:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800743a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800743c:	3a07      	subs	r2, #7
 800743e:	bf18      	it	ne
 8007440:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007442:	4291      	cmp	r1, r2
 8007444:	d1d6      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007446:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800744a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800744c:	0852      	lsrs	r2, r2, #1
 800744e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007450:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007454:	d1ce      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007456:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800745a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800745c:	0852      	lsrs	r2, r2, #1
 800745e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007460:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8007464:	d1c6      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007466:	4b3f      	ldr	r3, [pc, #252]	; (8007564 <HAL_RCC_OscConfig+0x624>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800746e:	d04a      	beq.n	8007506 <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 8007470:	2000      	movs	r0, #0
 8007472:	e06f      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8007474:	4a3b      	ldr	r2, [pc, #236]	; (8007564 <HAL_RCC_OscConfig+0x624>)
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800747e:	f7fe fd47 	bl	8005f10 <HAL_GetTick>
 8007482:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007484:	4b37      	ldr	r3, [pc, #220]	; (8007564 <HAL_RCC_OscConfig+0x624>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800748c:	d006      	beq.n	800749c <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800748e:	f7fe fd3f 	bl	8005f10 <HAL_GetTick>
 8007492:	1b40      	subs	r0, r0, r5
 8007494:	2802      	cmp	r0, #2
 8007496:	d9f5      	bls.n	8007484 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8007498:	2003      	movs	r0, #3
 800749a:	e05b      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800749c:	4a31      	ldr	r2, [pc, #196]	; (8007564 <HAL_RCC_OscConfig+0x624>)
 800749e:	68d3      	ldr	r3, [r2, #12]
 80074a0:	4931      	ldr	r1, [pc, #196]	; (8007568 <HAL_RCC_OscConfig+0x628>)
 80074a2:	4019      	ands	r1, r3
 80074a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80074a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80074a8:	3801      	subs	r0, #1
 80074aa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80074ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80074b0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80074b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80074b6:	0840      	lsrs	r0, r0, #1
 80074b8:	3801      	subs	r0, #1
 80074ba:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80074be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80074c0:	0840      	lsrs	r0, r0, #1
 80074c2:	3801      	subs	r0, #1
 80074c4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80074c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80074ca:	0900      	lsrs	r0, r0, #4
 80074cc:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80074d0:	4319      	orrs	r1, r3
 80074d2:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80074d4:	6813      	ldr	r3, [r2, #0]
 80074d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074da:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074dc:	68d3      	ldr	r3, [r2, #12]
 80074de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074e2:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80074e4:	f7fe fd14 	bl	8005f10 <HAL_GetTick>
 80074e8:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074ea:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <HAL_RCC_OscConfig+0x624>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80074f2:	d106      	bne.n	8007502 <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f4:	f7fe fd0c 	bl	8005f10 <HAL_GetTick>
 80074f8:	1b00      	subs	r0, r0, r4
 80074fa:	2802      	cmp	r0, #2
 80074fc:	d9f5      	bls.n	80074ea <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 80074fe:	2003      	movs	r0, #3
 8007500:	e028      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8007502:	2000      	movs	r0, #0
 8007504:	e026      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 8007506:	4b17      	ldr	r3, [pc, #92]	; (8007564 <HAL_RCC_OscConfig+0x624>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800750e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007516:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8007518:	f7fe fcfa 	bl	8005f10 <HAL_GetTick>
 800751c:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800751e:	4b11      	ldr	r3, [pc, #68]	; (8007564 <HAL_RCC_OscConfig+0x624>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007526:	d106      	bne.n	8007536 <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007528:	f7fe fcf2 	bl	8005f10 <HAL_GetTick>
 800752c:	1b03      	subs	r3, r0, r4
 800752e:	2b02      	cmp	r3, #2
 8007530:	d9f5      	bls.n	800751e <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 8007532:	2003      	movs	r0, #3
 8007534:	e00e      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8007536:	2000      	movs	r0, #0
 8007538:	e00c      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
 800753a:	2000      	movs	r0, #0
 800753c:	e00a      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 800753e:	2001      	movs	r0, #1
}
 8007540:	4770      	bx	lr
        return HAL_ERROR;
 8007542:	2001      	movs	r0, #1
 8007544:	e006      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8007546:	2001      	movs	r0, #1
 8007548:	e004      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800754a:	2001      	movs	r0, #1
 800754c:	e002      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800754e:	2001      	movs	r0, #1
 8007550:	e000      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8007552:	2000      	movs	r0, #0
}
 8007554:	b003      	add	sp, #12
 8007556:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8007558:	2001      	movs	r0, #1
 800755a:	e7fb      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 800755c:	2001      	movs	r0, #1
 800755e:	e7f9      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8007560:	2001      	movs	r0, #1
 8007562:	e7f7      	b.n	8007554 <HAL_RCC_OscConfig+0x614>
 8007564:	40021000 	.word	0x40021000
 8007568:	f99d808c 	.word	0xf99d808c

0800756c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800756c:	2800      	cmp	r0, #0
 800756e:	f000 8098 	beq.w	80076a2 <HAL_RCC_ClockConfig+0x136>
{
 8007572:	b570      	push	{r4, r5, r6, lr}
 8007574:	460c      	mov	r4, r1
 8007576:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007578:	4b4e      	ldr	r3, [pc, #312]	; (80076b4 <HAL_RCC_ClockConfig+0x148>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	428b      	cmp	r3, r1
 8007582:	d20b      	bcs.n	800759c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007584:	4a4b      	ldr	r2, [pc, #300]	; (80076b4 <HAL_RCC_ClockConfig+0x148>)
 8007586:	6813      	ldr	r3, [r2, #0]
 8007588:	f023 0307 	bic.w	r3, r3, #7
 800758c:	430b      	orrs	r3, r1
 800758e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007590:	6813      	ldr	r3, [r2, #0]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	428b      	cmp	r3, r1
 8007598:	f040 8085 	bne.w	80076a6 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	f013 0f01 	tst.w	r3, #1
 80075a2:	d039      	beq.n	8007618 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075a4:	686b      	ldr	r3, [r5, #4]
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d009      	beq.n	80075be <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d026      	beq.n	80075fc <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80075ae:	bb63      	cbnz	r3, 800760a <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80075b0:	4a41      	ldr	r2, [pc, #260]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	f012 0f02 	tst.w	r2, #2
 80075b8:	d106      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80075ba:	2001      	movs	r0, #1
 80075bc:	e070      	b.n	80076a0 <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075be:	4a3e      	ldr	r2, [pc, #248]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80075c6:	d070      	beq.n	80076aa <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075c8:	493b      	ldr	r1, [pc, #236]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 80075ca:	688a      	ldr	r2, [r1, #8]
 80075cc:	f022 0203 	bic.w	r2, r2, #3
 80075d0:	4313      	orrs	r3, r2
 80075d2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80075d4:	f7fe fc9c 	bl	8005f10 <HAL_GetTick>
 80075d8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075da:	4b37      	ldr	r3, [pc, #220]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 030c 	and.w	r3, r3, #12
 80075e2:	686a      	ldr	r2, [r5, #4]
 80075e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80075e8:	d016      	beq.n	8007618 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075ea:	f7fe fc91 	bl	8005f10 <HAL_GetTick>
 80075ee:	1b80      	subs	r0, r0, r6
 80075f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80075f4:	4298      	cmp	r0, r3
 80075f6:	d9f0      	bls.n	80075da <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80075f8:	2003      	movs	r0, #3
 80075fa:	e051      	b.n	80076a0 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075fc:	4a2e      	ldr	r2, [pc, #184]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 80075fe:	6812      	ldr	r2, [r2, #0]
 8007600:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007604:	d1e0      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8007606:	2001      	movs	r0, #1
 8007608:	e04a      	b.n	80076a0 <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800760a:	4a2b      	ldr	r2, [pc, #172]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007612:	d1d9      	bne.n	80075c8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8007614:	2001      	movs	r0, #1
 8007616:	e043      	b.n	80076a0 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	f013 0f02 	tst.w	r3, #2
 800761e:	d006      	beq.n	800762e <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007620:	4a25      	ldr	r2, [pc, #148]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 8007622:	6893      	ldr	r3, [r2, #8]
 8007624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007628:	68a9      	ldr	r1, [r5, #8]
 800762a:	430b      	orrs	r3, r1
 800762c:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800762e:	4b21      	ldr	r3, [pc, #132]	; (80076b4 <HAL_RCC_ClockConfig+0x148>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	42a3      	cmp	r3, r4
 8007638:	d90a      	bls.n	8007650 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763a:	4a1e      	ldr	r2, [pc, #120]	; (80076b4 <HAL_RCC_ClockConfig+0x148>)
 800763c:	6813      	ldr	r3, [r2, #0]
 800763e:	f023 0307 	bic.w	r3, r3, #7
 8007642:	4323      	orrs	r3, r4
 8007644:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007646:	6813      	ldr	r3, [r2, #0]
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	42a3      	cmp	r3, r4
 800764e:	d12e      	bne.n	80076ae <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	f013 0f04 	tst.w	r3, #4
 8007656:	d006      	beq.n	8007666 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007658:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 800765a:	6893      	ldr	r3, [r2, #8]
 800765c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007660:	68e9      	ldr	r1, [r5, #12]
 8007662:	430b      	orrs	r3, r1
 8007664:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	f013 0f08 	tst.w	r3, #8
 800766c:	d007      	beq.n	800767e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800766e:	4a12      	ldr	r2, [pc, #72]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 8007670:	6893      	ldr	r3, [r2, #8]
 8007672:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007676:	6929      	ldr	r1, [r5, #16]
 8007678:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800767c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800767e:	f7ff fc05 	bl	8006e8c <HAL_RCC_GetSysClockFreq>
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <HAL_RCC_ClockConfig+0x14c>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800768a:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <HAL_RCC_ClockConfig+0x150>)
 800768c:	5cd3      	ldrb	r3, [r2, r3]
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	40d8      	lsrs	r0, r3
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <HAL_RCC_ClockConfig+0x154>)
 8007696:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <HAL_RCC_ClockConfig+0x158>)
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	f7fe fbf6 	bl	8005e8c <HAL_InitTick>
}
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80076a2:	2001      	movs	r0, #1
}
 80076a4:	4770      	bx	lr
      return HAL_ERROR;
 80076a6:	2001      	movs	r0, #1
 80076a8:	e7fa      	b.n	80076a0 <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 80076aa:	2001      	movs	r0, #1
 80076ac:	e7f8      	b.n	80076a0 <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 80076ae:	2001      	movs	r0, #1
 80076b0:	e7f6      	b.n	80076a0 <HAL_RCC_ClockConfig+0x134>
 80076b2:	bf00      	nop
 80076b4:	40022000 	.word	0x40022000
 80076b8:	40021000 	.word	0x40021000
 80076bc:	0800be00 	.word	0x0800be00
 80076c0:	2000007c 	.word	0x2000007c
 80076c4:	20000084 	.word	0x20000084

080076c8 <HAL_RCC_GetHCLKFreq>:
}
 80076c8:	4b01      	ldr	r3, [pc, #4]	; (80076d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	2000007c 	.word	0x2000007c

080076d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	4604      	mov	r4, r0
 80076d8:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80076da:	4b59      	ldr	r3, [pc, #356]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f013 0f03 	tst.w	r3, #3
 80076e2:	d018      	beq.n	8007716 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80076e4:	4b56      	ldr	r3, [pc, #344]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	6802      	ldr	r2, [r0, #0]
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d002      	beq.n	80076f8 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80076f2:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80076f4:	4628      	mov	r0, r5
 80076f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	f000 809e 	beq.w	800783a <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80076fe:	4b50      	ldr	r3, [pc, #320]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007706:	3301      	adds	r3, #1
 8007708:	6842      	ldr	r2, [r0, #4]
       ||
 800770a:	4293      	cmp	r3, r2
 800770c:	d001      	beq.n	8007712 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 800770e:	2501      	movs	r5, #1
 8007710:	e7f0      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8007712:	2500      	movs	r5, #0
 8007714:	e009      	b.n	800772a <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 8007716:	6803      	ldr	r3, [r0, #0]
 8007718:	2b02      	cmp	r3, #2
 800771a:	d057      	beq.n	80077cc <RCCEx_PLLSAI1_Config+0xf8>
 800771c:	2b03      	cmp	r3, #3
 800771e:	d05c      	beq.n	80077da <RCCEx_PLLSAI1_Config+0x106>
 8007720:	2b01      	cmp	r3, #1
 8007722:	d042      	beq.n	80077aa <RCCEx_PLLSAI1_Config+0xd6>
 8007724:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8007726:	2d00      	cmp	r5, #0
 8007728:	d1e4      	bne.n	80076f4 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800772a:	4a45      	ldr	r2, [pc, #276]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 800772c:	6813      	ldr	r3, [r2, #0]
 800772e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007732:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007734:	f7fe fbec 	bl	8005f10 <HAL_GetTick>
 8007738:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800773a:	4b41      	ldr	r3, [pc, #260]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007742:	d005      	beq.n	8007750 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007744:	f7fe fbe4 	bl	8005f10 <HAL_GetTick>
 8007748:	1b83      	subs	r3, r0, r6
 800774a:	2b02      	cmp	r3, #2
 800774c:	d9f5      	bls.n	800773a <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 800774e:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8007750:	2d00      	cmp	r5, #0
 8007752:	d1cf      	bne.n	80076f4 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8007754:	2f00      	cmp	r7, #0
 8007756:	d14e      	bne.n	80077f6 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007758:	4939      	ldr	r1, [pc, #228]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 800775a:	690b      	ldr	r3, [r1, #16]
 800775c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007764:	68a0      	ldr	r0, [r4, #8]
 8007766:	68e2      	ldr	r2, [r4, #12]
 8007768:	0912      	lsrs	r2, r2, #4
 800776a:	0452      	lsls	r2, r2, #17
 800776c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007770:	4313      	orrs	r3, r2
 8007772:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8007774:	4a32      	ldr	r2, [pc, #200]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 8007776:	6813      	ldr	r3, [r2, #0]
 8007778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800777c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800777e:	f7fe fbc7 	bl	8005f10 <HAL_GetTick>
 8007782:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007784:	4b2e      	ldr	r3, [pc, #184]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800778c:	d105      	bne.n	800779a <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800778e:	f7fe fbbf 	bl	8005f10 <HAL_GetTick>
 8007792:	1b83      	subs	r3, r0, r6
 8007794:	2b02      	cmp	r3, #2
 8007796:	d9f5      	bls.n	8007784 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8007798:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800779a:	2d00      	cmp	r5, #0
 800779c:	d1aa      	bne.n	80076f4 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800779e:	4a28      	ldr	r2, [pc, #160]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80077a0:	6913      	ldr	r3, [r2, #16]
 80077a2:	69a1      	ldr	r1, [r4, #24]
 80077a4:	430b      	orrs	r3, r1
 80077a6:	6113      	str	r3, [r2, #16]
 80077a8:	e7a4      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80077aa:	4a25      	ldr	r2, [pc, #148]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	f012 0f02 	tst.w	r2, #2
 80077b2:	d01e      	beq.n	80077f2 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077b4:	4822      	ldr	r0, [pc, #136]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80077b6:	68c2      	ldr	r2, [r0, #12]
 80077b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80077bc:	6861      	ldr	r1, [r4, #4]
 80077be:	3901      	subs	r1, #1
 80077c0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60c3      	str	r3, [r0, #12]
 80077c8:	2500      	movs	r5, #0
 80077ca:	e7ac      	b.n	8007726 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077cc:	4a1c      	ldr	r2, [pc, #112]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80077ce:	6812      	ldr	r2, [r2, #0]
 80077d0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80077d4:	d1ee      	bne.n	80077b4 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 80077d6:	2501      	movs	r5, #1
 80077d8:	e7a5      	b.n	8007726 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077da:	4a19      	ldr	r2, [pc, #100]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80077e2:	d1e7      	bne.n	80077b4 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077e4:	4a16      	ldr	r2, [pc, #88]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80077e6:	6812      	ldr	r2, [r2, #0]
 80077e8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80077ec:	d1e2      	bne.n	80077b4 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 80077ee:	2501      	movs	r5, #1
 80077f0:	e799      	b.n	8007726 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 80077f2:	2501      	movs	r5, #1
 80077f4:	e797      	b.n	8007726 <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 80077f6:	2f01      	cmp	r7, #1
 80077f8:	d00f      	beq.n	800781a <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077fa:	4811      	ldr	r0, [pc, #68]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 80077fc:	6902      	ldr	r2, [r0, #16]
 80077fe:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8007802:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007806:	68a1      	ldr	r1, [r4, #8]
 8007808:	6963      	ldr	r3, [r4, #20]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	3b01      	subs	r3, #1
 800780e:	065b      	lsls	r3, r3, #25
 8007810:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007814:	431a      	orrs	r2, r3
 8007816:	6102      	str	r2, [r0, #16]
 8007818:	e7ac      	b.n	8007774 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800781a:	4809      	ldr	r0, [pc, #36]	; (8007840 <RCCEx_PLLSAI1_Config+0x16c>)
 800781c:	6902      	ldr	r2, [r0, #16]
 800781e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007822:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007826:	68a1      	ldr	r1, [r4, #8]
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	085b      	lsrs	r3, r3, #1
 800782c:	3b01      	subs	r3, #1
 800782e:	055b      	lsls	r3, r3, #21
 8007830:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007834:	431a      	orrs	r2, r3
 8007836:	6102      	str	r2, [r0, #16]
 8007838:	e79c      	b.n	8007774 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 800783a:	2501      	movs	r5, #1
 800783c:	e75a      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0x20>
 800783e:	bf00      	nop
 8007840:	40021000 	.word	0x40021000

08007844 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	4604      	mov	r4, r0
 8007848:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800784a:	4b50      	ldr	r3, [pc, #320]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f013 0f03 	tst.w	r3, #3
 8007852:	d018      	beq.n	8007886 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007854:	4b4d      	ldr	r3, [pc, #308]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	6802      	ldr	r2, [r0, #0]
 800785e:	4293      	cmp	r3, r2
 8007860:	d002      	beq.n	8007868 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007862:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8007864:	4628      	mov	r0, r5
 8007866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8007868:	2a00      	cmp	r2, #0
 800786a:	f000 808c 	beq.w	8007986 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800786e:	4b47      	ldr	r3, [pc, #284]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007876:	3301      	adds	r3, #1
 8007878:	6842      	ldr	r2, [r0, #4]
       ||
 800787a:	4293      	cmp	r3, r2
 800787c:	d001      	beq.n	8007882 <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 800787e:	2501      	movs	r5, #1
 8007880:	e7f0      	b.n	8007864 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8007882:	2500      	movs	r5, #0
 8007884:	e009      	b.n	800789a <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8007886:	6803      	ldr	r3, [r0, #0]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d057      	beq.n	800793c <RCCEx_PLLSAI2_Config+0xf8>
 800788c:	2b03      	cmp	r3, #3
 800788e:	d05c      	beq.n	800794a <RCCEx_PLLSAI2_Config+0x106>
 8007890:	2b01      	cmp	r3, #1
 8007892:	d042      	beq.n	800791a <RCCEx_PLLSAI2_Config+0xd6>
 8007894:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8007896:	2d00      	cmp	r5, #0
 8007898:	d1e4      	bne.n	8007864 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 800789a:	4a3c      	ldr	r2, [pc, #240]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 800789c:	6813      	ldr	r3, [r2, #0]
 800789e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80078a4:	f7fe fb34 	bl	8005f10 <HAL_GetTick>
 80078a8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078aa:	4b38      	ldr	r3, [pc, #224]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80078b2:	d005      	beq.n	80078c0 <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078b4:	f7fe fb2c 	bl	8005f10 <HAL_GetTick>
 80078b8:	1b83      	subs	r3, r0, r6
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d9f5      	bls.n	80078aa <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 80078be:	2503      	movs	r5, #3
    if(status == HAL_OK)
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	d1cf      	bne.n	8007864 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80078c4:	2f00      	cmp	r7, #0
 80078c6:	d14e      	bne.n	8007966 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80078c8:	4930      	ldr	r1, [pc, #192]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 80078ca:	694b      	ldr	r3, [r1, #20]
 80078cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80078d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078d4:	68a0      	ldr	r0, [r4, #8]
 80078d6:	68e2      	ldr	r2, [r4, #12]
 80078d8:	0912      	lsrs	r2, r2, #4
 80078da:	0452      	lsls	r2, r2, #17
 80078dc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80078e0:	4313      	orrs	r3, r2
 80078e2:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80078e4:	4a29      	ldr	r2, [pc, #164]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 80078e6:	6813      	ldr	r3, [r2, #0]
 80078e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80078ee:	f7fe fb0f 	bl	8005f10 <HAL_GetTick>
 80078f2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078f4:	4b25      	ldr	r3, [pc, #148]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80078fc:	d105      	bne.n	800790a <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078fe:	f7fe fb07 	bl	8005f10 <HAL_GetTick>
 8007902:	1b83      	subs	r3, r0, r6
 8007904:	2b02      	cmp	r3, #2
 8007906:	d9f5      	bls.n	80078f4 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 8007908:	2503      	movs	r5, #3
      if(status == HAL_OK)
 800790a:	2d00      	cmp	r5, #0
 800790c:	d1aa      	bne.n	8007864 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800790e:	4a1f      	ldr	r2, [pc, #124]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 8007910:	6953      	ldr	r3, [r2, #20]
 8007912:	6961      	ldr	r1, [r4, #20]
 8007914:	430b      	orrs	r3, r1
 8007916:	6153      	str	r3, [r2, #20]
 8007918:	e7a4      	b.n	8007864 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800791a:	4a1c      	ldr	r2, [pc, #112]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	f012 0f02 	tst.w	r2, #2
 8007922:	d01e      	beq.n	8007962 <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007924:	4819      	ldr	r0, [pc, #100]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 8007926:	68c2      	ldr	r2, [r0, #12]
 8007928:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800792c:	6861      	ldr	r1, [r4, #4]
 800792e:	3901      	subs	r1, #1
 8007930:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007934:	4313      	orrs	r3, r2
 8007936:	60c3      	str	r3, [r0, #12]
 8007938:	2500      	movs	r5, #0
 800793a:	e7ac      	b.n	8007896 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800793c:	4a13      	ldr	r2, [pc, #76]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 800793e:	6812      	ldr	r2, [r2, #0]
 8007940:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8007944:	d1ee      	bne.n	8007924 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8007946:	2501      	movs	r5, #1
 8007948:	e7a5      	b.n	8007896 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800794a:	4a10      	ldr	r2, [pc, #64]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007952:	d1e7      	bne.n	8007924 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007954:	4a0d      	ldr	r2, [pc, #52]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800795c:	d1e2      	bne.n	8007924 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 800795e:	2501      	movs	r5, #1
 8007960:	e799      	b.n	8007896 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8007962:	2501      	movs	r5, #1
 8007964:	e797      	b.n	8007896 <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007966:	4809      	ldr	r0, [pc, #36]	; (800798c <RCCEx_PLLSAI2_Config+0x148>)
 8007968:	6942      	ldr	r2, [r0, #20]
 800796a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800796e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8007972:	68a1      	ldr	r1, [r4, #8]
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	3b01      	subs	r3, #1
 800797a:	065b      	lsls	r3, r3, #25
 800797c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007980:	431a      	orrs	r2, r3
 8007982:	6142      	str	r2, [r0, #20]
 8007984:	e7ae      	b.n	80078e4 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8007986:	2501      	movs	r5, #1
 8007988:	e76c      	b.n	8007864 <RCCEx_PLLSAI2_Config+0x20>
 800798a:	bf00      	nop
 800798c:	40021000 	.word	0x40021000

08007990 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007998:	6803      	ldr	r3, [r0, #0]
 800799a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800799e:	d033      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 80079a0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80079a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079a6:	d01f      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80079a8:	d80c      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80079aa:	b323      	cbz	r3, 80079f6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 80079ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b0:	d105      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80079b2:	2100      	movs	r1, #0
 80079b4:	3020      	adds	r0, #32
 80079b6:	f7ff ff45 	bl	8007844 <RCCEx_PLLSAI2_Config>
 80079ba:	4606      	mov	r6, r0
      break;
 80079bc:	e020      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 80079be:	2701      	movs	r7, #1
 80079c0:	463e      	mov	r6, r7
 80079c2:	e023      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80079c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079c8:	d10b      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80079ca:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079cc:	4a60      	ldr	r2, [pc, #384]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80079ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80079d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80079d6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80079d8:	430b      	orrs	r3, r1
 80079da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079de:	2700      	movs	r7, #0
 80079e0:	e014      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80079e2:	2701      	movs	r7, #1
 80079e4:	463e      	mov	r6, r7
 80079e6:	e011      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079e8:	4a59      	ldr	r2, [pc, #356]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80079ea:	68d3      	ldr	r3, [r2, #12]
 80079ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f0:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80079f2:	2600      	movs	r6, #0
 80079f4:	e7ea      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079f6:	2100      	movs	r1, #0
 80079f8:	3004      	adds	r0, #4
 80079fa:	f7ff fe6b 	bl	80076d4 <RCCEx_PLLSAI1_Config>
 80079fe:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8007a00:	2e00      	cmp	r6, #0
 8007a02:	d0e3      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007a04:	4637      	mov	r7, r6
 8007a06:	e001      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a08:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a0a:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007a12:	d030      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8007a14:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a1a:	d01f      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007a1c:	d80d      	bhi.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8007a1e:	b31b      	cbz	r3, 8007a68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8007a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a24:	d106      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007a26:	2100      	movs	r1, #0
 8007a28:	f104 0020 	add.w	r0, r4, #32
 8007a2c:	f7ff ff0a 	bl	8007844 <RCCEx_PLLSAI2_Config>
 8007a30:	4606      	mov	r6, r0
      break;
 8007a32:	e005      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8007a34:	2701      	movs	r7, #1
 8007a36:	463e      	mov	r6, r7
 8007a38:	e01d      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8007a3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a3e:	d10a      	bne.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8007a40:	b9c6      	cbnz	r6, 8007a74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a42:	4a43      	ldr	r2, [pc, #268]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007a44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007a48:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007a4c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8007a54:	e00f      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8007a56:	2701      	movs	r7, #1
 8007a58:	463e      	mov	r6, r7
 8007a5a:	e00c      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007a5c:	4a3c      	ldr	r2, [pc, #240]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007a5e:	68d3      	ldr	r3, [r2, #12]
 8007a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a64:	60d3      	str	r3, [r2, #12]
      break;
 8007a66:	e7eb      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007a68:	2100      	movs	r1, #0
 8007a6a:	1d20      	adds	r0, r4, #4
 8007a6c:	f7ff fe32 	bl	80076d4 <RCCEx_PLLSAI1_Config>
 8007a70:	4606      	mov	r6, r0
      break;
 8007a72:	e7e5      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8007a74:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007a7c:	d071      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a7e:	4b34      	ldr	r3, [pc, #208]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007a86:	d14e      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a88:	4b31      	ldr	r3, [pc, #196]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007a8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a90:	659a      	str	r2, [r3, #88]	; 0x58
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007a9c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aa0:	4a2c      	ldr	r2, [pc, #176]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007aa2:	6813      	ldr	r3, [r2, #0]
 8007aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8007aaa:	f7fe fa31 	bl	8005f10 <HAL_GetTick>
 8007aae:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ab0:	4b28      	ldr	r3, [pc, #160]	; (8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007ab8:	d105      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aba:	f7fe fa29 	bl	8005f10 <HAL_GetTick>
 8007abe:	1b40      	subs	r0, r0, r5
 8007ac0:	2802      	cmp	r0, #2
 8007ac2:	d9f5      	bls.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8007ac4:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	d146      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007aca:	4b21      	ldr	r3, [pc, #132]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ad0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007ad4:	d016      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007ad6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d012      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ade:	4a1c      	ldr	r2, [pc, #112]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ae0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ae8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007aec:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007af0:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007af4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8007af8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007afc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8007b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b04:	f013 0f01 	tst.w	r3, #1
 8007b08:	d110      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 8007b0a:	2e00      	cmp	r6, #0
 8007b0c:	f040 8127 	bne.w	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b10:	4a0f      	ldr	r2, [pc, #60]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b24:	e019      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 8007b26:	f04f 0800 	mov.w	r8, #0
 8007b2a:	e7b9      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8007b2c:	f7fe f9f0 	bl	8005f10 <HAL_GetTick>
 8007b30:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b38:	f013 0f02 	tst.w	r3, #2
 8007b3c:	d1e5      	bne.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b3e:	f7fe f9e7 	bl	8005f10 <HAL_GetTick>
 8007b42:	1b40      	subs	r0, r0, r5
 8007b44:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b48:	4298      	cmp	r0, r3
 8007b4a:	d9f2      	bls.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8007b4c:	2603      	movs	r6, #3
 8007b4e:	e7dc      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007b50:	40021000 	.word	0x40021000
 8007b54:	40007000 	.word	0x40007000
      status = ret;
 8007b58:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8007b5a:	f1b8 0f00 	cmp.w	r8, #0
 8007b5e:	f040 8100 	bne.w	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	f013 0f01 	tst.w	r3, #1
 8007b68:	d008      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b6a:	4a9d      	ldr	r2, [pc, #628]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b6c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007b70:	f023 0303 	bic.w	r3, r3, #3
 8007b74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b76:	430b      	orrs	r3, r1
 8007b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	f013 0f02 	tst.w	r3, #2
 8007b82:	d008      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b84:	4a96      	ldr	r2, [pc, #600]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007b86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007b8a:	f023 030c 	bic.w	r3, r3, #12
 8007b8e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b90:	430b      	orrs	r3, r1
 8007b92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	f013 0f04 	tst.w	r3, #4
 8007b9c:	d008      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b9e:	4a90      	ldr	r2, [pc, #576]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ba0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007ba4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007ba8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007baa:	430b      	orrs	r3, r1
 8007bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	f013 0f08 	tst.w	r3, #8
 8007bb6:	d008      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bb8:	4a89      	ldr	r2, [pc, #548]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007bbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bc2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	f013 0f10 	tst.w	r3, #16
 8007bd0:	d008      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bd2:	4a83      	ldr	r2, [pc, #524]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bd4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bde:	430b      	orrs	r3, r1
 8007be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	f013 0f20 	tst.w	r3, #32
 8007bea:	d008      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bec:	4a7c      	ldr	r2, [pc, #496]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007bee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007bf2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007bf6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007c04:	d008      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c06:	4a76      	ldr	r2, [pc, #472]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007c0c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8007c10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007c12:	430b      	orrs	r3, r1
 8007c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007c1e:	d008      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c20:	4a6f      	ldr	r2, [pc, #444]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007c26:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007c2a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c38:	d008      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c3a:	4a69      	ldr	r2, [pc, #420]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007c40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007c44:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007c46:	430b      	orrs	r3, r1
 8007c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c52:	d008      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c54:	4a62      	ldr	r2, [pc, #392]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007c5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007c5e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007c60:	430b      	orrs	r3, r1
 8007c62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	f413 7f80 	tst.w	r3, #256	; 0x100
 8007c6c:	d008      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c6e:	4a5c      	ldr	r2, [pc, #368]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007c74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007c78:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007c86:	d00f      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c88:	4a55      	ldr	r2, [pc, #340]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007c8e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007c92:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007c94:	430b      	orrs	r3, r1
 8007c96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c9a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ca0:	d065      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007ca2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ca6:	d067      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007cae:	d00f      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007cb0:	4a4b      	ldr	r2, [pc, #300]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007cb6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007cba:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007cc2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc8:	d05e      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007cca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cce:	d060      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007cd6:	d00f      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cd8:	4a41      	ldr	r2, [pc, #260]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007cda:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007cde:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8007ce2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cf0:	d057      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007cf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cf6:	d059      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007cfe:	d00f      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d00:	4a37      	ldr	r2, [pc, #220]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d02:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d06:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007d0a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d12:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d18:	d050      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d1e:	d055      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007d26:	d008      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d28:	4a2d      	ldr	r2, [pc, #180]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d32:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007d34:	430b      	orrs	r3, r1
 8007d36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007d40:	d009      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d42:	4a27      	ldr	r2, [pc, #156]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007d48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d4c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007d50:	430b      	orrs	r3, r1
 8007d52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8007d56:	4638      	mov	r0, r7
 8007d58:	b002      	add	sp, #8
 8007d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8007d5e:	4637      	mov	r7, r6
 8007d60:	e6fb      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d62:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007d64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d6c:	e6f9      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d6e:	68d3      	ldr	r3, [r2, #12]
 8007d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d74:	60d3      	str	r3, [r2, #12]
 8007d76:	e797      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d78:	2101      	movs	r1, #1
 8007d7a:	1d20      	adds	r0, r4, #4
 8007d7c:	f7ff fcaa 	bl	80076d4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8007d80:	2800      	cmp	r0, #0
 8007d82:	d091      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8007d84:	4607      	mov	r7, r0
 8007d86:	e78f      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d88:	68d3      	ldr	r3, [r2, #12]
 8007d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d8e:	60d3      	str	r3, [r2, #12]
 8007d90:	e79e      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d92:	2101      	movs	r1, #1
 8007d94:	1d20      	adds	r0, r4, #4
 8007d96:	f7ff fc9d 	bl	80076d4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d098      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8007d9e:	4607      	mov	r7, r0
 8007da0:	e796      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007da2:	68d3      	ldr	r3, [r2, #12]
 8007da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007da8:	60d3      	str	r3, [r2, #12]
 8007daa:	e7a5      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007dac:	2101      	movs	r1, #1
 8007dae:	1d20      	adds	r0, r4, #4
 8007db0:	f7ff fc90 	bl	80076d4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d09f      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8007db8:	4607      	mov	r7, r0
 8007dba:	e79d      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	1d20      	adds	r0, r4, #4
 8007dc0:	f7ff fc88 	bl	80076d4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d0ab      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8007dc8:	4607      	mov	r7, r0
 8007dca:	e7a9      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007dcc:	2102      	movs	r1, #2
 8007dce:	f104 0020 	add.w	r0, r4, #32
 8007dd2:	f7ff fd37 	bl	8007844 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0a2      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8007dda:	4607      	mov	r7, r0
 8007ddc:	e7a0      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8007dde:	bf00      	nop
 8007de0:	40021000 	.word	0x40021000

08007de4 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <HAL_RCCEx_DisableLSECSS+0x18>)
 8007de6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007dea:	f022 0220 	bic.w	r2, r2, #32
 8007dee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8007df2:	699a      	ldr	r2, [r3, #24]
 8007df4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007df8:	619a      	str	r2, [r3, #24]
}
 8007dfa:	4770      	bx	lr
 8007dfc:	40021000 	.word	0x40021000

08007e00 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007e00:	4a02      	ldr	r2, [pc, #8]	; (8007e0c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	f043 0304 	orr.w	r3, r3, #4
 8007e08:	6013      	str	r3, [r2, #0]
}
 8007e0a:	4770      	bx	lr
 8007e0c:	40021000 	.word	0x40021000

08007e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	4605      	mov	r5, r0
 8007e18:	4688      	mov	r8, r1
 8007e1a:	4617      	mov	r7, r2
 8007e1c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e1e:	f7fe f877 	bl	8005f10 <HAL_GetTick>
 8007e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e24:	1a1b      	subs	r3, r3, r0
 8007e26:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8007e2a:	f7fe f871 	bl	8005f10 <HAL_GetTick>
 8007e2e:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e30:	4b2a      	ldr	r3, [pc, #168]	; (8007edc <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8007e38:	fb09 f303 	mul.w	r3, r9, r3
 8007e3c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e3e:	682b      	ldr	r3, [r5, #0]
 8007e40:	689c      	ldr	r4, [r3, #8]
 8007e42:	ea38 0404 	bics.w	r4, r8, r4
 8007e46:	bf0c      	ite	eq
 8007e48:	2301      	moveq	r3, #1
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	42bb      	cmp	r3, r7
 8007e4e:	d040      	beq.n	8007ed2 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e50:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8007e54:	d0f3      	beq.n	8007e3e <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e56:	f7fe f85b 	bl	8005f10 <HAL_GetTick>
 8007e5a:	eba0 000a 	sub.w	r0, r0, sl
 8007e5e:	4548      	cmp	r0, r9
 8007e60:	d20a      	bcs.n	8007e78 <SPI_WaitFlagStateUntilTimeout+0x68>
 8007e62:	f1b9 0f00 	cmp.w	r9, #0
 8007e66:	d007      	beq.n	8007e78 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007e68:	9a01      	ldr	r2, [sp, #4]
 8007e6a:	b102      	cbz	r2, 8007e6e <SPI_WaitFlagStateUntilTimeout+0x5e>
 8007e6c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8007e6e:	9b01      	ldr	r3, [sp, #4]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	4691      	mov	r9, r2
 8007e76:	e7e2      	b.n	8007e3e <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e78:	682a      	ldr	r2, [r5, #0]
 8007e7a:	6853      	ldr	r3, [r2, #4]
 8007e7c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007e80:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e82:	686b      	ldr	r3, [r5, #4]
 8007e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e88:	d00b      	beq.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e90:	d014      	beq.n	8007ebc <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007e9e:	2003      	movs	r0, #3
 8007ea0:	e018      	b.n	8007ed4 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ea2:	68ab      	ldr	r3, [r5, #8]
 8007ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea8:	d002      	beq.n	8007eb0 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eae:	d1ec      	bne.n	8007e8a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8007eb0:	682a      	ldr	r2, [r5, #0]
 8007eb2:	6813      	ldr	r3, [r2, #0]
 8007eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e7e6      	b.n	8007e8a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8007ebc:	682a      	ldr	r2, [r5, #0]
 8007ebe:	6813      	ldr	r3, [r2, #0]
 8007ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	682a      	ldr	r2, [r5, #0]
 8007ec8:	6813      	ldr	r3, [r2, #0]
 8007eca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	e7df      	b.n	8007e92 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8007ed2:	2000      	movs	r0, #0
}
 8007ed4:	b002      	add	sp, #8
 8007ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eda:	bf00      	nop
 8007edc:	2000007c 	.word	0x2000007c

08007ee0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	460d      	mov	r5, r1
 8007eea:	4616      	mov	r6, r2
 8007eec:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007eee:	f7fe f80f 	bl	8005f10 <HAL_GetTick>
 8007ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef4:	1a1b      	subs	r3, r3, r0
 8007ef6:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8007efa:	f7fe f809 	bl	8005f10 <HAL_GetTick>
 8007efe:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f00:	4b2f      	ldr	r3, [pc, #188]	; (8007fc0 <SPI_WaitFifoStateUntilTimeout+0xe0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007f08:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007f0c:	0d1b      	lsrs	r3, r3, #20
 8007f0e:	fb09 f303 	mul.w	r3, r9, r3
 8007f12:	9300      	str	r3, [sp, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f14:	e002      	b.n	8007f1c <SPI_WaitFifoStateUntilTimeout+0x3c>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f16:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8007f1a:	d10f      	bne.n	8007f3c <SPI_WaitFifoStateUntilTimeout+0x5c>
  while ((hspi->Instance->SR & Fifo) != State)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	689c      	ldr	r4, [r3, #8]
 8007f20:	ea04 0c05 	and.w	ip, r4, r5
 8007f24:	45b4      	cmp	ip, r6
 8007f26:	d047      	beq.n	8007fb8 <SPI_WaitFifoStateUntilTimeout+0xd8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f28:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8007f2c:	d1f3      	bne.n	8007f16 <SPI_WaitFifoStateUntilTimeout+0x36>
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	d1f1      	bne.n	8007f16 <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007f32:	7b1b      	ldrb	r3, [r3, #12]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	9301      	str	r3, [sp, #4]
      UNUSED(tmpreg);
 8007f38:	9b01      	ldr	r3, [sp, #4]
 8007f3a:	e7ec      	b.n	8007f16 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f3c:	f7fd ffe8 	bl	8005f10 <HAL_GetTick>
 8007f40:	eba0 000a 	sub.w	r0, r0, sl
 8007f44:	4548      	cmp	r0, r9
 8007f46:	d20a      	bcs.n	8007f5e <SPI_WaitFifoStateUntilTimeout+0x7e>
 8007f48:	f1b9 0f00 	cmp.w	r9, #0
 8007f4c:	d007      	beq.n	8007f5e <SPI_WaitFifoStateUntilTimeout+0x7e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007f4e:	9a00      	ldr	r2, [sp, #0]
 8007f50:	b102      	cbz	r2, 8007f54 <SPI_WaitFifoStateUntilTimeout+0x74>
 8007f52:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8007f54:	9b00      	ldr	r3, [sp, #0]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	4691      	mov	r9, r2
 8007f5c:	e7de      	b.n	8007f1c <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	6853      	ldr	r3, [r2, #4]
 8007f62:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8007f66:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6e:	d00b      	beq.n	8007f88 <SPI_WaitFifoStateUntilTimeout+0xa8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f76:	d014      	beq.n	8007fa2 <SPI_WaitFifoStateUntilTimeout+0xc2>
        hspi->State = HAL_SPI_STATE_READY;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8007f84:	2003      	movs	r0, #3
 8007f86:	e018      	b.n	8007fba <SPI_WaitFifoStateUntilTimeout+0xda>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8e:	d002      	beq.n	8007f96 <SPI_WaitFifoStateUntilTimeout+0xb6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f94:	d1ec      	bne.n	8007f70 <SPI_WaitFifoStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	6813      	ldr	r3, [r2, #0]
 8007f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	e7e6      	b.n	8007f70 <SPI_WaitFifoStateUntilTimeout+0x90>
          SPI_RESET_CRC(hspi);
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	6813      	ldr	r3, [r2, #0]
 8007fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	6813      	ldr	r3, [r2, #0]
 8007fb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	e7df      	b.n	8007f78 <SPI_WaitFifoStateUntilTimeout+0x98>
    }
  }

  return HAL_OK;
 8007fb8:	2000      	movs	r0, #0
}
 8007fba:	b002      	add	sp, #8
 8007fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc0:	2000007c 	.word	0x2000007c

08007fc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	4604      	mov	r4, r0
 8007fca:	460d      	mov	r5, r1
 8007fcc:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fce:	9200      	str	r2, [sp, #0]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007fd8:	f7ff ff82 	bl	8007ee0 <SPI_WaitFifoStateUntilTimeout>
 8007fdc:	b9b0      	cbnz	r0, 800800c <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fde:	9600      	str	r6, [sp, #0]
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2180      	movs	r1, #128	; 0x80
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7ff ff12 	bl	8007e10 <SPI_WaitFlagStateUntilTimeout>
 8007fec:	b9a8      	cbnz	r0, 800801a <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fee:	9600      	str	r6, [sp, #0]
 8007ff0:	462b      	mov	r3, r5
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f7ff ff71 	bl	8007ee0 <SPI_WaitFifoStateUntilTimeout>
 8007ffe:	b150      	cbz	r0, 8008016 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008000:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008002:	f043 0320 	orr.w	r3, r3, #32
 8008006:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008008:	2003      	movs	r0, #3
 800800a:	e004      	b.n	8008016 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800800c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800800e:	f043 0320 	orr.w	r3, r3, #32
 8008012:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008014:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8008016:	b002      	add	sp, #8
 8008018:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800801a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800801c:	f043 0320 	orr.w	r3, r3, #32
 8008020:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8008022:	2003      	movs	r0, #3
 8008024:	e7f7      	b.n	8008016 <SPI_EndRxTxTransaction+0x52>

08008026 <HAL_SPI_MspInit>:
}
 8008026:	4770      	bx	lr

08008028 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008028:	2800      	cmp	r0, #0
 800802a:	f000 8089 	beq.w	8008140 <HAL_SPI_Init+0x118>
{
 800802e:	b510      	push	{r4, lr}
 8008030:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008032:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008034:	b933      	cbnz	r3, 8008044 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008036:	6843      	ldr	r3, [r0, #4]
 8008038:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800803c:	d005      	beq.n	800804a <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800803e:	2300      	movs	r3, #0
 8008040:	61c3      	str	r3, [r0, #28]
 8008042:	e002      	b.n	800804a <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008044:	2300      	movs	r3, #0
 8008046:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008048:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800804a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800804e:	2b00      	cmp	r3, #0
 8008050:	d055      	beq.n	80080fe <HAL_SPI_Init+0xd6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008052:	2302      	movs	r3, #2
 8008054:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8008058:	6822      	ldr	r2, [r4, #0]
 800805a:	6813      	ldr	r3, [r2, #0]
 800805c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008060:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008062:	68e3      	ldr	r3, [r4, #12]
 8008064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008068:	d94f      	bls.n	800810a <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800806a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800806c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008070:	d004      	beq.n	800807c <HAL_SPI_Init+0x54>
 8008072:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008076:	d001      	beq.n	800807c <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008078:	2300      	movs	r3, #0
 800807a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800807c:	6863      	ldr	r3, [r4, #4]
 800807e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8008082:	68a1      	ldr	r1, [r4, #8]
 8008084:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8008088:	430b      	orrs	r3, r1
 800808a:	6921      	ldr	r1, [r4, #16]
 800808c:	f001 0102 	and.w	r1, r1, #2
 8008090:	430b      	orrs	r3, r1
 8008092:	6961      	ldr	r1, [r4, #20]
 8008094:	f001 0101 	and.w	r1, r1, #1
 8008098:	430b      	orrs	r3, r1
 800809a:	69a1      	ldr	r1, [r4, #24]
 800809c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80080a0:	430b      	orrs	r3, r1
 80080a2:	69e1      	ldr	r1, [r4, #28]
 80080a4:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6a21      	ldr	r1, [r4, #32]
 80080ac:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80080b0:	430b      	orrs	r3, r1
 80080b2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80080b4:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80080b8:	6820      	ldr	r0, [r4, #0]
 80080ba:	430b      	orrs	r3, r1
 80080bc:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c4:	d024      	beq.n	8008110 <HAL_SPI_Init+0xe8>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80080c6:	8b63      	ldrh	r3, [r4, #26]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080ce:	f001 0110 	and.w	r1, r1, #16
 80080d2:	430b      	orrs	r3, r1
 80080d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080d6:	f001 0108 	and.w	r1, r1, #8
 80080da:	430b      	orrs	r3, r1
 80080dc:	68e1      	ldr	r1, [r4, #12]
 80080de:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80080e2:	430b      	orrs	r3, r1
 80080e4:	6821      	ldr	r1, [r4, #0]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80080ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f0:	d022      	beq.n	8008138 <HAL_SPI_Init+0x110>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080f2:	2000      	movs	r0, #0
 80080f4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80080fc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80080fe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8008102:	4620      	mov	r0, r4
 8008104:	f7ff ff8f 	bl	8008026 <HAL_SPI_MspInit>
 8008108:	e7a3      	b.n	8008052 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800810a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800810e:	e7ad      	b.n	800806c <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008110:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008112:	b92b      	cbnz	r3, 8008120 <HAL_SPI_Init+0xf8>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008114:	68e3      	ldr	r3, [r4, #12]
 8008116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800811a:	d90a      	bls.n	8008132 <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800811c:	2302      	movs	r3, #2
 800811e:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008120:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008122:	2b02      	cmp	r3, #2
 8008124:	d1cf      	bne.n	80080c6 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008126:	6821      	ldr	r1, [r4, #0]
 8008128:	680b      	ldr	r3, [r1, #0]
 800812a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800812e:	600b      	str	r3, [r1, #0]
 8008130:	e7c9      	b.n	80080c6 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008132:	2301      	movs	r3, #1
 8008134:	6323      	str	r3, [r4, #48]	; 0x30
 8008136:	e7f3      	b.n	8008120 <HAL_SPI_Init+0xf8>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800813c:	611a      	str	r2, [r3, #16]
 800813e:	e7d8      	b.n	80080f2 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8008140:	2001      	movs	r0, #1
}
 8008142:	4770      	bx	lr

08008144 <HAL_SPI_Transmit>:
{
 8008144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008148:	b083      	sub	sp, #12
 800814a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800814c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8008150:	2b01      	cmp	r3, #1
 8008152:	f000 810f 	beq.w	8008374 <HAL_SPI_Transmit+0x230>
 8008156:	4604      	mov	r4, r0
 8008158:	4688      	mov	r8, r1
 800815a:	4691      	mov	r9, r2
 800815c:	2301      	movs	r3, #1
 800815e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8008162:	f7fd fed5 	bl	8005f10 <HAL_GetTick>
 8008166:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008168:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800816c:	b2f6      	uxtb	r6, r6
 800816e:	2e01      	cmp	r6, #1
 8008170:	f040 80ed 	bne.w	800834e <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 8008174:	f1b8 0f00 	cmp.w	r8, #0
 8008178:	f000 80ea 	beq.w	8008350 <HAL_SPI_Transmit+0x20c>
 800817c:	f1b9 0f00 	cmp.w	r9, #0
 8008180:	f000 80e6 	beq.w	8008350 <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008184:	2303      	movs	r3, #3
 8008186:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800818a:	2300      	movs	r3, #0
 800818c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800818e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008192:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008196:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800819a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800819c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80081a0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80081a4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80081a6:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081a8:	68a3      	ldr	r3, [r4, #8]
 80081aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ae:	d022      	beq.n	80081f6 <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b6:	d029      	beq.n	800820c <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80081c0:	d103      	bne.n	80081ca <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081ca:	68e3      	ldr	r3, [r4, #12]
 80081cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80081d0:	d94d      	bls.n	800826e <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081d2:	6863      	ldr	r3, [r4, #4]
 80081d4:	b113      	cbz	r3, 80081dc <HAL_SPI_Transmit+0x98>
 80081d6:	f1b9 0f01 	cmp.w	r9, #1
 80081da:	d12e      	bne.n	800823a <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	8812      	ldrh	r2, [r2, #0]
 80081e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081e6:	3302      	adds	r3, #2
 80081e8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80081ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80081f4:	e021      	b.n	800823a <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80081f6:	6822      	ldr	r2, [r4, #0]
 80081f8:	6813      	ldr	r3, [r2, #0]
 80081fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fe:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	e7d1      	b.n	80081b0 <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 800820c:	6822      	ldr	r2, [r4, #0]
 800820e:	6813      	ldr	r3, [r2, #0]
 8008210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	6822      	ldr	r2, [r4, #0]
 8008218:	6813      	ldr	r3, [r2, #0]
 800821a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	e7ca      	b.n	80081b8 <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008222:	f7fd fe75 	bl	8005f10 <HAL_GetTick>
 8008226:	1bc0      	subs	r0, r0, r7
 8008228:	42a8      	cmp	r0, r5
 800822a:	d303      	bcc.n	8008234 <HAL_SPI_Transmit+0xf0>
 800822c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008230:	f040 8098 	bne.w	8008364 <HAL_SPI_Transmit+0x220>
 8008234:	2d00      	cmp	r5, #0
 8008236:	f000 8097 	beq.w	8008368 <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 800823a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800823c:	b29b      	uxth	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d066      	beq.n	8008310 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	f012 0f02 	tst.w	r2, #2
 800824a:	d0ea      	beq.n	8008222 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800824c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800824e:	8812      	ldrh	r2, [r2, #0]
 8008250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008254:	3302      	adds	r3, #2
 8008256:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008258:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800825c:	fa1f fc8c 	uxth.w	ip, ip
 8008260:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008264:	fa1f fc8c 	uxth.w	ip, ip
 8008268:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800826c:	e7e5      	b.n	800823a <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800826e:	6863      	ldr	r3, [r4, #4]
 8008270:	b113      	cbz	r3, 8008278 <HAL_SPI_Transmit+0x134>
 8008272:	f1b9 0f01 	cmp.w	r9, #1
 8008276:	d133      	bne.n	80082e0 <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 8008278:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800827a:	b29b      	uxth	r3, r3
 800827c:	2b01      	cmp	r3, #1
 800827e:	d90c      	bls.n	800829a <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008280:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	8812      	ldrh	r2, [r2, #0]
 8008286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008288:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800828a:	3302      	adds	r3, #2
 800828c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800828e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b02      	subs	r3, #2
 8008294:	b29b      	uxth	r3, r3
 8008296:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008298:	e022      	b.n	80082e0 <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800829a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 80082a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082a4:	3301      	adds	r3, #1
 80082a6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80082a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80082b2:	e015      	b.n	80082e0 <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 80082ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082bc:	3301      	adds	r3, #1
 80082be:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80082c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80082ca:	e009      	b.n	80082e0 <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082cc:	f7fd fe20 	bl	8005f10 <HAL_GetTick>
 80082d0:	1bc0      	subs	r0, r0, r7
 80082d2:	42a8      	cmp	r0, r5
 80082d4:	d302      	bcc.n	80082dc <HAL_SPI_Transmit+0x198>
 80082d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80082da:	d147      	bne.n	800836c <HAL_SPI_Transmit+0x228>
 80082dc:	2d00      	cmp	r5, #0
 80082de:	d047      	beq.n	8008370 <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 80082e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	b1a3      	cbz	r3, 8008310 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082e6:	6822      	ldr	r2, [r4, #0]
 80082e8:	6893      	ldr	r3, [r2, #8]
 80082ea:	f013 0f02 	tst.w	r3, #2
 80082ee:	d0ed      	beq.n	80082cc <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 80082f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d9dd      	bls.n	80082b4 <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008300:	3302      	adds	r3, #2
 8008302:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008304:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b02      	subs	r3, #2
 800830a:	b29b      	uxth	r3, r3
 800830c:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800830e:	e7e7      	b.n	80082e0 <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008316:	d014      	beq.n	8008342 <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008318:	463a      	mov	r2, r7
 800831a:	4629      	mov	r1, r5
 800831c:	4620      	mov	r0, r4
 800831e:	f7ff fe51 	bl	8007fc4 <SPI_EndRxTxTransaction>
 8008322:	b108      	cbz	r0, 8008328 <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008324:	2320      	movs	r3, #32
 8008326:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008328:	68a3      	ldr	r3, [r4, #8]
 800832a:	b933      	cbnz	r3, 800833a <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	9201      	str	r2, [sp, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800833a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800833c:	b943      	cbnz	r3, 8008350 <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800833e:	2600      	movs	r6, #0
 8008340:	e006      	b.n	8008350 <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008342:	6822      	ldr	r2, [r4, #0]
 8008344:	6813      	ldr	r3, [r2, #0]
 8008346:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	e7e4      	b.n	8008318 <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 800834e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8008350:	2301      	movs	r3, #1
 8008352:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008356:	2300      	movs	r3, #0
 8008358:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800835c:	4630      	mov	r0, r6
 800835e:	b003      	add	sp, #12
 8008360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8008364:	2603      	movs	r6, #3
 8008366:	e7f3      	b.n	8008350 <HAL_SPI_Transmit+0x20c>
 8008368:	2603      	movs	r6, #3
 800836a:	e7f1      	b.n	8008350 <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 800836c:	2603      	movs	r6, #3
 800836e:	e7ef      	b.n	8008350 <HAL_SPI_Transmit+0x20c>
 8008370:	2603      	movs	r6, #3
 8008372:	e7ed      	b.n	8008350 <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 8008374:	2602      	movs	r6, #2
 8008376:	e7f1      	b.n	800835c <HAL_SPI_Transmit+0x218>

08008378 <HAL_SPI_TransmitReceive>:
{
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	b085      	sub	sp, #20
 800837e:	461f      	mov	r7, r3
 8008380:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  __IO uint32_t tmpreg = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 8008386:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800838a:	2b01      	cmp	r3, #1
 800838c:	f000 81f7 	beq.w	800877e <HAL_SPI_TransmitReceive+0x406>
 8008390:	4604      	mov	r4, r0
 8008392:	468a      	mov	sl, r1
 8008394:	4693      	mov	fp, r2
 8008396:	2301      	movs	r3, #1
 8008398:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800839c:	f7fd fdb8 	bl	8005f10 <HAL_GetTick>
 80083a0:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80083a2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80083a6:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80083a8:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80083aa:	6822      	ldr	r2, [r4, #0]
 80083ac:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80083b0:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d00a      	beq.n	80083ce <HAL_SPI_TransmitReceive+0x56>
 80083b8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80083bc:	f040 81c4 	bne.w	8008748 <HAL_SPI_TransmitReceive+0x3d0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083c0:	68a1      	ldr	r1, [r4, #8]
 80083c2:	2900      	cmp	r1, #0
 80083c4:	f040 81cb 	bne.w	800875e <HAL_SPI_TransmitReceive+0x3e6>
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	f040 81ca 	bne.w	8008762 <HAL_SPI_TransmitReceive+0x3ea>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083ce:	f1ba 0f00 	cmp.w	sl, #0
 80083d2:	f000 81c8 	beq.w	8008766 <HAL_SPI_TransmitReceive+0x3ee>
 80083d6:	f1bb 0f00 	cmp.w	fp, #0
 80083da:	f000 81c6 	beq.w	800876a <HAL_SPI_TransmitReceive+0x3f2>
 80083de:	2f00      	cmp	r7, #0
 80083e0:	f000 81c5 	beq.w	800876e <HAL_SPI_TransmitReceive+0x3f6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083e4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d002      	beq.n	80083f4 <HAL_SPI_TransmitReceive+0x7c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083ee:	2305      	movs	r3, #5
 80083f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083f8:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80083fc:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008400:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008404:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008408:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800840a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800840c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800840e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008410:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008416:	d029      	beq.n	800846c <HAL_SPI_TransmitReceive+0xf4>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008418:	68e3      	ldr	r3, [r4, #12]
 800841a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800841e:	d801      	bhi.n	8008424 <HAL_SPI_TransmitReceive+0xac>
 8008420:	2f01      	cmp	r7, #1
 8008422:	d92d      	bls.n	8008480 <HAL_SPI_TransmitReceive+0x108>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008424:	6822      	ldr	r2, [r4, #0]
 8008426:	6853      	ldr	r3, [r2, #4]
 8008428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800842c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008436:	d103      	bne.n	8008440 <HAL_SPI_TransmitReceive+0xc8>
    __HAL_SPI_ENABLE(hspi);
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800843e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008440:	68e3      	ldr	r3, [r4, #12]
 8008442:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008446:	d97d      	bls.n	8008544 <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	b10b      	cbz	r3, 8008450 <HAL_SPI_TransmitReceive+0xd8>
 800844c:	2f01      	cmp	r7, #1
 800844e:	d10b      	bne.n	8008468 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008450:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	8812      	ldrh	r2, [r2, #0]
 8008456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008458:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800845a:	3302      	adds	r3, #2
 800845c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800845e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008460:	b29b      	uxth	r3, r3
 8008462:	3b01      	subs	r3, #1
 8008464:	b29b      	uxth	r3, r3
 8008466:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8008468:	2701      	movs	r7, #1
 800846a:	e042      	b.n	80084f2 <HAL_SPI_TransmitReceive+0x17a>
    SPI_RESET_CRC(hspi);
 800846c:	6813      	ldr	r3, [r2, #0]
 800846e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	6822      	ldr	r2, [r4, #0]
 8008476:	6813      	ldr	r3, [r2, #0]
 8008478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	e7cb      	b.n	8008418 <HAL_SPI_TransmitReceive+0xa0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008480:	6822      	ldr	r2, [r4, #0]
 8008482:	6853      	ldr	r3, [r2, #4]
 8008484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008488:	6053      	str	r3, [r2, #4]
 800848a:	e7d0      	b.n	800842e <HAL_SPI_TransmitReceive+0xb6>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800848c:	f018 0f04 	tst.w	r8, #4
 8008490:	d107      	bne.n	80084a2 <HAL_SPI_TransmitReceive+0x12a>
 8008492:	f019 0f08 	tst.w	r9, #8
 8008496:	d004      	beq.n	80084a2 <HAL_SPI_TransmitReceive+0x12a>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084a0:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	6813      	ldr	r3, [r2, #0]
 80084a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084aa:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80084ac:	2700      	movs	r7, #0
 80084ae:	e000      	b.n	80084b2 <HAL_SPI_TransmitReceive+0x13a>
 80084b0:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	689a      	ldr	r2, [r3, #8]
 80084b6:	f012 0f01 	tst.w	r2, #1
 80084ba:	d011      	beq.n	80084e0 <HAL_SPI_TransmitReceive+0x168>
 80084bc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80084c0:	b292      	uxth	r2, r2
 80084c2:	b16a      	cbz	r2, 80084e0 <HAL_SPI_TransmitReceive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084c4:	68da      	ldr	r2, [r3, #12]
 80084c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084cc:	3302      	adds	r3, #2
 80084ce:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80084d0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80084de:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084e0:	f7fd fd16 	bl	8005f10 <HAL_GetTick>
 80084e4:	1b80      	subs	r0, r0, r6
 80084e6:	42a8      	cmp	r0, r5
 80084e8:	d303      	bcc.n	80084f2 <HAL_SPI_TransmitReceive+0x17a>
 80084ea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80084ee:	f040 8140 	bne.w	8008772 <HAL_SPI_TransmitReceive+0x3fa>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	b92b      	cbnz	r3, 8008504 <HAL_SPI_TransmitReceive+0x18c>
 80084f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 80d1 	beq.w	80086a6 <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	f012 0f02 	tst.w	r2, #2
 800850c:	d0d1      	beq.n	80084b2 <HAL_SPI_TransmitReceive+0x13a>
 800850e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008510:	b292      	uxth	r2, r2
 8008512:	2a00      	cmp	r2, #0
 8008514:	d0cd      	beq.n	80084b2 <HAL_SPI_TransmitReceive+0x13a>
 8008516:	2f00      	cmp	r7, #0
 8008518:	d0cb      	beq.n	80084b2 <HAL_SPI_TransmitReceive+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800851a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800851c:	8812      	ldrh	r2, [r2, #0]
 800851e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008522:	3302      	adds	r3, #2
 8008524:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8008526:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29b      	uxth	r3, r3
 800852e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008530:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1bb      	bne.n	80084b0 <HAL_SPI_TransmitReceive+0x138>
 8008538:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800853a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853e:	d0a5      	beq.n	800848c <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8008540:	2700      	movs	r7, #0
 8008542:	e7b6      	b.n	80084b2 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008544:	6863      	ldr	r3, [r4, #4]
 8008546:	b10b      	cbz	r3, 800854c <HAL_SPI_TransmitReceive+0x1d4>
 8008548:	2f01      	cmp	r7, #1
 800854a:	d10f      	bne.n	800856c <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 800854c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800854e:	b29b      	uxth	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	d90d      	bls.n	8008570 <HAL_SPI_TransmitReceive+0x1f8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008554:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	8812      	ldrh	r2, [r2, #0]
 800855a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800855c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800855e:	3302      	adds	r3, #2
 8008560:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008562:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008564:	b29b      	uxth	r3, r3
 8008566:	3b02      	subs	r3, #2
 8008568:	b29b      	uxth	r3, r3
 800856a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800856c:	2701      	movs	r7, #1
 800856e:	e065      	b.n	800863c <HAL_SPI_TransmitReceive+0x2c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008570:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	7812      	ldrb	r2, [r2, #0]
 8008576:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8008578:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800857a:	3301      	adds	r3, #1
 800857c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800857e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29b      	uxth	r3, r3
 8008586:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8008588:	e7f0      	b.n	800856c <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->TxXferCount > 1U)
 800858a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800858c:	b292      	uxth	r2, r2
 800858e:	2a01      	cmp	r2, #1
 8008590:	d913      	bls.n	80085ba <HAL_SPI_TransmitReceive+0x242>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008592:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008594:	8812      	ldrh	r2, [r2, #0]
 8008596:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008598:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800859a:	3302      	adds	r3, #2
 800859c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800859e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b02      	subs	r3, #2
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80085a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	bb1b      	cbnz	r3, 80085f6 <HAL_SPI_TransmitReceive+0x27e>
 80085ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b4:	d00d      	beq.n	80085d2 <HAL_SPI_TransmitReceive+0x25a>
        txallowed = 0U;
 80085b6:	2700      	movs	r7, #0
 80085b8:	e052      	b.n	8008660 <HAL_SPI_TransmitReceive+0x2e8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085bc:	7812      	ldrb	r2, [r2, #0]
 80085be:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80085c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085c2:	3301      	adds	r3, #1
 80085c4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80085c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	3b01      	subs	r3, #1
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80085d0:	e7ea      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x230>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80085d2:	f018 0f04 	tst.w	r8, #4
 80085d6:	d107      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x270>
 80085d8:	f019 0f08 	tst.w	r9, #8
 80085dc:	d004      	beq.n	80085e8 <HAL_SPI_TransmitReceive+0x270>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80085de:	6822      	ldr	r2, [r4, #0]
 80085e0:	6813      	ldr	r3, [r2, #0]
 80085e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80085e6:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80085e8:	6822      	ldr	r2, [r4, #0]
 80085ea:	6813      	ldr	r3, [r2, #0]
 80085ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085f0:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80085f2:	2700      	movs	r7, #0
 80085f4:	e034      	b.n	8008660 <HAL_SPI_TransmitReceive+0x2e8>
 80085f6:	2700      	movs	r7, #0
 80085f8:	e032      	b.n	8008660 <HAL_SPI_TransmitReceive+0x2e8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	6853      	ldr	r3, [r2, #4]
 80085fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008602:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8008604:	2701      	movs	r7, #1
 8008606:	e00d      	b.n	8008624 <HAL_SPI_TransmitReceive+0x2ac>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008608:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800860a:	7b1b      	ldrb	r3, [r3, #12]
 800860c:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800860e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008610:	3301      	adds	r3, #1
 8008612:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8008614:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008618:	b29b      	uxth	r3, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	b29b      	uxth	r3, r3
 800861e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8008622:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008624:	f7fd fc74 	bl	8005f10 <HAL_GetTick>
 8008628:	1b80      	subs	r0, r0, r6
 800862a:	42a8      	cmp	r0, r5
 800862c:	d303      	bcc.n	8008636 <HAL_SPI_TransmitReceive+0x2be>
 800862e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008632:	f040 80a0 	bne.w	8008776 <HAL_SPI_TransmitReceive+0x3fe>
 8008636:	2d00      	cmp	r5, #0
 8008638:	f000 809f 	beq.w	800877a <HAL_SPI_TransmitReceive+0x402>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800863c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800863e:	b29b      	uxth	r3, r3
 8008640:	b923      	cbnz	r3, 800864c <HAL_SPI_TransmitReceive+0x2d4>
 8008642:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d02c      	beq.n	80086a6 <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	f012 0f02 	tst.w	r2, #2
 8008654:	d004      	beq.n	8008660 <HAL_SPI_TransmitReceive+0x2e8>
 8008656:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008658:	b292      	uxth	r2, r2
 800865a:	b10a      	cbz	r2, 8008660 <HAL_SPI_TransmitReceive+0x2e8>
 800865c:	2f00      	cmp	r7, #0
 800865e:	d194      	bne.n	800858a <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	f012 0f01 	tst.w	r2, #1
 8008668:	d0dc      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x2ac>
 800866a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800866e:	b292      	uxth	r2, r2
 8008670:	2a00      	cmp	r2, #0
 8008672:	d0d7      	beq.n	8008624 <HAL_SPI_TransmitReceive+0x2ac>
        if (hspi->RxXferCount > 1U)
 8008674:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8008678:	b292      	uxth	r2, r2
 800867a:	2a01      	cmp	r2, #1
 800867c:	d9c4      	bls.n	8008608 <HAL_SPI_TransmitReceive+0x290>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008682:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008686:	3302      	adds	r3, #2
 8008688:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800868a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800868e:	b29b      	uxth	r3, r3
 8008690:	3b02      	subs	r3, #2
 8008692:	b29b      	uxth	r3, r3
 8008694:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008698:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d9ab      	bls.n	80085fa <HAL_SPI_TransmitReceive+0x282>
        txallowed = 1U;
 80086a2:	2701      	movs	r7, #1
 80086a4:	e7be      	b.n	8008624 <HAL_SPI_TransmitReceive+0x2ac>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ac:	d017      	beq.n	80086de <HAL_SPI_TransmitReceive+0x366>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	f012 0f10 	tst.w	r2, #16
 80086b6:	d045      	beq.n	8008744 <HAL_SPI_TransmitReceive+0x3cc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80086b8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80086ba:	f042 0202 	orr.w	r2, r2, #2
 80086be:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80086c0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80086c4:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 80086c6:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086c8:	4632      	mov	r2, r6
 80086ca:	4629      	mov	r1, r5
 80086cc:	4620      	mov	r0, r4
 80086ce:	f7ff fc79 	bl	8007fc4 <SPI_EndRxTxTransaction>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d039      	beq.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086d6:	2320      	movs	r3, #32
 80086d8:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80086da:	2701      	movs	r7, #1
 80086dc:	e035      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80086de:	9600      	str	r6, [sp, #0]
 80086e0:	462b      	mov	r3, r5
 80086e2:	2201      	movs	r2, #1
 80086e4:	4611      	mov	r1, r2
 80086e6:	4620      	mov	r0, r4
 80086e8:	f7ff fb92 	bl	8007e10 <SPI_WaitFlagStateUntilTimeout>
 80086ec:	b9c8      	cbnz	r0, 8008722 <HAL_SPI_TransmitReceive+0x3aa>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086ee:	68e3      	ldr	r3, [r4, #12]
 80086f0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80086f4:	d01b      	beq.n	800872e <HAL_SPI_TransmitReceive+0x3b6>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	7b1b      	ldrb	r3, [r3, #12]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80086fe:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008702:	2b02      	cmp	r3, #2
 8008704:	d1d3      	bne.n	80086ae <HAL_SPI_TransmitReceive+0x336>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008706:	9600      	str	r6, [sp, #0]
 8008708:	462b      	mov	r3, r5
 800870a:	2201      	movs	r2, #1
 800870c:	4611      	mov	r1, r2
 800870e:	4620      	mov	r0, r4
 8008710:	f7ff fb7e 	bl	8007e10 <SPI_WaitFlagStateUntilTimeout>
 8008714:	b980      	cbnz	r0, 8008738 <HAL_SPI_TransmitReceive+0x3c0>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	7b1b      	ldrb	r3, [r3, #12]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	e7c5      	b.n	80086ae <HAL_SPI_TransmitReceive+0x336>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008722:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008724:	f043 0302 	orr.w	r3, r3, #2
 8008728:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800872a:	2703      	movs	r7, #3
      goto error;
 800872c:	e00d      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
      tmpreg = READ_REG(hspi->Instance->DR);
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	e7ba      	b.n	80086ae <HAL_SPI_TransmitReceive+0x336>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008738:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800873a:	f043 0302 	orr.w	r3, r3, #2
 800873e:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8008740:	2703      	movs	r7, #3
          goto error;
 8008742:	e002      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008744:	2700      	movs	r7, #0
 8008746:	e7bf      	b.n	80086c8 <HAL_SPI_TransmitReceive+0x350>
    errorcode = HAL_BUSY;
 8008748:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 800874a:	2301      	movs	r3, #1
 800874c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008750:	2300      	movs	r3, #0
 8008752:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8008756:	4638      	mov	r0, r7
 8008758:	b005      	add	sp, #20
 800875a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 800875e:	2702      	movs	r7, #2
 8008760:	e7f3      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
 8008762:	2702      	movs	r7, #2
 8008764:	e7f1      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
    errorcode = HAL_ERROR;
 8008766:	2701      	movs	r7, #1
 8008768:	e7ef      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
 800876a:	2701      	movs	r7, #1
 800876c:	e7ed      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
 800876e:	2701      	movs	r7, #1
 8008770:	e7eb      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 8008772:	2703      	movs	r7, #3
 8008774:	e7e9      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 8008776:	2703      	movs	r7, #3
 8008778:	e7e7      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
 800877a:	2703      	movs	r7, #3
 800877c:	e7e5      	b.n	800874a <HAL_SPI_TransmitReceive+0x3d2>
  __HAL_LOCK(hspi);
 800877e:	2702      	movs	r7, #2
 8008780:	e7e9      	b.n	8008756 <HAL_SPI_TransmitReceive+0x3de>

08008782 <HAL_SPI_GetState>:
  return hspi->State;
 8008782:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8008786:	4770      	bx	lr

08008788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008788:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800878a:	6a03      	ldr	r3, [r0, #32]
 800878c:	f023 0301 	bic.w	r3, r3, #1
 8008790:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008792:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008794:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008796:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800879c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087a0:	680d      	ldr	r5, [r1, #0]
 80087a2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087a4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087a8:	688b      	ldr	r3, [r1, #8]
 80087aa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087ac:	4a1c      	ldr	r2, [pc, #112]	; (8008820 <TIM_OC1_SetConfig+0x98>)
 80087ae:	4290      	cmp	r0, r2
 80087b0:	d00f      	beq.n	80087d2 <TIM_OC1_SetConfig+0x4a>
 80087b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087b6:	4290      	cmp	r0, r2
 80087b8:	d00b      	beq.n	80087d2 <TIM_OC1_SetConfig+0x4a>
 80087ba:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80087be:	4290      	cmp	r0, r2
 80087c0:	d007      	beq.n	80087d2 <TIM_OC1_SetConfig+0x4a>
 80087c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087c6:	4290      	cmp	r0, r2
 80087c8:	d003      	beq.n	80087d2 <TIM_OC1_SetConfig+0x4a>
 80087ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087ce:	4290      	cmp	r0, r2
 80087d0:	d105      	bne.n	80087de <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087d2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087d6:	68ca      	ldr	r2, [r1, #12]
 80087d8:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087da:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087de:	4a10      	ldr	r2, [pc, #64]	; (8008820 <TIM_OC1_SetConfig+0x98>)
 80087e0:	4290      	cmp	r0, r2
 80087e2:	d00f      	beq.n	8008804 <TIM_OC1_SetConfig+0x7c>
 80087e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e8:	4290      	cmp	r0, r2
 80087ea:	d00b      	beq.n	8008804 <TIM_OC1_SetConfig+0x7c>
 80087ec:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80087f0:	4290      	cmp	r0, r2
 80087f2:	d007      	beq.n	8008804 <TIM_OC1_SetConfig+0x7c>
 80087f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087f8:	4290      	cmp	r0, r2
 80087fa:	d003      	beq.n	8008804 <TIM_OC1_SetConfig+0x7c>
 80087fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008800:	4290      	cmp	r0, r2
 8008802:	d105      	bne.n	8008810 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008804:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008808:	694a      	ldr	r2, [r1, #20]
 800880a:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800880c:	698c      	ldr	r4, [r1, #24]
 800880e:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008810:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008812:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008814:	684a      	ldr	r2, [r1, #4]
 8008816:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008818:	6203      	str	r3, [r0, #32]
}
 800881a:	bc30      	pop	{r4, r5}
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40012c00 	.word	0x40012c00

08008824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008824:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008826:	6a03      	ldr	r3, [r0, #32]
 8008828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800882c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800882e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008830:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008832:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008834:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008838:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800883c:	680d      	ldr	r5, [r1, #0]
 800883e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008844:	688a      	ldr	r2, [r1, #8]
 8008846:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800884a:	4a18      	ldr	r2, [pc, #96]	; (80088ac <TIM_OC3_SetConfig+0x88>)
 800884c:	4290      	cmp	r0, r2
 800884e:	d003      	beq.n	8008858 <TIM_OC3_SetConfig+0x34>
 8008850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008854:	4290      	cmp	r0, r2
 8008856:	d106      	bne.n	8008866 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800885c:	68ca      	ldr	r2, [r1, #12]
 800885e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008866:	4a11      	ldr	r2, [pc, #68]	; (80088ac <TIM_OC3_SetConfig+0x88>)
 8008868:	4290      	cmp	r0, r2
 800886a:	d00f      	beq.n	800888c <TIM_OC3_SetConfig+0x68>
 800886c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008870:	4290      	cmp	r0, r2
 8008872:	d00b      	beq.n	800888c <TIM_OC3_SetConfig+0x68>
 8008874:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008878:	4290      	cmp	r0, r2
 800887a:	d007      	beq.n	800888c <TIM_OC3_SetConfig+0x68>
 800887c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008880:	4290      	cmp	r0, r2
 8008882:	d003      	beq.n	800888c <TIM_OC3_SetConfig+0x68>
 8008884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008888:	4290      	cmp	r0, r2
 800888a:	d107      	bne.n	800889c <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800888c:	f424 5240 	bic.w	r2, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008890:	694c      	ldr	r4, [r1, #20]
 8008892:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008896:	698c      	ldr	r4, [r1, #24]
 8008898:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800889e:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088a0:	684a      	ldr	r2, [r1, #4]
 80088a2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088a4:	6203      	str	r3, [r0, #32]
}
 80088a6:	bc30      	pop	{r4, r5}
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	40012c00 	.word	0x40012c00

080088b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088b2:	6a03      	ldr	r3, [r0, #32]
 80088b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80088c4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088c8:	680d      	ldr	r5, [r1, #0]
 80088ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088d2:	688d      	ldr	r5, [r1, #8]
 80088d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d8:	4d0f      	ldr	r5, [pc, #60]	; (8008918 <TIM_OC4_SetConfig+0x68>)
 80088da:	42a8      	cmp	r0, r5
 80088dc:	d00f      	beq.n	80088fe <TIM_OC4_SetConfig+0x4e>
 80088de:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80088e2:	42a8      	cmp	r0, r5
 80088e4:	d00b      	beq.n	80088fe <TIM_OC4_SetConfig+0x4e>
 80088e6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80088ea:	42a8      	cmp	r0, r5
 80088ec:	d007      	beq.n	80088fe <TIM_OC4_SetConfig+0x4e>
 80088ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80088f2:	42a8      	cmp	r0, r5
 80088f4:	d003      	beq.n	80088fe <TIM_OC4_SetConfig+0x4e>
 80088f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80088fa:	42a8      	cmp	r0, r5
 80088fc:	d104      	bne.n	8008908 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088fe:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008902:	694d      	ldr	r5, [r1, #20]
 8008904:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008908:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800890a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800890c:	684a      	ldr	r2, [r1, #4]
 800890e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008910:	6203      	str	r3, [r0, #32]
}
 8008912:	bc30      	pop	{r4, r5}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40012c00 	.word	0x40012c00

0800891c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800891c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800891e:	6a03      	ldr	r3, [r0, #32]
 8008920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008924:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008926:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008928:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800892a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800892c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008930:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008934:	680d      	ldr	r5, [r1, #0]
 8008936:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800893c:	688a      	ldr	r2, [r1, #8]
 800893e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008942:	4a0f      	ldr	r2, [pc, #60]	; (8008980 <TIM_OC5_SetConfig+0x64>)
 8008944:	4290      	cmp	r0, r2
 8008946:	d00f      	beq.n	8008968 <TIM_OC5_SetConfig+0x4c>
 8008948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800894c:	4290      	cmp	r0, r2
 800894e:	d00b      	beq.n	8008968 <TIM_OC5_SetConfig+0x4c>
 8008950:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008954:	4290      	cmp	r0, r2
 8008956:	d007      	beq.n	8008968 <TIM_OC5_SetConfig+0x4c>
 8008958:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800895c:	4290      	cmp	r0, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC5_SetConfig+0x4c>
 8008960:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008964:	4290      	cmp	r0, r2
 8008966:	d104      	bne.n	8008972 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008968:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800896c:	694a      	ldr	r2, [r1, #20]
 800896e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008972:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008974:	6545      	str	r5, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008976:	684a      	ldr	r2, [r1, #4]
 8008978:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800897a:	6203      	str	r3, [r0, #32]
}
 800897c:	bc30      	pop	{r4, r5}
 800897e:	4770      	bx	lr
 8008980:	40012c00 	.word	0x40012c00

08008984 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008984:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008986:	6a03      	ldr	r3, [r0, #32]
 8008988:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800898c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008990:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008992:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008994:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008998:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800899c:	680d      	ldr	r5, [r1, #0]
 800899e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089a6:	688d      	ldr	r5, [r1, #8]
 80089a8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ac:	4d0f      	ldr	r5, [pc, #60]	; (80089ec <TIM_OC6_SetConfig+0x68>)
 80089ae:	42a8      	cmp	r0, r5
 80089b0:	d00f      	beq.n	80089d2 <TIM_OC6_SetConfig+0x4e>
 80089b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80089b6:	42a8      	cmp	r0, r5
 80089b8:	d00b      	beq.n	80089d2 <TIM_OC6_SetConfig+0x4e>
 80089ba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80089be:	42a8      	cmp	r0, r5
 80089c0:	d007      	beq.n	80089d2 <TIM_OC6_SetConfig+0x4e>
 80089c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80089c6:	42a8      	cmp	r0, r5
 80089c8:	d003      	beq.n	80089d2 <TIM_OC6_SetConfig+0x4e>
 80089ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80089ce:	42a8      	cmp	r0, r5
 80089d0:	d104      	bne.n	80089dc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089d2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089d6:	694d      	ldr	r5, [r1, #20]
 80089d8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089de:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089e0:	684a      	ldr	r2, [r1, #4]
 80089e2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e4:	6203      	str	r3, [r0, #32]
}
 80089e6:	bc30      	pop	{r4, r5}
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40012c00 	.word	0x40012c00

080089f0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80089f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d136      	bne.n	8008a68 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 80089fa:	2302      	movs	r3, #2
 80089fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a00:	6802      	ldr	r2, [r0, #0]
 8008a02:	68d3      	ldr	r3, [r2, #12]
 8008a04:	f043 0301 	orr.w	r3, r3, #1
 8008a08:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a0a:	6803      	ldr	r3, [r0, #0]
 8008a0c:	4a19      	ldr	r2, [pc, #100]	; (8008a74 <HAL_TIM_Base_Start_IT+0x84>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d01c      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0x5c>
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a16:	d019      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0x5c>
 8008a18:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d015      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0x5c>
 8008a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d011      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0x5c>
 8008a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00d      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0x5c>
 8008a30:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d009      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0x5c>
 8008a38:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d005      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a48:	2000      	movs	r0, #0
 8008a4a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a4c:	6899      	ldr	r1, [r3, #8]
 8008a4e:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <HAL_TIM_Base_Start_IT+0x88>)
 8008a50:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a52:	2a06      	cmp	r2, #6
 8008a54:	d00a      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0x7c>
 8008a56:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008a5a:	d009      	beq.n	8008a70 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a64:	2000      	movs	r0, #0
 8008a66:	4770      	bx	lr
    return HAL_ERROR;
 8008a68:	2001      	movs	r0, #1
 8008a6a:	4770      	bx	lr
  return HAL_OK;
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	4770      	bx	lr
 8008a70:	2000      	movs	r0, #0
}
 8008a72:	4770      	bx	lr
 8008a74:	40012c00 	.word	0x40012c00
 8008a78:	00010007 	.word	0x00010007

08008a7c <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8008a7c:	290c      	cmp	r1, #12
 8008a7e:	d814      	bhi.n	8008aaa <HAL_TIM_ReadCapturedValue+0x2e>
 8008a80:	e8df f001 	tbb	[pc, r1]
 8008a84:	13131307 	.word	0x13131307
 8008a88:	1313130a 	.word	0x1313130a
 8008a8c:	1313130d 	.word	0x1313130d
 8008a90:	10          	.byte	0x10
 8008a91:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8008a92:	6803      	ldr	r3, [r0, #0]
 8008a94:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8008a96:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8008a98:	6803      	ldr	r3, [r0, #0]
 8008a9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8008a9c:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8008a9e:	6803      	ldr	r3, [r0, #0]
 8008aa0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8008aa2:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8008aa4:	6803      	ldr	r3, [r0, #0]
 8008aa6:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8008aa8:	4770      	bx	lr
  switch (Channel)
 8008aaa:	2000      	movs	r0, #0
}
 8008aac:	4770      	bx	lr

08008aae <HAL_TIM_IC_CaptureCallback>:
}
 8008aae:	4770      	bx	lr

08008ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8008ab0:	4770      	bx	lr

08008ab2 <HAL_TIM_TriggerCallback>:
}
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_TIM_IRQHandler>:
{
 8008ab4:	b510      	push	{r4, lr}
 8008ab6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ab8:	6803      	ldr	r3, [r0, #0]
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	f012 0f02 	tst.w	r2, #2
 8008ac0:	d011      	beq.n	8008ae6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ac2:	68da      	ldr	r2, [r3, #12]
 8008ac4:	f012 0f02 	tst.w	r2, #2
 8008ac8:	d00d      	beq.n	8008ae6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008aca:	f06f 0202 	mvn.w	r2, #2
 8008ace:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ad4:	6803      	ldr	r3, [r0, #0]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	f013 0f03 	tst.w	r3, #3
 8008adc:	d079      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8008ade:	f7ff ffe6 	bl	8008aae <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	691a      	ldr	r2, [r3, #16]
 8008aea:	f012 0f04 	tst.w	r2, #4
 8008aee:	d012      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	f012 0f04 	tst.w	r2, #4
 8008af6:	d00e      	beq.n	8008b16 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008af8:	f06f 0204 	mvn.w	r2, #4
 8008afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008afe:	2302      	movs	r3, #2
 8008b00:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008b0a:	d068      	beq.n	8008bde <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f7ff ffce 	bl	8008aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b12:	2300      	movs	r3, #0
 8008b14:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	f012 0f08 	tst.w	r2, #8
 8008b1e:	d012      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	f012 0f08 	tst.w	r2, #8
 8008b26:	d00e      	beq.n	8008b46 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b28:	f06f 0208 	mvn.w	r2, #8
 8008b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b2e:	2304      	movs	r3, #4
 8008b30:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	f013 0f03 	tst.w	r3, #3
 8008b3a:	d057      	beq.n	8008bec <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f7ff ffb6 	bl	8008aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b42:	2300      	movs	r3, #0
 8008b44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b46:	6823      	ldr	r3, [r4, #0]
 8008b48:	691a      	ldr	r2, [r3, #16]
 8008b4a:	f012 0f10 	tst.w	r2, #16
 8008b4e:	d012      	beq.n	8008b76 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b50:	68da      	ldr	r2, [r3, #12]
 8008b52:	f012 0f10 	tst.w	r2, #16
 8008b56:	d00e      	beq.n	8008b76 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b58:	f06f 0210 	mvn.w	r2, #16
 8008b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b5e:	2308      	movs	r3, #8
 8008b60:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008b6a:	d046      	beq.n	8008bfa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f7ff ff9e 	bl	8008aae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b72:	2300      	movs	r3, #0
 8008b74:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	691a      	ldr	r2, [r3, #16]
 8008b7a:	f012 0f01 	tst.w	r2, #1
 8008b7e:	d003      	beq.n	8008b88 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	f012 0f01 	tst.w	r2, #1
 8008b86:	d13f      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	691a      	ldr	r2, [r3, #16]
 8008b8c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008b90:	d003      	beq.n	8008b9a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b92:	68da      	ldr	r2, [r3, #12]
 8008b94:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008b98:	d13d      	bne.n	8008c16 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	691a      	ldr	r2, [r3, #16]
 8008b9e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008ba2:	d003      	beq.n	8008bac <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008baa:	d13b      	bne.n	8008c24 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008bb4:	d003      	beq.n	8008bbe <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008bbc:	d139      	bne.n	8008c32 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	691a      	ldr	r2, [r3, #16]
 8008bc2:	f012 0f20 	tst.w	r2, #32
 8008bc6:	d003      	beq.n	8008bd0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	f012 0f20 	tst.w	r2, #32
 8008bce:	d137      	bne.n	8008c40 <HAL_TIM_IRQHandler+0x18c>
}
 8008bd0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd2:	f7fc f95d 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7ff ff6a 	bl	8008ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008bdc:	e781      	b.n	8008ae2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7fc f956 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7ff ff63 	bl	8008ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008bea:	e792      	b.n	8008b12 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bec:	4620      	mov	r0, r4
 8008bee:	f7fc f94f 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f7ff ff5c 	bl	8008ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008bf8:	e7a3      	b.n	8008b42 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f7fc f948 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c00:	4620      	mov	r0, r4
 8008c02:	f7ff ff55 	bl	8008ab0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c06:	e7b4      	b.n	8008b72 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c08:	f06f 0201 	mvn.w	r2, #1
 8008c0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f7fc f954 	bl	8004ebc <HAL_TIM_PeriodElapsedCallback>
 8008c14:	e7b8      	b.n	8008b88 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 fac0 	bl	80091a2 <HAL_TIMEx_BreakCallback>
 8008c22:	e7ba      	b.n	8008b9a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 faba 	bl	80091a4 <HAL_TIMEx_Break2Callback>
 8008c30:	e7bc      	b.n	8008bac <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c36:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7ff ff3a 	bl	8008ab2 <HAL_TIM_TriggerCallback>
 8008c3e:	e7be      	b.n	8008bbe <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c40:	f06f 0220 	mvn.w	r2, #32
 8008c44:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008c46:	4620      	mov	r0, r4
 8008c48:	f000 faaa 	bl	80091a0 <HAL_TIMEx_CommutCallback>
}
 8008c4c:	e7c0      	b.n	8008bd0 <HAL_TIM_IRQHandler+0x11c>
	...

08008c50 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008c50:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c52:	4a30      	ldr	r2, [pc, #192]	; (8008d14 <TIM_Base_SetConfig+0xc4>)
 8008c54:	4290      	cmp	r0, r2
 8008c56:	d012      	beq.n	8008c7e <TIM_Base_SetConfig+0x2e>
 8008c58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008c5c:	d00f      	beq.n	8008c7e <TIM_Base_SetConfig+0x2e>
 8008c5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008c62:	4290      	cmp	r0, r2
 8008c64:	d00b      	beq.n	8008c7e <TIM_Base_SetConfig+0x2e>
 8008c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c6a:	4290      	cmp	r0, r2
 8008c6c:	d007      	beq.n	8008c7e <TIM_Base_SetConfig+0x2e>
 8008c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c72:	4290      	cmp	r0, r2
 8008c74:	d003      	beq.n	8008c7e <TIM_Base_SetConfig+0x2e>
 8008c76:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008c7a:	4290      	cmp	r0, r2
 8008c7c:	d103      	bne.n	8008c86 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008c82:	684a      	ldr	r2, [r1, #4]
 8008c84:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c86:	4a23      	ldr	r2, [pc, #140]	; (8008d14 <TIM_Base_SetConfig+0xc4>)
 8008c88:	4290      	cmp	r0, r2
 8008c8a:	d01e      	beq.n	8008cca <TIM_Base_SetConfig+0x7a>
 8008c8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008c90:	d01b      	beq.n	8008cca <TIM_Base_SetConfig+0x7a>
 8008c92:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8008c96:	4290      	cmp	r0, r2
 8008c98:	d017      	beq.n	8008cca <TIM_Base_SetConfig+0x7a>
 8008c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c9e:	4290      	cmp	r0, r2
 8008ca0:	d013      	beq.n	8008cca <TIM_Base_SetConfig+0x7a>
 8008ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ca6:	4290      	cmp	r0, r2
 8008ca8:	d00f      	beq.n	8008cca <TIM_Base_SetConfig+0x7a>
 8008caa:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8008cae:	4290      	cmp	r0, r2
 8008cb0:	d00b      	beq.n	8008cca <TIM_Base_SetConfig+0x7a>
 8008cb2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008cb6:	4290      	cmp	r0, r2
 8008cb8:	d007      	beq.n	8008cca <TIM_Base_SetConfig+0x7a>
 8008cba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cbe:	4290      	cmp	r0, r2
 8008cc0:	d003      	beq.n	8008cca <TIM_Base_SetConfig+0x7a>
 8008cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cc6:	4290      	cmp	r0, r2
 8008cc8:	d103      	bne.n	8008cd2 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cce:	68ca      	ldr	r2, [r1, #12]
 8008cd0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cd6:	694a      	ldr	r2, [r1, #20]
 8008cd8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008cda:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cdc:	688b      	ldr	r3, [r1, #8]
 8008cde:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008ce0:	680b      	ldr	r3, [r1, #0]
 8008ce2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ce4:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <TIM_Base_SetConfig+0xc4>)
 8008ce6:	4298      	cmp	r0, r3
 8008ce8:	d00f      	beq.n	8008d0a <TIM_Base_SetConfig+0xba>
 8008cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cee:	4298      	cmp	r0, r3
 8008cf0:	d00b      	beq.n	8008d0a <TIM_Base_SetConfig+0xba>
 8008cf2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008cf6:	4298      	cmp	r0, r3
 8008cf8:	d007      	beq.n	8008d0a <TIM_Base_SetConfig+0xba>
 8008cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cfe:	4298      	cmp	r0, r3
 8008d00:	d003      	beq.n	8008d0a <TIM_Base_SetConfig+0xba>
 8008d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d06:	4298      	cmp	r0, r3
 8008d08:	d101      	bne.n	8008d0e <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8008d0a:	690b      	ldr	r3, [r1, #16]
 8008d0c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	6143      	str	r3, [r0, #20]
}
 8008d12:	4770      	bx	lr
 8008d14:	40012c00 	.word	0x40012c00

08008d18 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008d18:	b360      	cbz	r0, 8008d74 <HAL_TIM_Base_Init+0x5c>
{
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008d1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008d22:	b313      	cbz	r3, 8008d6a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	2302      	movs	r3, #2
 8008d26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008d30:	f7ff ff8e 	bl	8008c50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008d3e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008d42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008d46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008d4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d5a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008d5e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008d62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008d66:	2000      	movs	r0, #0
}
 8008d68:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008d6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008d6e:	f7fc fc25 	bl	80055bc <HAL_TIM_Base_MspInit>
 8008d72:	e7d7      	b.n	8008d24 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8008d74:	2001      	movs	r0, #1
}
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8008d78:	b360      	cbz	r0, 8008dd4 <HAL_TIM_OC_Init+0x5c>
{
 8008d7a:	b510      	push	{r4, lr}
 8008d7c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8008d7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008d82:	b313      	cbz	r3, 8008dca <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008d84:	2302      	movs	r3, #2
 8008d86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	f851 0b04 	ldr.w	r0, [r1], #4
 8008d90:	f7ff ff5e 	bl	8008c50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d94:	2301      	movs	r3, #1
 8008d96:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008d9e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008da2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008da6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008dbe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008dc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008dc6:	2000      	movs	r0, #0
}
 8008dc8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008dca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8008dce:	f7fc fc2d 	bl	800562c <HAL_TIM_OC_MspInit>
 8008dd2:	e7d7      	b.n	8008d84 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8008dd4:	2001      	movs	r0, #1
}
 8008dd6:	4770      	bx	lr

08008dd8 <TIM_OC2_SetConfig>:
{
 8008dd8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dda:	6a03      	ldr	r3, [r0, #32]
 8008ddc:	f023 0310 	bic.w	r3, r3, #16
 8008de0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008de2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008de4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008de6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008de8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008dec:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df0:	680d      	ldr	r5, [r1, #0]
 8008df2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8008df6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dfa:	688d      	ldr	r5, [r1, #8]
 8008dfc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e00:	4d17      	ldr	r5, [pc, #92]	; (8008e60 <TIM_OC2_SetConfig+0x88>)
 8008e02:	42a8      	cmp	r0, r5
 8008e04:	d003      	beq.n	8008e0e <TIM_OC2_SetConfig+0x36>
 8008e06:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008e0a:	42a8      	cmp	r0, r5
 8008e0c:	d106      	bne.n	8008e1c <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e12:	68cd      	ldr	r5, [r1, #12]
 8008e14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1c:	4d10      	ldr	r5, [pc, #64]	; (8008e60 <TIM_OC2_SetConfig+0x88>)
 8008e1e:	42a8      	cmp	r0, r5
 8008e20:	d00f      	beq.n	8008e42 <TIM_OC2_SetConfig+0x6a>
 8008e22:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008e26:	42a8      	cmp	r0, r5
 8008e28:	d00b      	beq.n	8008e42 <TIM_OC2_SetConfig+0x6a>
 8008e2a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008e2e:	42a8      	cmp	r0, r5
 8008e30:	d007      	beq.n	8008e42 <TIM_OC2_SetConfig+0x6a>
 8008e32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008e36:	42a8      	cmp	r0, r5
 8008e38:	d003      	beq.n	8008e42 <TIM_OC2_SetConfig+0x6a>
 8008e3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008e3e:	42a8      	cmp	r0, r5
 8008e40:	d107      	bne.n	8008e52 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e42:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e46:	694c      	ldr	r4, [r1, #20]
 8008e48:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e4c:	698c      	ldr	r4, [r1, #24]
 8008e4e:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8008e52:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008e54:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008e56:	684a      	ldr	r2, [r1, #4]
 8008e58:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008e5a:	6203      	str	r3, [r0, #32]
}
 8008e5c:	bc30      	pop	{r4, r5}
 8008e5e:	4770      	bx	lr
 8008e60:	40012c00 	.word	0x40012c00

08008e64 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8008e64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d02e      	beq.n	8008eca <HAL_TIM_OC_ConfigChannel+0x66>
{
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8008e70:	2301      	movs	r3, #1
 8008e72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008e76:	2a14      	cmp	r2, #20
 8008e78:	d80f      	bhi.n	8008e9a <HAL_TIM_OC_ConfigChannel+0x36>
 8008e7a:	e8df f002 	tbb	[pc, r2]
 8008e7e:	0e0b      	.short	0x0e0b
 8008e80:	0e120e0e 	.word	0x0e120e0e
 8008e84:	0e160e0e 	.word	0x0e160e0e
 8008e88:	0e1a0e0e 	.word	0x0e1a0e0e
 8008e8c:	0e1e0e0e 	.word	0x0e1e0e0e
 8008e90:	0e0e      	.short	0x0e0e
 8008e92:	22          	.byte	0x22
 8008e93:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e94:	6800      	ldr	r0, [r0, #0]
 8008e96:	f7ff fc77 	bl	8008788 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8008ea0:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ea2:	6800      	ldr	r0, [r0, #0]
 8008ea4:	f7ff ff98 	bl	8008dd8 <TIM_OC2_SetConfig>
      break;
 8008ea8:	e7f7      	b.n	8008e9a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	f7ff fcba 	bl	8008824 <TIM_OC3_SetConfig>
      break;
 8008eb0:	e7f3      	b.n	8008e9a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eb2:	6800      	ldr	r0, [r0, #0]
 8008eb4:	f7ff fcfc 	bl	80088b0 <TIM_OC4_SetConfig>
      break;
 8008eb8:	e7ef      	b.n	8008e9a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008eba:	6800      	ldr	r0, [r0, #0]
 8008ebc:	f7ff fd2e 	bl	800891c <TIM_OC5_SetConfig>
      break;
 8008ec0:	e7eb      	b.n	8008e9a <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ec2:	6800      	ldr	r0, [r0, #0]
 8008ec4:	f7ff fd5e 	bl	8008984 <TIM_OC6_SetConfig>
      break;
 8008ec8:	e7e7      	b.n	8008e9a <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8008eca:	2002      	movs	r0, #2
}
 8008ecc:	4770      	bx	lr

08008ece <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ece:	f001 011f 	and.w	r1, r1, #31
 8008ed2:	f04f 0c01 	mov.w	ip, #1
 8008ed6:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008eda:	6a03      	ldr	r3, [r0, #32]
 8008edc:	ea23 030c 	bic.w	r3, r3, ip
 8008ee0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ee2:	6a03      	ldr	r3, [r0, #32]
 8008ee4:	408a      	lsls	r2, r1
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	6203      	str	r3, [r0, #32]
}
 8008eea:	4770      	bx	lr

08008eec <HAL_TIM_OC_Start_IT>:
{
 8008eec:	b510      	push	{r4, lr}
 8008eee:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ef0:	2910      	cmp	r1, #16
 8008ef2:	d83c      	bhi.n	8008f6e <HAL_TIM_OC_Start_IT+0x82>
 8008ef4:	e8df f001 	tbb	[pc, r1]
 8008ef8:	3b3b3b09 	.word	0x3b3b3b09
 8008efc:	3b3b3b1f 	.word	0x3b3b3b1f
 8008f00:	3b3b3b26 	.word	0x3b3b3b26
 8008f04:	3b3b3b2d 	.word	0x3b3b3b2d
 8008f08:	34          	.byte	0x34
 8008f09:	00          	.byte	0x00
 8008f0a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	3b01      	subs	r3, #1
 8008f12:	bf18      	it	ne
 8008f14:	2301      	movne	r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f040 80b4 	bne.w	8009084 <HAL_TIM_OC_Start_IT+0x198>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f1c:	2910      	cmp	r1, #16
 8008f1e:	d84b      	bhi.n	8008fb8 <HAL_TIM_OC_Start_IT+0xcc>
 8008f20:	e8df f001 	tbb	[pc, r1]
 8008f24:	4a4a4a2c 	.word	0x4a4a4a2c
 8008f28:	4a4a4a3a 	.word	0x4a4a4a3a
 8008f2c:	4a4a4a3e 	.word	0x4a4a4a3e
 8008f30:	4a4a4a42 	.word	0x4a4a4a42
 8008f34:	46          	.byte	0x46
 8008f35:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f36:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	bf18      	it	ne
 8008f40:	2301      	movne	r3, #1
 8008f42:	e7e8      	b.n	8008f16 <HAL_TIM_OC_Start_IT+0x2a>
 8008f44:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	bf18      	it	ne
 8008f4e:	2301      	movne	r3, #1
 8008f50:	e7e1      	b.n	8008f16 <HAL_TIM_OC_Start_IT+0x2a>
 8008f52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	bf18      	it	ne
 8008f5c:	2301      	movne	r3, #1
 8008f5e:	e7da      	b.n	8008f16 <HAL_TIM_OC_Start_IT+0x2a>
 8008f60:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	3b01      	subs	r3, #1
 8008f68:	bf18      	it	ne
 8008f6a:	2301      	movne	r3, #1
 8008f6c:	e7d3      	b.n	8008f16 <HAL_TIM_OC_Start_IT+0x2a>
 8008f6e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	bf18      	it	ne
 8008f78:	2301      	movne	r3, #1
 8008f7a:	e7cc      	b.n	8008f16 <HAL_TIM_OC_Start_IT+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  switch (Channel)
 8008f82:	290c      	cmp	r1, #12
 8008f84:	d821      	bhi.n	8008fca <HAL_TIM_OC_Start_IT+0xde>
 8008f86:	e8df f001 	tbb	[pc, r1]
 8008f8a:	201b      	.short	0x201b
 8008f8c:	205d2020 	.word	0x205d2020
 8008f90:	20632020 	.word	0x20632020
 8008f94:	2020      	.short	0x2020
 8008f96:	69          	.byte	0x69
 8008f97:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f98:	2302      	movs	r3, #2
 8008f9a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008f9e:	e7f0      	b.n	8008f82 <HAL_TIM_OC_Start_IT+0x96>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008fa6:	e7ec      	b.n	8008f82 <HAL_TIM_OC_Start_IT+0x96>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008fae:	e7e8      	b.n	8008f82 <HAL_TIM_OC_Start_IT+0x96>
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb6:	e7e4      	b.n	8008f82 <HAL_TIM_OC_Start_IT+0x96>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fbe:	e7e0      	b.n	8008f82 <HAL_TIM_OC_Start_IT+0x96>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	68d3      	ldr	r3, [r2, #12]
 8008fc4:	f043 0302 	orr.w	r3, r3, #2
 8008fc8:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fca:	2201      	movs	r2, #1
 8008fcc:	6820      	ldr	r0, [r4, #0]
 8008fce:	f7ff ff7e 	bl	8008ece <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	4a2e      	ldr	r2, [pc, #184]	; (8009090 <HAL_TIM_OC_Start_IT+0x1a4>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d00f      	beq.n	8008ffa <HAL_TIM_OC_Start_IT+0x10e>
 8008fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d00b      	beq.n	8008ffa <HAL_TIM_OC_Start_IT+0x10e>
 8008fe2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d007      	beq.n	8008ffa <HAL_TIM_OC_Start_IT+0x10e>
 8008fea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d003      	beq.n	8008ffa <HAL_TIM_OC_Start_IT+0x10e>
 8008ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d103      	bne.n	8009002 <HAL_TIM_OC_Start_IT+0x116>
    __HAL_TIM_MOE_ENABLE(htim);
 8008ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009000:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	4a22      	ldr	r2, [pc, #136]	; (8009090 <HAL_TIM_OC_Start_IT+0x1a4>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d02e      	beq.n	8009068 <HAL_TIM_OC_Start_IT+0x17c>
 800900a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800900e:	d02b      	beq.n	8009068 <HAL_TIM_OC_Start_IT+0x17c>
 8009010:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009014:	4293      	cmp	r3, r2
 8009016:	d027      	beq.n	8009068 <HAL_TIM_OC_Start_IT+0x17c>
 8009018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800901c:	4293      	cmp	r3, r2
 800901e:	d023      	beq.n	8009068 <HAL_TIM_OC_Start_IT+0x17c>
 8009020:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009024:	4293      	cmp	r3, r2
 8009026:	d01f      	beq.n	8009068 <HAL_TIM_OC_Start_IT+0x17c>
 8009028:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800902c:	4293      	cmp	r3, r2
 800902e:	d01b      	beq.n	8009068 <HAL_TIM_OC_Start_IT+0x17c>
 8009030:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009034:	4293      	cmp	r3, r2
 8009036:	d017      	beq.n	8009068 <HAL_TIM_OC_Start_IT+0x17c>
    __HAL_TIM_ENABLE(htim);
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	f042 0201 	orr.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009040:	2000      	movs	r0, #0
 8009042:	e020      	b.n	8009086 <HAL_TIM_OC_Start_IT+0x19a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	68d3      	ldr	r3, [r2, #12]
 8009048:	f043 0304 	orr.w	r3, r3, #4
 800904c:	60d3      	str	r3, [r2, #12]
      break;
 800904e:	e7bc      	b.n	8008fca <HAL_TIM_OC_Start_IT+0xde>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	68d3      	ldr	r3, [r2, #12]
 8009054:	f043 0308 	orr.w	r3, r3, #8
 8009058:	60d3      	str	r3, [r2, #12]
      break;
 800905a:	e7b6      	b.n	8008fca <HAL_TIM_OC_Start_IT+0xde>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	68d3      	ldr	r3, [r2, #12]
 8009060:	f043 0310 	orr.w	r3, r3, #16
 8009064:	60d3      	str	r3, [r2, #12]
      break;
 8009066:	e7b0      	b.n	8008fca <HAL_TIM_OC_Start_IT+0xde>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009068:	6899      	ldr	r1, [r3, #8]
 800906a:	4a0a      	ldr	r2, [pc, #40]	; (8009094 <HAL_TIM_OC_Start_IT+0x1a8>)
 800906c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906e:	2a06      	cmp	r2, #6
 8009070:	d00a      	beq.n	8009088 <HAL_TIM_OC_Start_IT+0x19c>
 8009072:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009076:	d009      	beq.n	800908c <HAL_TIM_OC_Start_IT+0x1a0>
      __HAL_TIM_ENABLE(htim);
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009080:	2000      	movs	r0, #0
 8009082:	e000      	b.n	8009086 <HAL_TIM_OC_Start_IT+0x19a>
    return HAL_ERROR;
 8009084:	2001      	movs	r0, #1
}
 8009086:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8009088:	2000      	movs	r0, #0
 800908a:	e7fc      	b.n	8009086 <HAL_TIM_OC_Start_IT+0x19a>
 800908c:	2000      	movs	r0, #0
 800908e:	e7fa      	b.n	8009086 <HAL_TIM_OC_Start_IT+0x19a>
 8009090:	40012c00 	.word	0x40012c00
 8009094:	00010007 	.word	0x00010007

08009098 <HAL_TIM_OC_Stop_IT>:
{
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4605      	mov	r5, r0
 800909c:	460c      	mov	r4, r1
  switch (Channel)
 800909e:	290c      	cmp	r1, #12
 80090a0:	d80d      	bhi.n	80090be <HAL_TIM_OC_Stop_IT+0x26>
 80090a2:	e8df f001 	tbb	[pc, r1]
 80090a6:	0c07      	.short	0x0c07
 80090a8:	0c480c0c 	.word	0x0c480c0c
 80090ac:	0c4e0c0c 	.word	0x0c4e0c0c
 80090b0:	0c0c      	.short	0x0c0c
 80090b2:	54          	.byte	0x54
 80090b3:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80090b4:	6802      	ldr	r2, [r0, #0]
 80090b6:	68d3      	ldr	r3, [r2, #12]
 80090b8:	f023 0302 	bic.w	r3, r3, #2
 80090bc:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80090be:	2200      	movs	r2, #0
 80090c0:	4621      	mov	r1, r4
 80090c2:	6828      	ldr	r0, [r5, #0]
 80090c4:	f7ff ff03 	bl	8008ece <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	4a34      	ldr	r2, [pc, #208]	; (800919c <HAL_TIM_OC_Stop_IT+0x104>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d00f      	beq.n	80090f0 <HAL_TIM_OC_Stop_IT+0x58>
 80090d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00b      	beq.n	80090f0 <HAL_TIM_OC_Stop_IT+0x58>
 80090d8:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80090dc:	4293      	cmp	r3, r2
 80090de:	d007      	beq.n	80090f0 <HAL_TIM_OC_Stop_IT+0x58>
 80090e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d003      	beq.n	80090f0 <HAL_TIM_OC_Stop_IT+0x58>
 80090e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10d      	bne.n	800910c <HAL_TIM_OC_Stop_IT+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 80090f0:	6a19      	ldr	r1, [r3, #32]
 80090f2:	f241 1211 	movw	r2, #4369	; 0x1111
 80090f6:	4211      	tst	r1, r2
 80090f8:	d108      	bne.n	800910c <HAL_TIM_OC_Stop_IT+0x74>
 80090fa:	6a19      	ldr	r1, [r3, #32]
 80090fc:	f240 4244 	movw	r2, #1092	; 0x444
 8009100:	4211      	tst	r1, r2
 8009102:	d103      	bne.n	800910c <HAL_TIM_OC_Stop_IT+0x74>
 8009104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800910a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	6a19      	ldr	r1, [r3, #32]
 8009110:	f241 1211 	movw	r2, #4369	; 0x1111
 8009114:	4211      	tst	r1, r2
 8009116:	d108      	bne.n	800912a <HAL_TIM_OC_Stop_IT+0x92>
 8009118:	6a19      	ldr	r1, [r3, #32]
 800911a:	f240 4244 	movw	r2, #1092	; 0x444
 800911e:	4211      	tst	r1, r2
 8009120:	d103      	bne.n	800912a <HAL_TIM_OC_Stop_IT+0x92>
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	f022 0201 	bic.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800912a:	b9b4      	cbnz	r4, 800915a <HAL_TIM_OC_Stop_IT+0xc2>
 800912c:	2301      	movs	r3, #1
 800912e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 8009132:	2000      	movs	r0, #0
 8009134:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009136:	6802      	ldr	r2, [r0, #0]
 8009138:	68d3      	ldr	r3, [r2, #12]
 800913a:	f023 0304 	bic.w	r3, r3, #4
 800913e:	60d3      	str	r3, [r2, #12]
      break;
 8009140:	e7bd      	b.n	80090be <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009142:	6802      	ldr	r2, [r0, #0]
 8009144:	68d3      	ldr	r3, [r2, #12]
 8009146:	f023 0308 	bic.w	r3, r3, #8
 800914a:	60d3      	str	r3, [r2, #12]
      break;
 800914c:	e7b7      	b.n	80090be <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800914e:	6802      	ldr	r2, [r0, #0]
 8009150:	68d3      	ldr	r3, [r2, #12]
 8009152:	f023 0310 	bic.w	r3, r3, #16
 8009156:	60d3      	str	r3, [r2, #12]
      break;
 8009158:	e7b1      	b.n	80090be <HAL_TIM_OC_Stop_IT+0x26>
 800915a:	3c04      	subs	r4, #4
 800915c:	2c0c      	cmp	r4, #12
 800915e:	d818      	bhi.n	8009192 <HAL_TIM_OC_Stop_IT+0xfa>
 8009160:	e8df f004 	tbb	[pc, r4]
 8009164:	17171707 	.word	0x17171707
 8009168:	1717170b 	.word	0x1717170b
 800916c:	1717170f 	.word	0x1717170f
 8009170:	13          	.byte	0x13
 8009171:	00          	.byte	0x00
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009172:	2301      	movs	r3, #1
 8009174:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 8009178:	e7db      	b.n	8009132 <HAL_TIM_OC_Stop_IT+0x9a>
 800917a:	2301      	movs	r3, #1
 800917c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8009180:	e7d7      	b.n	8009132 <HAL_TIM_OC_Stop_IT+0x9a>
 8009182:	2301      	movs	r3, #1
 8009184:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 8009188:	e7d3      	b.n	8009132 <HAL_TIM_OC_Stop_IT+0x9a>
 800918a:	2301      	movs	r3, #1
 800918c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8009190:	e7cf      	b.n	8009132 <HAL_TIM_OC_Stop_IT+0x9a>
 8009192:	2301      	movs	r3, #1
 8009194:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 8009198:	e7cb      	b.n	8009132 <HAL_TIM_OC_Stop_IT+0x9a>
 800919a:	bf00      	nop
 800919c:	40012c00 	.word	0x40012c00

080091a0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091a0:	4770      	bx	lr

080091a2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091a4:	4770      	bx	lr
	...

080091a8 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80091a8:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80091aa:	3301      	adds	r3, #1
 80091ac:	4a0c      	ldr	r2, [pc, #48]	; (80091e0 <USB_CoreReset+0x38>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d811      	bhi.n	80091d6 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091b2:	6902      	ldr	r2, [r0, #16]
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	daf8      	bge.n	80091aa <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091b8:	6903      	ldr	r3, [r0, #16]
 80091ba:	f043 0301 	orr.w	r3, r3, #1
 80091be:	6103      	str	r3, [r0, #16]
  count = 0U;
 80091c0:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80091c2:	3301      	adds	r3, #1
 80091c4:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <USB_CoreReset+0x38>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d807      	bhi.n	80091da <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091ca:	6902      	ldr	r2, [r0, #16]
 80091cc:	f012 0f01 	tst.w	r2, #1
 80091d0:	d1f7      	bne.n	80091c2 <USB_CoreReset+0x1a>

  return HAL_OK;
 80091d2:	2000      	movs	r0, #0
 80091d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80091d6:	2003      	movs	r0, #3
 80091d8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80091da:	2003      	movs	r0, #3
}
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	00030d40 	.word	0x00030d40

080091e4 <USB_CoreInit>:
{
 80091e4:	b084      	sub	sp, #16
 80091e6:	b510      	push	{r4, lr}
 80091e8:	4604      	mov	r4, r0
 80091ea:	f10d 0c0c 	add.w	ip, sp, #12
 80091ee:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091f2:	68c3      	ldr	r3, [r0, #12]
 80091f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091f8:	60c3      	str	r3, [r0, #12]
  ret = USB_CoreReset(USBx);
 80091fa:	f7ff ffd5 	bl	80091a8 <USB_CoreReset>
  if (cfg.battery_charging_enable == 0U)
 80091fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009200:	b93b      	cbnz	r3, 8009212 <USB_CoreInit+0x2e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009208:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800920a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800920e:	b004      	add	sp, #16
 8009210:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009218:	63a3      	str	r3, [r4, #56]	; 0x38
 800921a:	e7f6      	b.n	800920a <USB_CoreInit+0x26>

0800921c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800921c:	2a02      	cmp	r2, #2
 800921e:	d00a      	beq.n	8009236 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009220:	2209      	movs	r2, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009222:	68c3      	ldr	r3, [r0, #12]
 8009224:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8009228:	60c3      	str	r3, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800922a:	68c3      	ldr	r3, [r0, #12]
 800922c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8009230:	60c3      	str	r3, [r0, #12]
}
 8009232:	2000      	movs	r0, #0
 8009234:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009236:	4b23      	ldr	r3, [pc, #140]	; (80092c4 <USB_SetTurnaroundTime+0xa8>)
 8009238:	440b      	add	r3, r1
 800923a:	4a23      	ldr	r2, [pc, #140]	; (80092c8 <USB_SetTurnaroundTime+0xac>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d92f      	bls.n	80092a0 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009240:	4b22      	ldr	r3, [pc, #136]	; (80092cc <USB_SetTurnaroundTime+0xb0>)
 8009242:	440b      	add	r3, r1
 8009244:	4a22      	ldr	r2, [pc, #136]	; (80092d0 <USB_SetTurnaroundTime+0xb4>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d92c      	bls.n	80092a4 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800924a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800924e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8009252:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <USB_SetTurnaroundTime+0xb8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d927      	bls.n	80092a8 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009258:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800925c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8009260:	4a1d      	ldr	r2, [pc, #116]	; (80092d8 <USB_SetTurnaroundTime+0xbc>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d322      	bcc.n	80092ac <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <USB_SetTurnaroundTime+0xc0>)
 8009268:	440b      	add	r3, r1
 800926a:	4a1d      	ldr	r2, [pc, #116]	; (80092e0 <USB_SetTurnaroundTime+0xc4>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d91f      	bls.n	80092b0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009270:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <USB_SetTurnaroundTime+0xc8>)
 8009272:	440b      	add	r3, r1
 8009274:	4a1c      	ldr	r2, [pc, #112]	; (80092e8 <USB_SetTurnaroundTime+0xcc>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d31c      	bcc.n	80092b4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800927a:	4b1c      	ldr	r3, [pc, #112]	; (80092ec <USB_SetTurnaroundTime+0xd0>)
 800927c:	440b      	add	r3, r1
 800927e:	4a1c      	ldr	r2, [pc, #112]	; (80092f0 <USB_SetTurnaroundTime+0xd4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d319      	bcc.n	80092b8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009284:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8009288:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800928c:	4a19      	ldr	r2, [pc, #100]	; (80092f4 <USB_SetTurnaroundTime+0xd8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d314      	bcc.n	80092bc <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009292:	4b19      	ldr	r3, [pc, #100]	; (80092f8 <USB_SetTurnaroundTime+0xdc>)
 8009294:	440b      	add	r3, r1
 8009296:	4a19      	ldr	r2, [pc, #100]	; (80092fc <USB_SetTurnaroundTime+0xe0>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d211      	bcs.n	80092c0 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800929c:	2207      	movs	r2, #7
 800929e:	e7c0      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80092a0:	220f      	movs	r2, #15
 80092a2:	e7be      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80092a4:	220e      	movs	r2, #14
 80092a6:	e7bc      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80092a8:	220d      	movs	r2, #13
 80092aa:	e7ba      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80092ac:	220c      	movs	r2, #12
 80092ae:	e7b8      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80092b0:	220b      	movs	r2, #11
 80092b2:	e7b6      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80092b4:	220a      	movs	r2, #10
 80092b6:	e7b4      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80092b8:	2209      	movs	r2, #9
 80092ba:	e7b2      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80092bc:	2208      	movs	r2, #8
 80092be:	e7b0      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80092c0:	2206      	movs	r2, #6
 80092c2:	e7ae      	b.n	8009222 <USB_SetTurnaroundTime+0x6>
 80092c4:	ff275340 	.word	0xff275340
 80092c8:	000c34ff 	.word	0x000c34ff
 80092cc:	ff1b1e40 	.word	0xff1b1e40
 80092d0:	000f423f 	.word	0x000f423f
 80092d4:	00124f7f 	.word	0x00124f7f
 80092d8:	0013d620 	.word	0x0013d620
 80092dc:	fee5b660 	.word	0xfee5b660
 80092e0:	0016e35f 	.word	0x0016e35f
 80092e4:	feced300 	.word	0xfeced300
 80092e8:	001b7740 	.word	0x001b7740
 80092ec:	feb35bc0 	.word	0xfeb35bc0
 80092f0:	002191c0 	.word	0x002191c0
 80092f4:	00387520 	.word	0x00387520
 80092f8:	fe5954e0 	.word	0xfe5954e0
 80092fc:	00419ce0 	.word	0x00419ce0

08009300 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009300:	6883      	ldr	r3, [r0, #8]
 8009302:	f043 0301 	orr.w	r3, r3, #1
 8009306:	6083      	str	r3, [r0, #8]
}
 8009308:	2000      	movs	r0, #0
 800930a:	4770      	bx	lr

0800930c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800930c:	6883      	ldr	r3, [r0, #8]
 800930e:	f023 0301 	bic.w	r3, r3, #1
 8009312:	6083      	str	r3, [r0, #8]
}
 8009314:	2000      	movs	r0, #0
 8009316:	4770      	bx	lr

08009318 <USB_SetCurrentMode>:
{
 8009318:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800931a:	68c3      	ldr	r3, [r0, #12]
 800931c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009320:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8009322:	2901      	cmp	r1, #1
 8009324:	d009      	beq.n	800933a <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8009326:	b969      	cbnz	r1, 8009344 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009328:	68c3      	ldr	r3, [r0, #12]
 800932a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800932e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8009330:	2032      	movs	r0, #50	; 0x32
 8009332:	f7fb ffdb 	bl	80052ec <HAL_Delay>
  return HAL_OK;
 8009336:	2000      	movs	r0, #0
}
 8009338:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800933a:	68c3      	ldr	r3, [r0, #12]
 800933c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009340:	60c3      	str	r3, [r0, #12]
 8009342:	e7f5      	b.n	8009330 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8009344:	2001      	movs	r0, #1
 8009346:	e7f7      	b.n	8009338 <USB_SetCurrentMode+0x20>

08009348 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009348:	0189      	lsls	r1, r1, #6
 800934a:	f041 0120 	orr.w	r1, r1, #32
 800934e:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8009350:	2300      	movs	r3, #0
    if (++count > 200000U)
 8009352:	3301      	adds	r3, #1
 8009354:	4a05      	ldr	r2, [pc, #20]	; (800936c <USB_FlushTxFifo+0x24>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d805      	bhi.n	8009366 <USB_FlushTxFifo+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800935a:	6902      	ldr	r2, [r0, #16]
 800935c:	f012 0f20 	tst.w	r2, #32
 8009360:	d1f7      	bne.n	8009352 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8009362:	2000      	movs	r0, #0
 8009364:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009366:	2003      	movs	r0, #3
}
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	00030d40 	.word	0x00030d40

08009370 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009370:	2310      	movs	r3, #16
 8009372:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8009374:	2300      	movs	r3, #0
    if (++count > 200000U)
 8009376:	3301      	adds	r3, #1
 8009378:	4a05      	ldr	r2, [pc, #20]	; (8009390 <USB_FlushRxFifo+0x20>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d805      	bhi.n	800938a <USB_FlushRxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800937e:	6902      	ldr	r2, [r0, #16]
 8009380:	f012 0f10 	tst.w	r2, #16
 8009384:	d1f7      	bne.n	8009376 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8009386:	2000      	movs	r0, #0
 8009388:	4770      	bx	lr
      return HAL_TIMEOUT;
 800938a:	2003      	movs	r0, #3
}
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	00030d40 	.word	0x00030d40

08009394 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8009394:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8009398:	4319      	orrs	r1, r3
 800939a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800939e:	2000      	movs	r0, #0
 80093a0:	4770      	bx	lr
	...

080093a4 <USB_DevInit>:
{
 80093a4:	b084      	sub	sp, #16
 80093a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	a807      	add	r0, sp, #28
 80093ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80093b2:	2300      	movs	r3, #0
 80093b4:	e006      	b.n	80093c4 <USB_DevInit+0x20>
    USBx->DIEPTXF[i] = 0U;
 80093b6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80093ba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80093be:	2100      	movs	r1, #0
 80093c0:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80093c2:	3301      	adds	r3, #1
 80093c4:	2b0e      	cmp	r3, #14
 80093c6:	d9f6      	bls.n	80093b6 <USB_DevInit+0x12>
  if (cfg.vbus_sensing_enable == 0U)
 80093c8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80093ca:	bb8f      	cbnz	r7, 8009430 <USB_DevInit+0x8c>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80093cc:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80093d0:	f043 0302 	orr.w	r3, r3, #2
 80093d4:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80093d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80093da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093de:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e6:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ee:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80093f0:	2300      	movs	r3, #0
 80093f2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80093f6:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 80093fa:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80093fe:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009402:	2103      	movs	r1, #3
 8009404:	4620      	mov	r0, r4
 8009406:	f7ff ffc5 	bl	8009394 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800940a:	2110      	movs	r1, #16
 800940c:	4620      	mov	r0, r4
 800940e:	f7ff ff9b 	bl	8009348 <USB_FlushTxFifo>
 8009412:	4680      	mov	r8, r0
 8009414:	b108      	cbz	r0, 800941a <USB_DevInit+0x76>
    ret = HAL_ERROR;
 8009416:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800941a:	4620      	mov	r0, r4
 800941c:	f7ff ffa8 	bl	8009370 <USB_FlushRxFifo>
 8009420:	b108      	cbz	r0, 8009426 <USB_DevInit+0x82>
    ret = HAL_ERROR;
 8009422:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800942a:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800942c:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800942e:	e00f      	b.n	8009450 <USB_DevInit+0xac>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009436:	63a3      	str	r3, [r4, #56]	; 0x38
 8009438:	e7da      	b.n	80093f0 <USB_DevInit+0x4c>
      if (i == 0U)
 800943a:	b9c3      	cbnz	r3, 800946e <USB_DevInit+0xca>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800943c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8009440:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009444:	2200      	movs	r2, #0
 8009446:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009448:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800944c:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800944e:	3301      	adds	r3, #1
 8009450:	9907      	ldr	r1, [sp, #28]
 8009452:	4299      	cmp	r1, r3
 8009454:	d910      	bls.n	8009478 <USB_DevInit+0xd4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009456:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800945a:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800945e:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8009462:	2800      	cmp	r0, #0
 8009464:	dbe9      	blt.n	800943a <USB_DevInit+0x96>
      USBx_INEP(i)->DIEPCTL = 0U;
 8009466:	2000      	movs	r0, #0
 8009468:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800946c:	e7ea      	b.n	8009444 <USB_DevInit+0xa0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800946e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009472:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8009476:	e7e5      	b.n	8009444 <USB_DevInit+0xa0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009478:	2300      	movs	r3, #0
 800947a:	e00a      	b.n	8009492 <USB_DevInit+0xee>
      if (i == 0U)
 800947c:	b1c3      	cbz	r3, 80094b0 <USB_DevInit+0x10c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800947e:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 8009482:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009486:	2200      	movs	r2, #0
 8009488:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800948a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800948e:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009490:	3301      	adds	r3, #1
 8009492:	4299      	cmp	r1, r3
 8009494:	d911      	bls.n	80094ba <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009496:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800949a:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800949e:	f8d2 6b00 	ldr.w	r6, [r2, #2816]	; 0xb00
 80094a2:	2e00      	cmp	r6, #0
 80094a4:	dbea      	blt.n	800947c <USB_DevInit+0xd8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80094a6:	f04f 0c00 	mov.w	ip, #0
 80094aa:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 80094ae:	e7ea      	b.n	8009486 <USB_DevInit+0xe2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80094b0:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 80094b4:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 80094b8:	e7e5      	b.n	8009486 <USB_DevInit+0xe2>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094ba:	692b      	ldr	r3, [r5, #16]
 80094bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c0:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094c6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80094ca:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094cc:	69a3      	ldr	r3, [r4, #24]
 80094ce:	f043 0310 	orr.w	r3, r3, #16
 80094d2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094d4:	69a2      	ldr	r2, [r4, #24]
 80094d6:	4b0b      	ldr	r3, [pc, #44]	; (8009504 <USB_DevInit+0x160>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80094dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094de:	b11b      	cbz	r3, 80094e8 <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094e0:	69a3      	ldr	r3, [r4, #24]
 80094e2:	f043 0308 	orr.w	r3, r3, #8
 80094e6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80094e8:	2f01      	cmp	r7, #1
 80094ea:	d004      	beq.n	80094f6 <USB_DevInit+0x152>
}
 80094ec:	4640      	mov	r0, r8
 80094ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094f2:	b004      	add	sp, #16
 80094f4:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094f6:	69a3      	ldr	r3, [r4, #24]
 80094f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094fc:	f043 0304 	orr.w	r3, r3, #4
 8009500:	61a3      	str	r3, [r4, #24]
 8009502:	e7f3      	b.n	80094ec <USB_DevInit+0x148>
 8009504:	803c3800 	.word	0x803c3800

08009508 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009508:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800950c:	f003 0306 	and.w	r3, r3, #6
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009510:	2b02      	cmp	r3, #2
 8009512:	d005      	beq.n	8009520 <USB_GetDevSpeed+0x18>
 8009514:	2b06      	cmp	r3, #6
 8009516:	d001      	beq.n	800951c <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8009518:	200f      	movs	r0, #15
}
 800951a:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800951c:	2002      	movs	r0, #2
 800951e:	4770      	bx	lr
 8009520:	2002      	movs	r0, #2
 8009522:	4770      	bx	lr

08009524 <USB_ActivateEndpoint>:
{
 8009524:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8009526:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800952a:	784b      	ldrb	r3, [r1, #1]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d023      	beq.n	8009578 <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009530:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8009534:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8009538:	f00c 040f 	and.w	r4, ip, #15
 800953c:	2201      	movs	r2, #1
 800953e:	40a2      	lsls	r2, r4
 8009540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009544:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009548:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800954c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8009550:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009554:	d10e      	bne.n	8009574 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009556:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800955a:	688a      	ldr	r2, [r1, #8]
 800955c:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009560:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009562:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8009566:	4313      	orrs	r3, r2
 8009568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800956c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009570:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8009574:	2000      	movs	r0, #0
 8009576:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009578:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800957c:	f00c 0e0f 	and.w	lr, ip, #15
 8009580:	fa03 f30e 	lsl.w	r3, r3, lr
 8009584:	b29b      	uxth	r3, r3
 8009586:	4313      	orrs	r3, r2
 8009588:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800958c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 8009590:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8009594:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009598:	d1ec      	bne.n	8009574 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800959a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800959e:	688a      	ldr	r2, [r1, #8]
 80095a0:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095a4:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095a6:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095aa:	ea42 528c 	orr.w	r2, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095ae:	4313      	orrs	r3, r2
 80095b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80095bc:	e7da      	b.n	8009574 <USB_ActivateEndpoint+0x50>
	...

080095c0 <USB_DeactivateEndpoint>:
{
 80095c0:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 80095c2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80095c4:	784a      	ldrb	r2, [r1, #1]
 80095c6:	2a01      	cmp	r2, #1
 80095c8:	d026      	beq.n	8009618 <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095ca:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80095ce:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80095d2:	2a00      	cmp	r2, #0
 80095d4:	db52      	blt.n	800967c <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095d6:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 80095da:	780a      	ldrb	r2, [r1, #0]
 80095dc:	f002 020f 	and.w	r2, r2, #15
 80095e0:	f04f 0c01 	mov.w	ip, #1
 80095e4:	fa0c f202 	lsl.w	r2, ip, r2
 80095e8:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 80095ec:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80095f0:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80095f4:	7809      	ldrb	r1, [r1, #0]
 80095f6:	f001 010f 	and.w	r1, r1, #15
 80095fa:	fa0c fc01 	lsl.w	ip, ip, r1
 80095fe:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8009602:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009606:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800960a:	4a23      	ldr	r2, [pc, #140]	; (8009698 <USB_DeactivateEndpoint+0xd8>)
 800960c:	400a      	ands	r2, r1
 800960e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8009612:	2000      	movs	r0, #0
 8009614:	bc30      	pop	{r4, r5}
 8009616:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009618:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800961c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8009620:	2a00      	cmp	r2, #0
 8009622:	db1e      	blt.n	8009662 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009624:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8009628:	780a      	ldrb	r2, [r1, #0]
 800962a:	f002 020f 	and.w	r2, r2, #15
 800962e:	2401      	movs	r4, #1
 8009630:	fa04 f202 	lsl.w	r2, r4, r2
 8009634:	b292      	uxth	r2, r2
 8009636:	ea25 0202 	bic.w	r2, r5, r2
 800963a:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800963e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8009642:	7809      	ldrb	r1, [r1, #0]
 8009644:	f001 010f 	and.w	r1, r1, #15
 8009648:	408c      	lsls	r4, r1
 800964a:	b2a4      	uxth	r4, r4
 800964c:	ea22 0204 	bic.w	r2, r2, r4
 8009650:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009654:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8009658:	4a10      	ldr	r2, [pc, #64]	; (800969c <USB_DeactivateEndpoint+0xdc>)
 800965a:	400a      	ands	r2, r1
 800965c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8009660:	e7d7      	b.n	8009612 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009662:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8009666:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800966a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800966e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8009672:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009676:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800967a:	e7d3      	b.n	8009624 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800967c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8009680:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009684:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009688:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800968c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009690:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8009694:	e79f      	b.n	80095d6 <USB_DeactivateEndpoint+0x16>
 8009696:	bf00      	nop
 8009698:	eff37800 	.word	0xeff37800
 800969c:	ec337800 	.word	0xec337800

080096a0 <USB_EP0StartXfer>:
  uint32_t epnum = (uint32_t)ep->num;
 80096a0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80096a2:	784a      	ldrb	r2, [r1, #1]
 80096a4:	2a01      	cmp	r2, #1
 80096a6:	d023      	beq.n	80096f0 <USB_EP0StartXfer+0x50>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096a8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80096ac:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80096b0:	691a      	ldr	r2, [r3, #16]
 80096b2:	0cd2      	lsrs	r2, r2, #19
 80096b4:	04d2      	lsls	r2, r2, #19
 80096b6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096b8:	691a      	ldr	r2, [r3, #16]
 80096ba:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80096be:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80096c2:	611a      	str	r2, [r3, #16]
    if (ep->xfer_len > 0U)
 80096c4:	694a      	ldr	r2, [r1, #20]
 80096c6:	b10a      	cbz	r2, 80096cc <USB_EP0StartXfer+0x2c>
      ep->xfer_len = ep->maxpacket;
 80096c8:	688a      	ldr	r2, [r1, #8]
 80096ca:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096cc:	691a      	ldr	r2, [r3, #16]
 80096ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80096d2:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80096d4:	691a      	ldr	r2, [r3, #16]
 80096d6:	6889      	ldr	r1, [r1, #8]
 80096d8:	f3c1 0112 	ubfx	r1, r1, #0, #19
 80096dc:	430a      	orrs	r2, r1
 80096de:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096e0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80096e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096e8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80096ec:	2000      	movs	r0, #0
 80096ee:	4770      	bx	lr
{
 80096f0:	b430      	push	{r4, r5}
    if (ep->xfer_len == 0U)
 80096f2:	694a      	ldr	r2, [r1, #20]
 80096f4:	bb62      	cbnz	r2, 8009750 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80096f6:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 80096fa:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 80096fe:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8009702:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8009706:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800970a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800970e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8009712:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009716:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800971a:	0ce4      	lsrs	r4, r4, #19
 800971c:	04e4      	lsls	r4, r4, #19
 800971e:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009722:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8009726:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800972a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800972e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 8009732:	694b      	ldr	r3, [r1, #20]
 8009734:	b14b      	cbz	r3, 800974a <USB_EP0StartXfer+0xaa>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009736:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800973a:	7809      	ldrb	r1, [r1, #0]
 800973c:	f001 010f 	and.w	r1, r1, #15
 8009740:	2201      	movs	r2, #1
 8009742:	408a      	lsls	r2, r1
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800974a:	2000      	movs	r0, #0
 800974c:	bc30      	pop	{r4, r5}
 800974e:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009750:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8009754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009758:	6914      	ldr	r4, [r2, #16]
 800975a:	0ce4      	lsrs	r4, r4, #19
 800975c:	04e4      	lsls	r4, r4, #19
 800975e:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009760:	6914      	ldr	r4, [r2, #16]
 8009762:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8009766:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800976a:	6114      	str	r4, [r2, #16]
      if (ep->xfer_len > ep->maxpacket)
 800976c:	688c      	ldr	r4, [r1, #8]
 800976e:	694d      	ldr	r5, [r1, #20]
 8009770:	42a5      	cmp	r5, r4
 8009772:	d900      	bls.n	8009776 <USB_EP0StartXfer+0xd6>
        ep->xfer_len = ep->maxpacket;
 8009774:	614c      	str	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009776:	6914      	ldr	r4, [r2, #16]
 8009778:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800977c:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800977e:	6914      	ldr	r4, [r2, #16]
 8009780:	694d      	ldr	r5, [r1, #20]
 8009782:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 8009786:	ea44 040c 	orr.w	r4, r4, ip
 800978a:	6114      	str	r4, [r2, #16]
 800978c:	e7c9      	b.n	8009722 <USB_EP0StartXfer+0x82>

0800978e <USB_WritePacket>:
{
 800978e:	b510      	push	{r4, lr}
  count32b = ((uint32_t)len + 3U) / 4U;
 8009790:	1cdc      	adds	r4, r3, #3
 8009792:	08a4      	lsrs	r4, r4, #2
  for (i = 0U; i < count32b; i++)
 8009794:	f04f 0e00 	mov.w	lr, #0
 8009798:	e009      	b.n	80097ae <USB_WritePacket+0x20>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800979a:	eb00 3c02 	add.w	ip, r0, r2, lsl #12
 800979e:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 80097a2:	f851 3b04 	ldr.w	r3, [r1], #4
 80097a6:	f8cc 3000 	str.w	r3, [ip]
  for (i = 0U; i < count32b; i++)
 80097aa:	f10e 0e01 	add.w	lr, lr, #1
 80097ae:	45a6      	cmp	lr, r4
 80097b0:	d3f3      	bcc.n	800979a <USB_WritePacket+0xc>
}
 80097b2:	2000      	movs	r0, #0
 80097b4:	bd10      	pop	{r4, pc}
	...

080097b8 <USB_EPStartXfer>:
{
 80097b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80097ba:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80097bc:	784a      	ldrb	r2, [r1, #1]
 80097be:	2a01      	cmp	r2, #1
 80097c0:	d027      	beq.n	8009812 <USB_EPStartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80097c2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80097c6:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 80097ca:	6914      	ldr	r4, [r2, #16]
 80097cc:	0ce4      	lsrs	r4, r4, #19
 80097ce:	04e4      	lsls	r4, r4, #19
 80097d0:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80097d2:	6914      	ldr	r4, [r2, #16]
 80097d4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80097d8:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 80097dc:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 80097de:	694c      	ldr	r4, [r1, #20]
 80097e0:	2c00      	cmp	r4, #0
 80097e2:	f040 8093 	bne.w	800990c <USB_EPStartXfer+0x154>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80097e6:	6914      	ldr	r4, [r2, #16]
 80097e8:	688d      	ldr	r5, [r1, #8]
 80097ea:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80097ee:	432c      	orrs	r4, r5
 80097f0:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097f2:	6914      	ldr	r4, [r2, #16]
 80097f4:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80097f8:	6114      	str	r4, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 80097fa:	78ca      	ldrb	r2, [r1, #3]
 80097fc:	2a01      	cmp	r2, #1
 80097fe:	f000 809b 	beq.w	8009938 <USB_EPStartXfer+0x180>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009802:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8009806:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800980a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800980e:	2000      	movs	r0, #0
 8009810:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0U)
 8009812:	694a      	ldr	r2, [r1, #20]
 8009814:	bb72      	cbnz	r2, 8009874 <USB_EPStartXfer+0xbc>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009816:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800981a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800981e:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8009822:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8009826:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800982a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800982e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8009832:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009836:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800983a:	0ce4      	lsrs	r4, r4, #19
 800983c:	04e4      	lsls	r4, r4, #19
 800983e:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009842:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8009846:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800984a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800984e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 8009852:	78ca      	ldrb	r2, [r1, #3]
 8009854:	2a01      	cmp	r2, #1
 8009856:	d041      	beq.n	80098dc <USB_EPStartXfer+0x124>
      if (ep->xfer_len > 0U)
 8009858:	694b      	ldr	r3, [r1, #20]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0d7      	beq.n	800980e <USB_EPStartXfer+0x56>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800985e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8009862:	7809      	ldrb	r1, [r1, #0]
 8009864:	f001 010f 	and.w	r1, r1, #15
 8009868:	2201      	movs	r2, #1
 800986a:	408a      	lsls	r2, r1
 800986c:	4313      	orrs	r3, r2
 800986e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8009872:	e7cc      	b.n	800980e <USB_EPStartXfer+0x56>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009874:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 8009878:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800987c:	0ce4      	lsrs	r4, r4, #19
 800987e:	04e4      	lsls	r4, r4, #19
 8009880:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009884:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8009888:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800988c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8009890:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009894:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 8009898:	694c      	ldr	r4, [r1, #20]
 800989a:	688e      	ldr	r6, [r1, #8]
 800989c:	4434      	add	r4, r6
 800989e:	3c01      	subs	r4, #1
 80098a0:	fbb4 f4f6 	udiv	r4, r4, r6
 80098a4:	4e2e      	ldr	r6, [pc, #184]	; (8009960 <USB_EPStartXfer+0x1a8>)
 80098a6:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80098aa:	432c      	orrs	r4, r5
 80098ac:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098b0:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 80098b4:	694d      	ldr	r5, [r1, #20]
 80098b6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80098ba:	432c      	orrs	r4, r5
 80098bc:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80098c4:	78cc      	ldrb	r4, [r1, #3]
 80098c6:	2c01      	cmp	r4, #1
 80098c8:	d1bb      	bne.n	8009842 <USB_EPStartXfer+0x8a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80098ca:	6914      	ldr	r4, [r2, #16]
 80098cc:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 80098d0:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80098d2:	6914      	ldr	r4, [r2, #16]
 80098d4:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80098d8:	6114      	str	r4, [r2, #16]
 80098da:	e7b2      	b.n	8009842 <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098dc:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80098e0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80098e4:	d10b      	bne.n	80098fe <USB_EPStartXfer+0x146>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80098e6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80098ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80098ee:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80098f2:	8a8b      	ldrh	r3, [r1, #20]
 80098f4:	780a      	ldrb	r2, [r1, #0]
 80098f6:	68c9      	ldr	r1, [r1, #12]
 80098f8:	f7ff ff49 	bl	800978e <USB_WritePacket>
 80098fc:	e787      	b.n	800980e <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80098fe:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8009902:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009906:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800990a:	e7f2      	b.n	80098f2 <USB_EPStartXfer+0x13a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800990c:	688d      	ldr	r5, [r1, #8]
 800990e:	442c      	add	r4, r5
 8009910:	3c01      	subs	r4, #1
 8009912:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009916:	6915      	ldr	r5, [r2, #16]
 8009918:	fa1f fc84 	uxth.w	ip, r4
 800991c:	4e10      	ldr	r6, [pc, #64]	; (8009960 <USB_EPStartXfer+0x1a8>)
 800991e:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 8009922:	432c      	orrs	r4, r5
 8009924:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009926:	6915      	ldr	r5, [r2, #16]
 8009928:	688c      	ldr	r4, [r1, #8]
 800992a:	fb0c f404 	mul.w	r4, ip, r4
 800992e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8009932:	432c      	orrs	r4, r5
 8009934:	6114      	str	r4, [r2, #16]
 8009936:	e760      	b.n	80097fa <USB_EPStartXfer+0x42>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009938:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800993c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009940:	d106      	bne.n	8009950 <USB_EPStartXfer+0x198>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009942:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8009946:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800994a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800994e:	e758      	b.n	8009802 <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009950:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8009954:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009958:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800995c:	e751      	b.n	8009802 <USB_EPStartXfer+0x4a>
 800995e:	bf00      	nop
 8009960:	1ff80000 	.word	0x1ff80000

08009964 <USB_ReadPacket>:
{
 8009964:	4684      	mov	ip, r0
 8009966:	4608      	mov	r0, r1
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009968:	3203      	adds	r2, #3
 800996a:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 800996c:	2300      	movs	r3, #0
 800996e:	e005      	b.n	800997c <USB_ReadPacket+0x18>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009970:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 8009974:	6809      	ldr	r1, [r1, #0]
 8009976:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 800997a:	3301      	adds	r3, #1
 800997c:	4293      	cmp	r3, r2
 800997e:	d3f7      	bcc.n	8009970 <USB_ReadPacket+0xc>
}
 8009980:	4770      	bx	lr

08009982 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8009982:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8009984:	784a      	ldrb	r2, [r1, #1]
 8009986:	2a01      	cmp	r2, #1
 8009988:	d014      	beq.n	80099b4 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800998a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800998e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8009992:	2a00      	cmp	r2, #0
 8009994:	db06      	blt.n	80099a4 <USB_EPSetStall+0x22>
 8009996:	b12b      	cbz	r3, 80099a4 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009998:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800999c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099a0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80099a4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80099a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099ac:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80099b0:	2000      	movs	r0, #0
 80099b2:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099b4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80099b8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80099bc:	2a00      	cmp	r2, #0
 80099be:	db06      	blt.n	80099ce <USB_EPSetStall+0x4c>
 80099c0:	b12b      	cbz	r3, 80099ce <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80099c2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80099c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099ca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80099ce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80099d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099d6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80099da:	e7e9      	b.n	80099b0 <USB_EPSetStall+0x2e>

080099dc <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80099dc:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80099de:	784a      	ldrb	r2, [r1, #1]
 80099e0:	2a01      	cmp	r2, #1
 80099e2:	d00e      	beq.n	8009a02 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80099e4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80099e8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80099ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099f0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80099f4:	78cb      	ldrb	r3, [r1, #3]
 80099f6:	3b02      	subs	r3, #2
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d915      	bls.n	8009a2a <USB_EPClearStall+0x4e>
}
 80099fe:	2000      	movs	r0, #0
 8009a00:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a02:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8009a06:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8009a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a0e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a12:	78cb      	ldrb	r3, [r1, #3]
 8009a14:	3b02      	subs	r3, #2
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d8f0      	bhi.n	80099fe <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a1c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8009a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a24:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8009a28:	e7e9      	b.n	80099fe <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a2a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8009a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a32:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8009a36:	e7e2      	b.n	80099fe <USB_EPClearStall+0x22>

08009a38 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009a38:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8009a3c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009a40:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009a44:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8009a48:	0109      	lsls	r1, r1, #4
 8009a4a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8009a4e:	430b      	orrs	r3, r1
 8009a50:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 8009a54:	2000      	movs	r0, #0
 8009a56:	4770      	bx	lr

08009a58 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a58:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8009a5c:	f023 0303 	bic.w	r3, r3, #3
 8009a60:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009a64:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8009a68:	f023 0302 	bic.w	r3, r3, #2
 8009a6c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8009a70:	2000      	movs	r0, #0
 8009a72:	4770      	bx	lr

08009a74 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a74:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8009a78:	f023 0303 	bic.w	r3, r3, #3
 8009a7c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a80:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8009a84:	f043 0302 	orr.w	r3, r3, #2
 8009a88:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	4770      	bx	lr

08009a90 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8009a90:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8009a92:	6980      	ldr	r0, [r0, #24]
}
 8009a94:	4010      	ands	r0, r2
 8009a96:	4770      	bx	lr

08009a98 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8009a98:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8009a9c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009aa0:	69c0      	ldr	r0, [r0, #28]
 8009aa2:	4018      	ands	r0, r3
}
 8009aa4:	0c00      	lsrs	r0, r0, #16
 8009aa6:	4770      	bx	lr

08009aa8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8009aa8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8009aac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ab0:	69c0      	ldr	r0, [r0, #28]
 8009ab2:	4018      	ands	r0, r3
}
 8009ab4:	b280      	uxth	r0, r0
 8009ab6:	4770      	bx	lr

08009ab8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009ab8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8009abc:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ac0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8009ac4:	6940      	ldr	r0, [r0, #20]
}
 8009ac6:	4010      	ands	r0, r2
 8009ac8:	4770      	bx	lr

08009aca <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8009aca:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009ace:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ad2:	f001 0c0f 	and.w	ip, r1, #15
 8009ad6:	fa23 f30c 	lsr.w	r3, r3, ip
 8009ada:	01db      	lsls	r3, r3, #7
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	4313      	orrs	r3, r2
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009ae0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8009ae4:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8009ae8:	6880      	ldr	r0, [r0, #8]
}
 8009aea:	4018      	ands	r0, r3
 8009aec:	4770      	bx	lr

08009aee <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8009aee:	6940      	ldr	r0, [r0, #20]
}
 8009af0:	f000 0001 	and.w	r0, r0, #1
 8009af4:	4770      	bx	lr

08009af6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009af6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8009afa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009afe:	f023 0307 	bic.w	r3, r3, #7
 8009b02:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b06:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8009b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b0e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8009b12:	2000      	movs	r0, #0
 8009b14:	4770      	bx	lr
	...

08009b18 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b18:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b1a:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <USB_EP0_OutStart+0x40>)
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d903      	bls.n	8009b28 <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b20:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	db14      	blt.n	8009b52 <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b2e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8009b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b36:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b3a:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8009b3e:	f043 0318 	orr.w	r3, r3, #24
 8009b42:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b46:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 8009b4a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009b4e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 8009b52:	2000      	movs	r0, #0
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	4f54300a 	.word	0x4f54300a

08009b5c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	b08a      	sub	sp, #40	; 0x28
 8009b60:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8009b62:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 8009b66:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 8009b6a:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009b6e:	2100      	movs	r1, #0
 8009b70:	9101      	str	r1, [sp, #4]
 8009b72:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b76:	9104      	str	r1, [sp, #16]
 8009b78:	9105      	str	r1, [sp, #20]
 8009b7a:	9106      	str	r1, [sp, #24]
 8009b7c:	9107      	str	r1, [sp, #28]
 8009b7e:	9108      	str	r1, [sp, #32]
 8009b80:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 8009b82:	233f      	movs	r3, #63	; 0x3f
 8009b84:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8009b88:	238a      	movs	r3, #138	; 0x8a
 8009b8a:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8009b8e:	ab03      	add	r3, sp, #12
 8009b90:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8009b92:	2303      	movs	r3, #3
 8009b94:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 8009b96:	ab01      	add	r3, sp, #4
 8009b98:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8009b9a:	2307      	movs	r3, #7
 8009b9c:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009b9e:	a804      	add	r0, sp, #16
 8009ba0:	f000 fbfe 	bl	800a3a0 <hci_send_req>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	db0f      	blt.n	8009bc8 <aci_gap_init_IDB05A1+0x6c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8009ba8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8009bac:	b950      	cbnz	r0, 8009bc4 <aci_gap_init_IDB05A1+0x68>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8009bae:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 8009bb2:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8009bb4:	f8bd 2007 	ldrh.w	r2, [sp, #7]
 8009bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bba:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8009bbc:	f8bd 2009 	ldrh.w	r2, [sp, #9]
 8009bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bc2:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 8009bc4:	b00a      	add	sp, #40	; 0x28
 8009bc6:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 8009bc8:	20ff      	movs	r0, #255	; 0xff
 8009bca:	e7fb      	b.n	8009bc4 <aci_gap_init_IDB05A1+0x68>

08009bcc <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	b092      	sub	sp, #72	; 0x48
 8009bd0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8009bd4:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8009bd8:	192e      	adds	r6, r5, r4
 8009bda:	360e      	adds	r6, #14
 8009bdc:	2e28      	cmp	r6, #40	; 0x28
 8009bde:	d851      	bhi.n	8009c84 <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8009be0:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8009be4:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8009be8:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8009bec:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8009bf0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8009bf4:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 8009bf8:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8009bfc:	ae01      	add	r6, sp, #4
 8009bfe:	462a      	mov	r2, r5
 8009c00:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c02:	a803      	add	r0, sp, #12
 8009c04:	f001 fd36 	bl	800b674 <memcpy>
  indx +=  LocalNameLen;
 8009c08:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8009c0c:	aa12      	add	r2, sp, #72	; 0x48
 8009c0e:	fa52 f383 	uxtab	r3, r2, r3
 8009c12:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 8009c16:	3509      	adds	r5, #9
 8009c18:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c1e:	1970      	adds	r0, r6, r5
 8009c20:	f001 fd28 	bl	800b674 <memcpy>
  indx +=  ServiceUUIDLen;  
 8009c24:	442c      	add	r4, r5
 8009c26:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8009c28:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8009c2c:	446b      	add	r3, sp
 8009c2e:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8009c32:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 8009c36:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8009c38:	aa12      	add	r2, sp, #72	; 0x48
 8009c3a:	fa52 f383 	uxtab	r3, r2, r3
 8009c3e:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8009c42:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    
 8009c46:	3404      	adds	r4, #4
 8009c48:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	910c      	str	r1, [sp, #48]	; 0x30
 8009c4e:	910d      	str	r1, [sp, #52]	; 0x34
 8009c50:	910e      	str	r1, [sp, #56]	; 0x38
 8009c52:	910f      	str	r1, [sp, #60]	; 0x3c
 8009c54:	9110      	str	r1, [sp, #64]	; 0x40
 8009c56:	9111      	str	r1, [sp, #68]	; 0x44
  rq.ogf = OGF_VENDOR_CMD;
 8009c58:	233f      	movs	r3, #63	; 0x3f
 8009c5a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8009c5e:	2383      	movs	r3, #131	; 0x83
 8009c60:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 8009c64:	960e      	str	r6, [sp, #56]	; 0x38
  rq.clen = indx;
 8009c66:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 8009c68:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8009c6c:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8009c72:	a80c      	add	r0, sp, #48	; 0x30
 8009c74:	f000 fb94 	bl	800a3a0 <hci_send_req>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	db05      	blt.n	8009c88 <aci_gap_set_discoverable+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009c7c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    return status;
  }

  return 0;
}
 8009c80:	b012      	add	sp, #72	; 0x48
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009c84:	2042      	movs	r0, #66	; 0x42
 8009c86:	e7fb      	b.n	8009c80 <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_TIMEOUT;
 8009c88:	20ff      	movs	r0, #255	; 0xff
 8009c8a:	e7f9      	b.n	8009c80 <aci_gap_set_discoverable+0xb4>

08009c8c <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8009c8c:	b500      	push	{lr}
 8009c8e:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8009c90:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 8009c94:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8009c98:	b161      	cbz	r1, 8009cb4 <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8009c9a:	f8d2 c000 	ldr.w	ip, [r2]
 8009c9e:	6850      	ldr	r0, [r2, #4]
 8009ca0:	6891      	ldr	r1, [r2, #8]
 8009ca2:	68d2      	ldr	r2, [r2, #12]
 8009ca4:	f8cd c006 	str.w	ip, [sp, #6]
 8009ca8:	f8cd 000a 	str.w	r0, [sp, #10]
 8009cac:	f8cd 100e 	str.w	r1, [sp, #14]
 8009cb0:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8009cb4:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 8009cb8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8009cbc:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 8009cc0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8009cc4:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 8009cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cca:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 8009cce:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8009cd2:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	9108      	str	r1, [sp, #32]
 8009cda:	9109      	str	r1, [sp, #36]	; 0x24
 8009cdc:	910a      	str	r1, [sp, #40]	; 0x28
 8009cde:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ce0:	910c      	str	r1, [sp, #48]	; 0x30
 8009ce2:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 8009ce4:	233f      	movs	r3, #63	; 0x3f
 8009ce6:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8009cea:	2386      	movs	r3, #134	; 0x86
 8009cec:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 8009cf0:	ab01      	add	r3, sp, #4
 8009cf2:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 8009cf4:	231a      	movs	r3, #26
 8009cf6:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 8009cf8:	f10d 0303 	add.w	r3, sp, #3
 8009cfc:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8009d02:	a808      	add	r0, sp, #32
 8009d04:	f000 fb4c 	bl	800a3a0 <hci_send_req>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	db04      	blt.n	8009d16 <aci_gap_set_auth_requirement+0x8a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009d0c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    return status;
  }
    
  return 0;
}
 8009d10:	b00f      	add	sp, #60	; 0x3c
 8009d12:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8009d16:	20ff      	movs	r0, #255	; 0xff
 8009d18:	e7fa      	b.n	8009d10 <aci_gap_set_auth_requirement+0x84>

08009d1a <aci_gap_update_adv_data>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 8009d1a:	281f      	cmp	r0, #31
 8009d1c:	d829      	bhi.n	8009d72 <aci_gap_update_adv_data+0x58>
{
 8009d1e:	b510      	push	{r4, lr}
 8009d20:	b090      	sub	sp, #64	; 0x40
 8009d22:	4604      	mov	r4, r0
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 8009d24:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 8009d28:	4602      	mov	r2, r0
 8009d2a:	f10d 0005 	add.w	r0, sp, #5
 8009d2e:	f001 fca1 	bl	800b674 <memcpy>
  indx +=  AdvLen;
 8009d32:	3401      	adds	r4, #1
 8009d34:	b2e4      	uxtb	r4, r4
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d36:	2100      	movs	r1, #0
 8009d38:	910a      	str	r1, [sp, #40]	; 0x28
 8009d3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8009d3c:	910c      	str	r1, [sp, #48]	; 0x30
 8009d3e:	910d      	str	r1, [sp, #52]	; 0x34
 8009d40:	910e      	str	r1, [sp, #56]	; 0x38
 8009d42:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_VENDOR_CMD;
 8009d44:	233f      	movs	r3, #63	; 0x3f
 8009d46:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 8009d4a:	238e      	movs	r3, #142	; 0x8e
 8009d4c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = (void *)buffer;
 8009d50:	ab01      	add	r3, sp, #4
 8009d52:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 8009d54:	940d      	str	r4, [sp, #52]	; 0x34
  rq.rparam = &status;
 8009d56:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8009d5a:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	930f      	str	r3, [sp, #60]	; 0x3c
    
  if (hci_send_req(&rq, FALSE) < 0)
 8009d60:	a80a      	add	r0, sp, #40	; 0x28
 8009d62:	f000 fb1d 	bl	800a3a0 <hci_send_req>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	db05      	blt.n	8009d76 <aci_gap_update_adv_data+0x5c>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 8009d6a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 8009d6e:	b010      	add	sp, #64	; 0x40
 8009d70:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009d72:	2042      	movs	r0, #66	; 0x42
}
 8009d74:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 8009d76:	20ff      	movs	r0, #255	; 0xff
 8009d78:	e7f9      	b.n	8009d6e <aci_gap_update_adv_data+0x54>

08009d7a <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8009d7a:	b500      	push	{lr}
 8009d7c:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d7e:	2100      	movs	r1, #0
 8009d80:	9102      	str	r1, [sp, #8]
 8009d82:	9103      	str	r1, [sp, #12]
 8009d84:	9104      	str	r1, [sp, #16]
 8009d86:	9105      	str	r1, [sp, #20]
 8009d88:	9106      	str	r1, [sp, #24]
 8009d8a:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 8009d8c:	233f      	movs	r3, #63	; 0x3f
 8009d8e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8009d92:	f240 1301 	movw	r3, #257	; 0x101
 8009d96:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8009d9a:	f10d 0307 	add.w	r3, sp, #7
 8009d9e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 8009da0:	2301      	movs	r3, #1
 8009da2:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8009da4:	a802      	add	r0, sp, #8
 8009da6:	f000 fafb 	bl	800a3a0 <hci_send_req>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	db04      	blt.n	8009db8 <aci_gatt_init+0x3e>
    return BLE_STATUS_TIMEOUT;

  return status;
 8009dae:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009db2:	b009      	add	sp, #36	; 0x24
 8009db4:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 8009db8:	20ff      	movs	r0, #255	; 0xff
 8009dba:	e7fa      	b.n	8009db2 <aci_gatt_init+0x38>

08009dbc <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	b08c      	sub	sp, #48	; 0x30
 8009dc0:	4616      	mov	r6, r2
 8009dc2:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 8009dc4:	f88d 0000 	strb.w	r0, [sp]
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 8009dc8:	2801      	cmp	r0, #1
 8009dca:	d038      	beq.n	8009e3e <aci_gatt_add_serv+0x82>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8009dcc:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8009dce:	4622      	mov	r2, r4
 8009dd0:	f10d 0001 	add.w	r0, sp, #1
 8009dd4:	f001 fc4e 	bl	800b674 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8009dd8:	f104 0331 	add.w	r3, r4, #49	; 0x31
 8009ddc:	446b      	add	r3, sp
 8009dde:	f803 6c30 	strb.w	r6, [r3, #-48]
  indx++;
    
  buffer[indx] = max_attr_records;
 8009de2:	f104 0332 	add.w	r3, r4, #50	; 0x32
 8009de6:	eb0d 0203 	add.w	r2, sp, r3
 8009dea:	f802 5c30 	strb.w	r5, [r2, #-48]
  indx++;
 8009dee:	3403      	adds	r4, #3
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009df0:	ab05      	add	r3, sp, #20
 8009df2:	2100      	movs	r1, #0
 8009df4:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009df8:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009dfc:	9106      	str	r1, [sp, #24]
 8009dfe:	9107      	str	r1, [sp, #28]
 8009e00:	9108      	str	r1, [sp, #32]
 8009e02:	9109      	str	r1, [sp, #36]	; 0x24
 8009e04:	910a      	str	r1, [sp, #40]	; 0x28
 8009e06:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 8009e08:	223f      	movs	r2, #63	; 0x3f
 8009e0a:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 8009e0e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009e12:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 8009e16:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 8009e1a:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 8009e1c:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 8009e22:	a806      	add	r0, sp, #24
 8009e24:	f000 fabc 	bl	800a3a0 <hci_send_req>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	db0a      	blt.n	8009e42 <aci_gatt_add_serv+0x86>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8009e2c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8009e30:	b918      	cbnz	r0, 8009e3a <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8009e32:	f8bd 2015 	ldrh.w	r2, [sp, #21]
 8009e36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e38:	801a      	strh	r2, [r3, #0]

  return 0;
}
 8009e3a:	b00c      	add	sp, #48	; 0x30
 8009e3c:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 8009e3e:	2402      	movs	r4, #2
 8009e40:	e7c5      	b.n	8009dce <aci_gatt_add_serv+0x12>
    return BLE_STATUS_TIMEOUT;
 8009e42:	20ff      	movs	r0, #255	; 0xff
 8009e44:	e7f9      	b.n	8009e3a <aci_gatt_add_serv+0x7e>

08009e46 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8009e46:	b530      	push	{r4, r5, lr}
 8009e48:	b08f      	sub	sp, #60	; 0x3c
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8009e50:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 8009e54:	f88d 4002 	strb.w	r4, [sp, #2]
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
 8009e58:	2c01      	cmp	r4, #1
 8009e5a:	d056      	beq.n	8009f0a <aci_gatt_add_char+0xc4>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8009e5c:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8009e5e:	4622      	mov	r2, r4
 8009e60:	f10d 0003 	add.w	r0, sp, #3
 8009e64:	f001 fc06 	bl	800b674 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8009e68:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8009e6c:	eb0d 0203 	add.w	r2, sp, r3
 8009e70:	f802 5c38 	strb.w	r5, [r2, #-56]
  indx++;
    
  buffer[indx] = charProperties;
 8009e74:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8009e78:	446b      	add	r3, sp
 8009e7a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8009e7e:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = secPermissions;
 8009e82:	f104 033d 	add.w	r3, r4, #61	; 0x3d
 8009e86:	446b      	add	r3, sp
 8009e88:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8009e8c:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = gattEvtMask;
 8009e90:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 8009e94:	446b      	add	r3, sp
 8009e96:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8009e9a:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = encryKeySize;
 8009e9e:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8009ea2:	446b      	add	r3, sp
 8009ea4:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009ea8:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = isVariable;
 8009eac:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009eb0:	446b      	add	r3, sp
 8009eb2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8009eb6:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 8009eba:	3409      	adds	r4, #9
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009ebc:	ab07      	add	r3, sp, #28
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009ec4:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ec8:	9108      	str	r1, [sp, #32]
 8009eca:	9109      	str	r1, [sp, #36]	; 0x24
 8009ecc:	910a      	str	r1, [sp, #40]	; 0x28
 8009ece:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ed0:	910c      	str	r1, [sp, #48]	; 0x30
 8009ed2:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 8009ed4:	223f      	movs	r2, #63	; 0x3f
 8009ed6:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8009eda:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009ede:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 8009ee2:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 8009ee6:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 8009ee8:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8009eea:	2303      	movs	r3, #3
 8009eec:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8009eee:	a808      	add	r0, sp, #32
 8009ef0:	f000 fa56 	bl	800a3a0 <hci_send_req>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	db0a      	blt.n	8009f0e <aci_gatt_add_char+0xc8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8009ef8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8009efc:	b918      	cbnz	r0, 8009f06 <aci_gatt_add_char+0xc0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8009efe:	f8bd 201d 	ldrh.w	r2, [sp, #29]
 8009f02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f04:	801a      	strh	r2, [r3, #0]

  return 0;
}
 8009f06:	b00f      	add	sp, #60	; 0x3c
 8009f08:	bd30      	pop	{r4, r5, pc}
    uuid_len = 2;
 8009f0a:	2402      	movs	r4, #2
 8009f0c:	e7a7      	b.n	8009e5e <aci_gatt_add_char+0x18>
    return BLE_STATUS_TIMEOUT;
 8009f0e:	20ff      	movs	r0, #255	; 0xff
 8009f10:	e7f9      	b.n	8009f06 <aci_gatt_add_char+0xc0>

08009f12 <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8009f12:	2b7a      	cmp	r3, #122	; 0x7a
 8009f14:	d831      	bhi.n	8009f7a <aci_gatt_update_char_value+0x68>
{
 8009f16:	b510      	push	{r4, lr}
 8009f18:	b0a8      	sub	sp, #160	; 0xa0
 8009f1a:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8009f1c:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8009f20:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 8009f24:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 8009f28:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009f30:	f10d 000a 	add.w	r0, sp, #10
 8009f34:	f001 fb9e 	bl	800b674 <memcpy>
  indx +=  charValueLen;
 8009f38:	3406      	adds	r4, #6
 8009f3a:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	9122      	str	r1, [sp, #136]	; 0x88
 8009f40:	9123      	str	r1, [sp, #140]	; 0x8c
 8009f42:	9124      	str	r1, [sp, #144]	; 0x90
 8009f44:	9125      	str	r1, [sp, #148]	; 0x94
 8009f46:	9126      	str	r1, [sp, #152]	; 0x98
 8009f48:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 8009f4a:	233f      	movs	r3, #63	; 0x3f
 8009f4c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8009f50:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009f54:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 8009f58:	ab01      	add	r3, sp, #4
 8009f5a:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 8009f5c:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 8009f5e:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009f62:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 8009f64:	2301      	movs	r3, #1
 8009f66:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 8009f68:	a822      	add	r0, sp, #136	; 0x88
 8009f6a:	f000 fa19 	bl	800a3a0 <hci_send_req>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	db05      	blt.n	8009f7e <aci_gatt_update_char_value+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8009f72:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
    return status;
  }

  return 0;
}
 8009f76:	b028      	add	sp, #160	; 0xa0
 8009f78:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8009f7a:	2042      	movs	r0, #66	; 0x42
}
 8009f7c:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 8009f7e:	20ff      	movs	r0, #255	; 0xff
 8009f80:	e7f9      	b.n	8009f76 <aci_gatt_update_char_value+0x64>

08009f82 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8009f82:	b500      	push	{lr}
 8009f84:	b089      	sub	sp, #36	; 0x24
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8009f86:	f8ad 0004 	strh.w	r0, [sp, #4]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	9102      	str	r1, [sp, #8]
 8009f8e:	9103      	str	r1, [sp, #12]
 8009f90:	9104      	str	r1, [sp, #16]
 8009f92:	9105      	str	r1, [sp, #20]
 8009f94:	9106      	str	r1, [sp, #24]
 8009f96:	9107      	str	r1, [sp, #28]
    rq.ogf = OGF_VENDOR_CMD;
 8009f98:	233f      	movs	r3, #63	; 0x3f
 8009f9a:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8009f9e:	f240 1327 	movw	r3, #295	; 0x127
 8009fa2:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 8009fa6:	ab01      	add	r3, sp, #4
 8009fa8:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8009faa:	2302      	movs	r3, #2
 8009fac:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 8009fae:	f10d 0303 	add.w	r3, sp, #3
 8009fb2:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	9307      	str	r3, [sp, #28]

    if (hci_send_req(&rq, FALSE) < 0)
 8009fb8:	a802      	add	r0, sp, #8
 8009fba:	f000 f9f1 	bl	800a3a0 <hci_send_req>
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	db04      	blt.n	8009fcc <aci_gatt_allow_read+0x4a>
      return BLE_STATUS_TIMEOUT;

    return status;
 8009fc2:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 8009fc6:	b009      	add	sp, #36	; 0x24
 8009fc8:	f85d fb04 	ldr.w	pc, [sp], #4
      return BLE_STATUS_TIMEOUT;
 8009fcc:	20ff      	movs	r0, #255	; 0xff
 8009fce:	e7fa      	b.n	8009fc6 <aci_gatt_allow_read+0x44>

08009fd0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	b0a8      	sub	sp, #160	; 0xa0
 8009fd4:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8009fd6:	297e      	cmp	r1, #126	; 0x7e
 8009fd8:	d829      	bhi.n	800a02e <aci_hal_write_config_data+0x5e>
 8009fda:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 8009fdc:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 8009fe0:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8009fe4:	4622      	mov	r2, r4
 8009fe6:	f10d 0006 	add.w	r0, sp, #6
 8009fea:	f001 fb43 	bl	800b674 <memcpy>
  indx +=  len;
 8009fee:	3402      	adds	r4, #2
 8009ff0:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	9122      	str	r1, [sp, #136]	; 0x88
 8009ff6:	9123      	str	r1, [sp, #140]	; 0x8c
 8009ff8:	9124      	str	r1, [sp, #144]	; 0x90
 8009ffa:	9125      	str	r1, [sp, #148]	; 0x94
 8009ffc:	9126      	str	r1, [sp, #152]	; 0x98
 8009ffe:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800a000:	233f      	movs	r3, #63	; 0x3f
 800a002:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800a006:	230c      	movs	r3, #12
 800a008:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 800a00c:	ab01      	add	r3, sp, #4
 800a00e:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800a010:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 800a012:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 800a016:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800a018:	2301      	movs	r3, #1
 800a01a:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800a01c:	a822      	add	r0, sp, #136	; 0x88
 800a01e:	f000 f9bf 	bl	800a3a0 <hci_send_req>
 800a022:	2800      	cmp	r0, #0
 800a024:	db05      	blt.n	800a032 <aci_hal_write_config_data+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 800a026:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 800a02a:	b028      	add	sp, #160	; 0xa0
 800a02c:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800a02e:	2042      	movs	r0, #66	; 0x42
 800a030:	e7fb      	b.n	800a02a <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;
 800a032:	20ff      	movs	r0, #255	; 0xff
 800a034:	e7f9      	b.n	800a02a <aci_hal_write_config_data+0x5a>

0800a036 <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800a036:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a038:	b0a9      	sub	sp, #164	; 0xa4
 800a03a:	460c      	mov	r4, r1
 800a03c:	4616      	mov	r6, r2
 800a03e:	461d      	mov	r5, r3
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800a040:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a044:	2100      	movs	r1, #0
 800a046:	9122      	str	r1, [sp, #136]	; 0x88
 800a048:	9123      	str	r1, [sp, #140]	; 0x8c
 800a04a:	9124      	str	r1, [sp, #144]	; 0x90
 800a04c:	9125      	str	r1, [sp, #148]	; 0x94
 800a04e:	9126      	str	r1, [sp, #152]	; 0x98
 800a050:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800a052:	233f      	movs	r3, #63	; 0x3f
 800a054:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800a058:	230d      	movs	r3, #13
 800a05a:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = &cp;
 800a05e:	ab21      	add	r3, sp, #132	; 0x84
 800a060:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = sizeof(cp);
 800a062:	2301      	movs	r3, #1
 800a064:	9325      	str	r3, [sp, #148]	; 0x94
  rq.rparam = &rp;
 800a066:	ab01      	add	r3, sp, #4
 800a068:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = sizeof(rp);
 800a06a:	2380      	movs	r3, #128	; 0x80
 800a06c:	9327      	str	r3, [sp, #156]	; 0x9c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a06e:	a822      	add	r0, sp, #136	; 0x88
 800a070:	f000 f996 	bl	800a3a0 <hci_send_req>
 800a074:	2800      	cmp	r0, #0
 800a076:	db18      	blt.n	800a0aa <aci_hal_read_config_data+0x74>
    return BLE_STATUS_TIMEOUT;
  
  if(rp.status)
 800a078:	f89d 7004 	ldrb.w	r7, [sp, #4]
 800a07c:	b987      	cbnz	r7, 800a0a0 <aci_hal_read_config_data+0x6a>
    return rp.status;
  
  *data_len_out_p = rq.rlen-1;
 800a07e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a080:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800a084:	fa5f fc8c 	uxtb.w	ip, ip
 800a088:	f886 c000 	strb.w	ip, [r6]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a08c:	fa1f f38c 	uxth.w	r3, ip
 800a090:	42a3      	cmp	r3, r4
 800a092:	d908      	bls.n	800a0a6 <aci_hal_read_config_data+0x70>
 800a094:	4622      	mov	r2, r4
 800a096:	f10d 0105 	add.w	r1, sp, #5
 800a09a:	4628      	mov	r0, r5
 800a09c:	f001 faea 	bl	800b674 <memcpy>
  
  return 0;
}
 800a0a0:	4638      	mov	r0, r7
 800a0a2:	b029      	add	sp, #164	; 0xa4
 800a0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800a0a6:	4662      	mov	r2, ip
 800a0a8:	e7f5      	b.n	800a096 <aci_hal_read_config_data+0x60>
    return BLE_STATUS_TIMEOUT;
 800a0aa:	27ff      	movs	r7, #255	; 0xff
 800a0ac:	e7f8      	b.n	800a0a0 <aci_hal_read_config_data+0x6a>

0800a0ae <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800a0ae:	b500      	push	{lr}
 800a0b0:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800a0b2:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800a0b6:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	9102      	str	r1, [sp, #8]
 800a0be:	9103      	str	r1, [sp, #12]
 800a0c0:	9104      	str	r1, [sp, #16]
 800a0c2:	9105      	str	r1, [sp, #20]
 800a0c4:	9106      	str	r1, [sp, #24]
 800a0c6:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800a0c8:	233f      	movs	r3, #63	; 0x3f
 800a0ca:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800a0ce:	230f      	movs	r3, #15
 800a0d0:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 800a0d4:	ab01      	add	r3, sp, #4
 800a0d6:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800a0dc:	f10d 0303 	add.w	r3, sp, #3
 800a0e0:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800a0e6:	a802      	add	r0, sp, #8
 800a0e8:	f000 f95a 	bl	800a3a0 <hci_send_req>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	db04      	blt.n	800a0fa <aci_hal_set_tx_power_level+0x4c>
    return BLE_STATUS_TIMEOUT;

  return status;
 800a0f0:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800a0f4:	b009      	add	sp, #36	; 0x24
 800a0f6:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800a0fa:	20ff      	movs	r0, #255	; 0xff
 800a0fc:	e7fa      	b.n	800a0f4 <aci_hal_set_tx_power_level+0x46>

0800a0fe <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800a0fe:	b530      	push	{r4, r5, lr}
 800a100:	b085      	sub	sp, #20
 800a102:	4605      	mov	r5, r0
 800a104:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800a106:	ab02      	add	r3, sp, #8
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	f10d 030a 	add.w	r3, sp, #10
 800a10e:	f10d 020e 	add.w	r2, sp, #14
 800a112:	a903      	add	r1, sp, #12
 800a114:	f10d 000f 	add.w	r0, sp, #15
 800a118:	f000 f839 	bl	800a18e <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800a11c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800a120:	d114      	bne.n	800a14c <getBlueNRGVersion+0x4e>
    *hwVersion = hci_revision >> 8;
 800a122:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a126:	0a1a      	lsrs	r2, r3, #8
 800a128:	702a      	strb	r2, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	8023      	strh	r3, [r4, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800a130:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800a134:	0912      	lsrs	r2, r2, #4
 800a136:	0112      	lsls	r2, r2, #4
 800a138:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800a13c:	4313      	orrs	r3, r2
 800a13e:	8023      	strh	r3, [r4, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800a140:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800a144:	f002 020f 	and.w	r2, r2, #15
 800a148:	4313      	orrs	r3, r2
 800a14a:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800a14c:	b005      	add	sp, #20
 800a14e:	bd30      	pop	{r4, r5, pc}

0800a150 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800a150:	b500      	push	{lr}
 800a152:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a154:	2100      	movs	r1, #0
 800a156:	9102      	str	r1, [sp, #8]
 800a158:	9103      	str	r1, [sp, #12]
 800a15a:	9104      	str	r1, [sp, #16]
 800a15c:	9105      	str	r1, [sp, #20]
 800a15e:	9106      	str	r1, [sp, #24]
 800a160:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_HOST_CTL;
 800a162:	2303      	movs	r3, #3
 800a164:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 800a168:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800a16c:	f10d 0307 	add.w	r3, sp, #7
 800a170:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800a172:	2301      	movs	r3, #1
 800a174:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a176:	a802      	add	r0, sp, #8
 800a178:	f000 f912 	bl	800a3a0 <hci_send_req>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	db04      	blt.n	800a18a <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 800a180:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a184:	b009      	add	sp, #36	; 0x24
 800a186:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800a18a:	20ff      	movs	r0, #255	; 0xff
 800a18c:	e7fa      	b.n	800a184 <hci_reset+0x34>

0800a18e <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800a18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a192:	b08a      	sub	sp, #40	; 0x28
 800a194:	4680      	mov	r8, r0
 800a196:	460f      	mov	r7, r1
 800a198:	4616      	mov	r6, r2
 800a19a:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800a19c:	ac01      	add	r4, sp, #4
 800a19e:	2100      	movs	r1, #0
 800a1a0:	9101      	str	r1, [sp, #4]
 800a1a2:	9102      	str	r1, [sp, #8]
 800a1a4:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a1a8:	9104      	str	r1, [sp, #16]
 800a1aa:	9105      	str	r1, [sp, #20]
 800a1ac:	9106      	str	r1, [sp, #24]
 800a1ae:	9107      	str	r1, [sp, #28]
 800a1b0:	9108      	str	r1, [sp, #32]
 800a1b2:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_INFO_PARAM;
 800a1b4:	2304      	movs	r3, #4
 800a1b6:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 800a1c0:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800a1c2:	2309      	movs	r3, #9
 800a1c4:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a1c6:	a804      	add	r0, sp, #16
 800a1c8:	f000 f8ea 	bl	800a3a0 <hci_send_req>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	db16      	blt.n	800a1fe <hci_le_read_local_version+0x70>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800a1d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a1d4:	b980      	cbnz	r0, 800a1f8 <hci_le_read_local_version+0x6a>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800a1d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a1da:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 800a1de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a1e2:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800a1e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a1e8:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800a1ea:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 800a1ee:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800a1f0:	f8bd 200b 	ldrh.w	r2, [sp, #11]
 800a1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1f6:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 800a1f8:	b00a      	add	sp, #40	; 0x28
 800a1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800a1fe:	20ff      	movs	r0, #255	; 0xff
 800a200:	e7fa      	b.n	800a1f8 <hci_le_read_local_version+0x6a>

0800a202 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800a202:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a204:	b091      	sub	sp, #68	; 0x44
 800a206:	4604      	mov	r4, r0
 800a208:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800a20a:	af02      	add	r7, sp, #8
 800a20c:	2620      	movs	r6, #32
 800a20e:	4632      	mov	r2, r6
 800a210:	2100      	movs	r1, #0
 800a212:	4638      	mov	r0, r7
 800a214:	f001 f9ea 	bl	800b5ec <memset>
  scan_resp_cp.length = length;
 800a218:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800a21c:	4622      	mov	r2, r4
 800a21e:	2c1f      	cmp	r4, #31
 800a220:	bf28      	it	cs
 800a222:	221f      	movcs	r2, #31
 800a224:	4629      	mov	r1, r5
 800a226:	f10d 0009 	add.w	r0, sp, #9
 800a22a:	f001 fa23 	bl	800b674 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800a22e:	2100      	movs	r1, #0
 800a230:	910a      	str	r1, [sp, #40]	; 0x28
 800a232:	910b      	str	r1, [sp, #44]	; 0x2c
 800a234:	910c      	str	r1, [sp, #48]	; 0x30
 800a236:	910d      	str	r1, [sp, #52]	; 0x34
 800a238:	910e      	str	r1, [sp, #56]	; 0x38
 800a23a:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_LE_CTL;
 800a23c:	2308      	movs	r3, #8
 800a23e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800a242:	2309      	movs	r3, #9
 800a244:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 800a248:	970c      	str	r7, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800a24a:	960d      	str	r6, [sp, #52]	; 0x34
  rq.rparam = &status;
 800a24c:	f10d 0307 	add.w	r3, sp, #7
 800a250:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800a252:	2301      	movs	r3, #1
 800a254:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800a256:	a80a      	add	r0, sp, #40	; 0x28
 800a258:	f000 f8a2 	bl	800a3a0 <hci_send_req>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	db03      	blt.n	800a268 <hci_le_set_scan_resp_data+0x66>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800a260:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a264:	b011      	add	sp, #68	; 0x44
 800a266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800a268:	20ff      	movs	r0, #255	; 0xff
 800a26a:	e7fb      	b.n	800a264 <hci_le_set_scan_resp_data+0x62>

0800a26c <verify_packet>:
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800a26c:	7a03      	ldrb	r3, [r0, #8]
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d107      	bne.n	800a282 <verify_packet+0x16>
    return 1; /* Incorrect type */
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800a272:	7a82      	ldrb	r2, [r0, #10]
 800a274:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 800a278:	3b03      	subs	r3, #3
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d103      	bne.n	800a286 <verify_packet+0x1a>
    return 2; /* Wrong length (packet truncated or too long) */
  
  return 0;      
 800a27e:	2000      	movs	r0, #0
 800a280:	4770      	bx	lr
    return 1; /* Incorrect type */
 800a282:	2001      	movs	r0, #1
 800a284:	4770      	bx	lr
    return 2; /* Wrong length (packet truncated or too long) */
 800a286:	2002      	movs	r0, #2
}
 800a288:	4770      	bx	lr
	...

0800a28c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800a28c:	b510      	push	{r4, lr}
 800a28e:	b0a2      	sub	sp, #136	; 0x88
 800a290:	4614      	mov	r4, r2
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800a292:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 800a296:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
 800a29a:	f8ad c004 	strh.w	ip, [sp, #4]
  hc.plen = plen;
 800a29e:	f88d 2006 	strb.w	r2, [sp, #6]

  payload[0] = HCI_COMMAND_PKT;
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	f88d 1008 	strb.w	r1, [sp, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800a2a8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800a2ac:	b2d1      	uxtb	r1, r2
 800a2ae:	f8ad 0009 	strh.w	r0, [sp, #9]
 800a2b2:	f88d 100b 	strb.w	r1, [sp, #11]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	a803      	add	r0, sp, #12
 800a2ba:	f001 f9db 	bl	800b674 <memcpy>
  
  if (hciContext.io.Send)
 800a2be:	4b04      	ldr	r3, [pc, #16]	; (800a2d0 <send_cmd+0x44>)
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	b113      	cbz	r3, 800a2ca <send_cmd+0x3e>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800a2c4:	1d21      	adds	r1, r4, #4
 800a2c6:	a802      	add	r0, sp, #8
 800a2c8:	4798      	blx	r3
  }
}
 800a2ca:	b022      	add	sp, #136	; 0x88
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20002638 	.word	0x20002638

0800a2d4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	b082      	sub	sp, #8
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a2d8:	e00a      	b.n	800a2f0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800a2da:	4c09      	ldr	r4, [pc, #36]	; (800a300 <free_event_list+0x2c>)
 800a2dc:	a901      	add	r1, sp, #4
 800a2de:	f104 0020 	add.w	r0, r4, #32
 800a2e2:	f000 f997 	bl	800a614 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800a2e6:	9901      	ldr	r1, [sp, #4]
 800a2e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a2ec:	f000 f97b 	bl	800a5e6 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800a2f0:	4804      	ldr	r0, [pc, #16]	; (800a304 <free_event_list+0x30>)
 800a2f2:	f000 f9b1 	bl	800a658 <list_get_size>
 800a2f6:	2801      	cmp	r0, #1
 800a2f8:	ddef      	ble.n	800a2da <free_event_list+0x6>
  }
}
 800a2fa:	b002      	add	sp, #8
 800a2fc:	bd10      	pop	{r4, pc}
 800a2fe:	bf00      	nop
 800a300:	20002638 	.word	0x20002638
 800a304:	20002660 	.word	0x20002660

0800a308 <move_list>:
{
 800a308:	b530      	push	{r4, r5, lr}
 800a30a:	b083      	sub	sp, #12
 800a30c:	4605      	mov	r5, r0
 800a30e:	460c      	mov	r4, r1
  while (!list_is_empty(src_list))
 800a310:	e007      	b.n	800a322 <move_list+0x1a>
    list_remove_tail(src_list, &tmp_node);
 800a312:	a901      	add	r1, sp, #4
 800a314:	4620      	mov	r0, r4
 800a316:	f000 f98e 	bl	800a636 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800a31a:	9901      	ldr	r1, [sp, #4]
 800a31c:	4628      	mov	r0, r5
 800a31e:	f000 f956 	bl	800a5ce <list_insert_head>
  while (!list_is_empty(src_list))
 800a322:	4620      	mov	r0, r4
 800a324:	f000 f947 	bl	800a5b6 <list_is_empty>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d0f2      	beq.n	800a312 <move_list+0xa>
}
 800a32c:	b003      	add	sp, #12
 800a32e:	bd30      	pop	{r4, r5, pc}

0800a330 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a330:	b510      	push	{r4, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 800a332:	b108      	cbz	r0, 800a338 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a334:	4a12      	ldr	r2, [pc, #72]	; (800a380 <hci_init+0x50>)
 800a336:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a338:	4c11      	ldr	r4, [pc, #68]	; (800a380 <hci_init+0x50>)
 800a33a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a33e:	f000 f937 	bl	800a5b0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a342:	f104 0020 	add.w	r0, r4, #32
 800a346:	f000 f933 	bl	800a5b0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a34a:	f7fa fb6b 	bl	8004a24 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a34e:	2400      	movs	r4, #0
 800a350:	e00a      	b.n	800a368 <hci_init+0x38>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a352:	480b      	ldr	r0, [pc, #44]	; (800a380 <hci_init+0x50>)
 800a354:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a358:	218c      	movs	r1, #140	; 0x8c
 800a35a:	fb01 3104 	mla	r1, r1, r4, r3
 800a35e:	3028      	adds	r0, #40	; 0x28
 800a360:	f000 f941 	bl	800a5e6 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a364:	3401      	adds	r4, #1
 800a366:	b2e4      	uxtb	r4, r4
 800a368:	2c04      	cmp	r4, #4
 800a36a:	d9f2      	bls.n	800a352 <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <hci_init+0x50>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	b10b      	cbz	r3, 800a376 <hci_init+0x46>
 800a372:	2000      	movs	r0, #0
 800a374:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a376:	4b02      	ldr	r3, [pc, #8]	; (800a380 <hci_init+0x50>)
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	b103      	cbz	r3, 800a37e <hci_init+0x4e>
 800a37c:	4798      	blx	r3
}
 800a37e:	bd10      	pop	{r4, pc}
 800a380:	20002638 	.word	0x20002638

0800a384 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a384:	6802      	ldr	r2, [r0, #0]
 800a386:	4b05      	ldr	r3, [pc, #20]	; (800a39c <hci_register_io_bus+0x18>)
 800a388:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800a38a:	68c2      	ldr	r2, [r0, #12]
 800a38c:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800a38e:	6902      	ldr	r2, [r0, #16]
 800a390:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a392:	6982      	ldr	r2, [r0, #24]
 800a394:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800a396:	6882      	ldr	r2, [r0, #8]
 800a398:	609a      	str	r2, [r3, #8]
}
 800a39a:	4770      	bx	lr
 800a39c:	20002638 	.word	0x20002638

0800a3a0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	460c      	mov	r4, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a3a8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a3ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3b0:	8802      	ldrh	r2, [r0, #0]
 800a3b2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a3b6:	b29e      	uxth	r6, r3
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	9303      	str	r3, [sp, #12]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a3bc:	a801      	add	r0, sp, #4
 800a3be:	f000 f8f7 	bl	800a5b0 <list_init_head>

  free_event_list();
 800a3c2:	f7ff ff87 	bl	800a2d4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a3c6:	68ab      	ldr	r3, [r5, #8]
 800a3c8:	7b2a      	ldrb	r2, [r5, #12]
 800a3ca:	8869      	ldrh	r1, [r5, #2]
 800a3cc:	8828      	ldrh	r0, [r5, #0]
 800a3ce:	f7ff ff5d 	bl	800a28c <send_cmd>
  
  if (async)
 800a3d2:	2c00      	cmp	r4, #0
 800a3d4:	f040 8086 	bne.w	800a4e4 <hci_send_req+0x144>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a3d8:	f7fb fd9a 	bl	8005f10 <HAL_GetTick>
 800a3dc:	4604      	mov	r4, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a3de:	f7fb fd97 	bl	8005f10 <HAL_GetTick>
 800a3e2:	1b00      	subs	r0, r0, r4
 800a3e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a3e8:	d822      	bhi.n	800a430 <hci_send_req+0x90>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a3ea:	483f      	ldr	r0, [pc, #252]	; (800a4e8 <hci_send_req+0x148>)
 800a3ec:	f000 f8e3 	bl	800a5b6 <list_is_empty>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d1f4      	bne.n	800a3de <hci_send_req+0x3e>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a3f4:	a903      	add	r1, sp, #12
 800a3f6:	483c      	ldr	r0, [pc, #240]	; (800a4e8 <hci_send_req+0x148>)
 800a3f8:	f000 f90c 	bl	800a614 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a3fc:	9b03      	ldr	r3, [sp, #12]

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a3fe:	7a1a      	ldrb	r2, [r3, #8]
 800a400:	2a04      	cmp	r2, #4
 800a402:	d128      	bne.n	800a456 <hci_send_req+0xb6>
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a404:	f103 010b 	add.w	r1, r3, #11
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a408:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
 800a40c:	1ec4      	subs	r4, r0, #3
    
      switch (event_pckt->evt) 
 800a40e:	7a5a      	ldrb	r2, [r3, #9]
 800a410:	2a10      	cmp	r2, #16
 800a412:	d00d      	beq.n	800a430 <hci_send_req+0x90>
 800a414:	d819      	bhi.n	800a44a <hci_send_req+0xaa>
 800a416:	2a0e      	cmp	r2, #14
 800a418:	d036      	beq.n	800a488 <hci_send_req+0xe8>
 800a41a:	2a0f      	cmp	r2, #15
 800a41c:	d11b      	bne.n	800a456 <hci_send_req+0xb6>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
        
        if (cs->opcode != opcode)
 800a41e:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 800a422:	42b2      	cmp	r2, r6
 800a424:	d104      	bne.n	800a430 <hci_send_req+0x90>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a426:	686a      	ldr	r2, [r5, #4]
 800a428:	2a0f      	cmp	r2, #15
 800a42a:	d024      	beq.n	800a476 <hci_send_req+0xd6>
          if (cs->status) {
 800a42c:	7adb      	ldrb	r3, [r3, #11]
 800a42e:	b193      	cbz	r3, 800a456 <hci_send_req+0xb6>
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a430:	9903      	ldr	r1, [sp, #12]
 800a432:	b111      	cbz	r1, 800a43a <hci_send_req+0x9a>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a434:	482d      	ldr	r0, [pc, #180]	; (800a4ec <hci_send_req+0x14c>)
 800a436:	f000 f8ca 	bl	800a5ce <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a43a:	a901      	add	r1, sp, #4
 800a43c:	482a      	ldr	r0, [pc, #168]	; (800a4e8 <hci_send_req+0x148>)
 800a43e:	f7ff ff63 	bl	800a308 <move_list>

  return -1;
 800a442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800a446:	b004      	add	sp, #16
 800a448:	bd70      	pop	{r4, r5, r6, pc}
      switch (event_pckt->evt) 
 800a44a:	2a3e      	cmp	r2, #62	; 0x3e
 800a44c:	d103      	bne.n	800a456 <hci_send_req+0xb6>
        if (me->subevent != r->event)
 800a44e:	7ad9      	ldrb	r1, [r3, #11]
 800a450:	686a      	ldr	r2, [r5, #4]
 800a452:	4291      	cmp	r1, r2
 800a454:	d033      	beq.n	800a4be <hci_send_req+0x11e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a456:	4825      	ldr	r0, [pc, #148]	; (800a4ec <hci_send_req+0x14c>)
 800a458:	f000 f8ad 	bl	800a5b6 <list_is_empty>
 800a45c:	b120      	cbz	r0, 800a468 <hci_send_req+0xc8>
 800a45e:	4822      	ldr	r0, [pc, #136]	; (800a4e8 <hci_send_req+0x148>)
 800a460:	f000 f8a9 	bl	800a5b6 <list_is_empty>
 800a464:	2800      	cmp	r0, #0
 800a466:	d136      	bne.n	800a4d6 <hci_send_req+0x136>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a468:	9903      	ldr	r1, [sp, #12]
 800a46a:	a801      	add	r0, sp, #4
 800a46c:	f000 f8bb 	bl	800a5e6 <list_insert_tail>
      hciReadPacket=NULL;
 800a470:	2300      	movs	r3, #0
 800a472:	9303      	str	r3, [sp, #12]
 800a474:	e7b0      	b.n	800a3d8 <hci_send_req+0x38>
        r->rlen = MIN(len, r->rlen);
 800a476:	696a      	ldr	r2, [r5, #20]
 800a478:	42a2      	cmp	r2, r4
 800a47a:	bf28      	it	cs
 800a47c:	4622      	movcs	r2, r4
 800a47e:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a480:	6928      	ldr	r0, [r5, #16]
 800a482:	f001 f8f7 	bl	800b674 <memcpy>
        goto done;
 800a486:	e00d      	b.n	800a4a4 <hci_send_req+0x104>
        if (cc->opcode != opcode)
 800a488:	899a      	ldrh	r2, [r3, #12]
 800a48a:	42b2      	cmp	r2, r6
 800a48c:	d1d0      	bne.n	800a430 <hci_send_req+0x90>
        len -= EVT_CMD_COMPLETE_SIZE;
 800a48e:	3806      	subs	r0, #6
        r->rlen = MIN(len, r->rlen);
 800a490:	696a      	ldr	r2, [r5, #20]
 800a492:	4282      	cmp	r2, r0
 800a494:	bf28      	it	cs
 800a496:	4602      	movcs	r2, r0
 800a498:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a49a:	f103 010e 	add.w	r1, r3, #14
 800a49e:	6928      	ldr	r0, [r5, #16]
 800a4a0:	f001 f8e8 	bl	800b674 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a4a4:	4c12      	ldr	r4, [pc, #72]	; (800a4f0 <hci_send_req+0x150>)
 800a4a6:	9903      	ldr	r1, [sp, #12]
 800a4a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a4ac:	f000 f88f 	bl	800a5ce <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a4b0:	a901      	add	r1, sp, #4
 800a4b2:	f104 0020 	add.w	r0, r4, #32
 800a4b6:	f7ff ff27 	bl	800a308 <move_list>
  return 0;
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e7c3      	b.n	800a446 <hci_send_req+0xa6>
        len -= 1;
 800a4be:	3804      	subs	r0, #4
        r->rlen = MIN(len, r->rlen);
 800a4c0:	696a      	ldr	r2, [r5, #20]
 800a4c2:	4282      	cmp	r2, r0
 800a4c4:	bf28      	it	cs
 800a4c6:	4602      	movcs	r2, r0
 800a4c8:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a4ca:	f103 010c 	add.w	r1, r3, #12
 800a4ce:	6928      	ldr	r0, [r5, #16]
 800a4d0:	f001 f8d0 	bl	800b674 <memcpy>
        goto done;
 800a4d4:	e7e6      	b.n	800a4a4 <hci_send_req+0x104>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a4d6:	9903      	ldr	r1, [sp, #12]
 800a4d8:	4804      	ldr	r0, [pc, #16]	; (800a4ec <hci_send_req+0x14c>)
 800a4da:	f000 f884 	bl	800a5e6 <list_insert_tail>
      hciReadPacket=NULL;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	9303      	str	r3, [sp, #12]
 800a4e2:	e779      	b.n	800a3d8 <hci_send_req+0x38>
    return 0;
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	e7ae      	b.n	800a446 <hci_send_req+0xa6>
 800a4e8:	20002658 	.word	0x20002658
 800a4ec:	20002660 	.word	0x20002660
 800a4f0:	20002638 	.word	0x20002638

0800a4f4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a4f4:	b510      	push	{r4, lr}
 800a4f6:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a4fc:	e006      	b.n	800a50c <hci_user_evt_proc+0x18>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a4fe:	9801      	ldr	r0, [sp, #4]
 800a500:	3008      	adds	r0, #8
 800a502:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a504:	9901      	ldr	r1, [sp, #4]
 800a506:	4809      	ldr	r0, [pc, #36]	; (800a52c <hci_user_evt_proc+0x38>)
 800a508:	f000 f86d 	bl	800a5e6 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a50c:	4808      	ldr	r0, [pc, #32]	; (800a530 <hci_user_evt_proc+0x3c>)
 800a50e:	f000 f852 	bl	800a5b6 <list_is_empty>
 800a512:	b948      	cbnz	r0, 800a528 <hci_user_evt_proc+0x34>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a514:	4c07      	ldr	r4, [pc, #28]	; (800a534 <hci_user_evt_proc+0x40>)
 800a516:	a901      	add	r1, sp, #4
 800a518:	f104 0020 	add.w	r0, r4, #32
 800a51c:	f000 f87a 	bl	800a614 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800a520:	69e3      	ldr	r3, [r4, #28]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1eb      	bne.n	800a4fe <hci_user_evt_proc+0xa>
 800a526:	e7ed      	b.n	800a504 <hci_user_evt_proc+0x10>
  }
}
 800a528:	b002      	add	sp, #8
 800a52a:	bd10      	pop	{r4, pc}
 800a52c:	20002660 	.word	0x20002660
 800a530:	20002658 	.word	0x20002658
 800a534:	20002638 	.word	0x20002638

0800a538 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a538:	b530      	push	{r4, r5, lr}
 800a53a:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 800a53c:	2300      	movs	r3, #0
 800a53e:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a540:	4818      	ldr	r0, [pc, #96]	; (800a5a4 <hci_notify_asynch_evt+0x6c>)
 800a542:	f000 f838 	bl	800a5b6 <list_is_empty>
 800a546:	b118      	cbz	r0, 800a550 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 800a548:	2401      	movs	r4, #1
  }
  return ret;

}
 800a54a:	4620      	mov	r0, r4
 800a54c:	b003      	add	sp, #12
 800a54e:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a550:	4c15      	ldr	r4, [pc, #84]	; (800a5a8 <hci_notify_asynch_evt+0x70>)
 800a552:	a901      	add	r1, sp, #4
 800a554:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a558:	f000 f85c 	bl	800a614 <list_remove_head>
    if (hciContext.io.Receive)
 800a55c:	68e3      	ldr	r3, [r4, #12]
 800a55e:	b1fb      	cbz	r3, 800a5a0 <hci_notify_asynch_evt+0x68>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a560:	2180      	movs	r1, #128	; 0x80
 800a562:	9801      	ldr	r0, [sp, #4]
 800a564:	3008      	adds	r0, #8
 800a566:	4798      	blx	r3
      if (data_len > 0)
 800a568:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800a56c:	d012      	beq.n	800a594 <hci_notify_asynch_evt+0x5c>
        hciReadPacket->data_len = data_len;
 800a56e:	9d01      	ldr	r5, [sp, #4]
 800a570:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a574:	4628      	mov	r0, r5
 800a576:	f7ff fe79 	bl	800a26c <verify_packet>
 800a57a:	4604      	mov	r4, r0
 800a57c:	b920      	cbnz	r0, 800a588 <hci_notify_asynch_evt+0x50>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a57e:	4629      	mov	r1, r5
 800a580:	480a      	ldr	r0, [pc, #40]	; (800a5ac <hci_notify_asynch_evt+0x74>)
 800a582:	f000 f830 	bl	800a5e6 <list_insert_tail>
 800a586:	e7e0      	b.n	800a54a <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a588:	4629      	mov	r1, r5
 800a58a:	4806      	ldr	r0, [pc, #24]	; (800a5a4 <hci_notify_asynch_evt+0x6c>)
 800a58c:	f000 f81f 	bl	800a5ce <list_insert_head>
  int32_t ret = 0;
 800a590:	2400      	movs	r4, #0
 800a592:	e7da      	b.n	800a54a <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a594:	9901      	ldr	r1, [sp, #4]
 800a596:	4803      	ldr	r0, [pc, #12]	; (800a5a4 <hci_notify_asynch_evt+0x6c>)
 800a598:	f000 f819 	bl	800a5ce <list_insert_head>
  int32_t ret = 0;
 800a59c:	2400      	movs	r4, #0
 800a59e:	e7d4      	b.n	800a54a <hci_notify_asynch_evt+0x12>
 800a5a0:	2400      	movs	r4, #0
  return ret;
 800a5a2:	e7d2      	b.n	800a54a <hci_notify_asynch_evt+0x12>
 800a5a4:	20002660 	.word	0x20002660
 800a5a8:	20002638 	.word	0x20002638
 800a5ac:	20002658 	.word	0x20002658

0800a5b0 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800a5b0:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800a5b2:	6040      	str	r0, [r0, #4]
}
 800a5b4:	4770      	bx	lr

0800a5b6 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5b6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a5ba:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a5bc:	6802      	ldr	r2, [r0, #0]
 800a5be:	4282      	cmp	r2, r0
 800a5c0:	d003      	beq.n	800a5ca <list_is_empty+0x14>
  {
    return_value = 1;
  }
  else
  {
    return_value = 0;
 800a5c2:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5c4:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800a5c8:	4770      	bx	lr
    return_value = 1;
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	e7fa      	b.n	800a5c4 <list_is_empty+0xe>

0800a5ce <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5ce:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a5d2:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a5d4:	6802      	ldr	r2, [r0, #0]
 800a5d6:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800a5d8:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800a5da:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800a5dc:	680a      	ldr	r2, [r1, #0]
 800a5de:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a5e4:	4770      	bx	lr

0800a5e6 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5e6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a5ea:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a5ec:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800a5ee:	6842      	ldr	r2, [r0, #4]
 800a5f0:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800a5f2:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800a5f4:	684a      	ldr	r2, [r1, #4]
 800a5f6:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5f8:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a5fc:	4770      	bx	lr

0800a5fe <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5fe:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a602:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a604:	6841      	ldr	r1, [r0, #4]
 800a606:	6803      	ldr	r3, [r0, #0]
 800a608:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 800a60a:	6841      	ldr	r1, [r0, #4]
 800a60c:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a60e:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a612:	4770      	bx	lr

0800a614 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a618:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a61c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a61e:	6800      	ldr	r0, [r0, #0]
 800a620:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 800a622:	f7ff ffec 	bl	800a5fe <list_remove_node>
  (*node)->next = NULL;
 800a626:	6822      	ldr	r2, [r4, #0]
 800a628:	2300      	movs	r3, #0
 800a62a:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800a62c:	6822      	ldr	r2, [r4, #0]
 800a62e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a630:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a634:	bd38      	pop	{r3, r4, r5, pc}

0800a636 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a636:	b538      	push	{r3, r4, r5, lr}
 800a638:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a63a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a63e:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a640:	6840      	ldr	r0, [r0, #4]
 800a642:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 800a644:	f7ff ffdb 	bl	800a5fe <list_remove_node>
  (*node)->next = NULL;
 800a648:	6822      	ldr	r2, [r4, #0]
 800a64a:	2300      	movs	r3, #0
 800a64c:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800a64e:	6822      	ldr	r2, [r4, #0]
 800a650:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a652:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a656:	bd38      	pop	{r3, r4, r5, pc}

0800a658 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a658:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a65a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a65e:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a660:	6803      	ldr	r3, [r0, #0]
  int size = 0;
 800a662:	2000      	movs	r0, #0
  while (temp != listHead)
 800a664:	e001      	b.n	800a66a <list_get_size+0x12>
  {
    size++;
 800a666:	3001      	adds	r0, #1
    temp = temp->next;		
 800a668:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d1fb      	bne.n	800a666 <list_get_size+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a66e:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800a672:	4770      	bx	lr

0800a674 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a674:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a676:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a67a:	b184      	cbz	r4, 800a69e <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a67c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a680:	b17b      	cbz	r3, 800a6a2 <USBD_CDC_EP0_RxReady+0x2e>
 800a682:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800a686:	28ff      	cmp	r0, #255	; 0xff
 800a688:	d00d      	beq.n	800a6a6 <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800a690:	4621      	mov	r1, r4
 800a692:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a694:	23ff      	movs	r3, #255	; 0xff
 800a696:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a69a:	2000      	movs	r0, #0
}
 800a69c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800a69e:	2003      	movs	r0, #3
 800a6a0:	e7fc      	b.n	800a69c <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e7fa      	b.n	800a69c <USBD_CDC_EP0_RxReady+0x28>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	e7f8      	b.n	800a69c <USBD_CDC_EP0_RxReady+0x28>
	...

0800a6ac <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a6ac:	2343      	movs	r3, #67	; 0x43
 800a6ae:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800a6b0:	4800      	ldr	r0, [pc, #0]	; (800a6b4 <USBD_CDC_GetFSCfgDesc+0x8>)
 800a6b2:	4770      	bx	lr
 800a6b4:	20000088 	.word	0x20000088

0800a6b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a6b8:	2343      	movs	r3, #67	; 0x43
 800a6ba:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800a6bc:	4800      	ldr	r0, [pc, #0]	; (800a6c0 <USBD_CDC_GetHSCfgDesc+0x8>)
 800a6be:	4770      	bx	lr
 800a6c0:	200000cc 	.word	0x200000cc

0800a6c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a6c4:	2343      	movs	r3, #67	; 0x43
 800a6c6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a6c8:	4800      	ldr	r0, [pc, #0]	; (800a6cc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a6ca:	4770      	bx	lr
 800a6cc:	20000110 	.word	0x20000110

0800a6d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a6d0:	230a      	movs	r3, #10
 800a6d2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800a6d4:	4800      	ldr	r0, [pc, #0]	; (800a6d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a6d6:	4770      	bx	lr
 800a6d8:	20000154 	.word	0x20000154

0800a6dc <USBD_CDC_DataOut>:
{
 800a6dc:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6de:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800a6e2:	b175      	cbz	r5, 800a702 <USBD_CDC_DataOut+0x26>
 800a6e4:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a6e6:	f7fb f9b7 	bl	8005a58 <USBD_LL_GetRxDataSize>
 800a6ea:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a6ee:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800a6f8:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800a6fc:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800a6fe:	2000      	movs	r0, #0
}
 800a700:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800a702:	2003      	movs	r0, #3
 800a704:	e7fc      	b.n	800a700 <USBD_CDC_DataOut+0x24>

0800a706 <USBD_CDC_DataIn>:
{
 800a706:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a708:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800a70c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800a710:	b353      	cbz	r3, 800a768 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a712:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800a716:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a71a:	6992      	ldr	r2, [r2, #24]
 800a71c:	b14a      	cbz	r2, 800a732 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a71e:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800a722:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800a726:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800a728:	fbb2 fcf4 	udiv	ip, r2, r4
 800a72c:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a730:	b172      	cbz	r2, 800a750 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800a732:	2200      	movs	r2, #0
 800a734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a738:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800a73c:	6914      	ldr	r4, [r2, #16]
 800a73e:	b1ac      	cbz	r4, 800a76c <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a740:	460a      	mov	r2, r1
 800a742:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800a746:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800a74a:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800a74c:	2000      	movs	r0, #0
}
 800a74e:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800a750:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800a754:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a758:	2400      	movs	r4, #0
 800a75a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a75c:	4623      	mov	r3, r4
 800a75e:	4622      	mov	r2, r4
 800a760:	f7fb f96c 	bl	8005a3c <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800a764:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a766:	e7f2      	b.n	800a74e <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800a768:	2003      	movs	r0, #3
 800a76a:	e7f0      	b.n	800a74e <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800a76c:	2000      	movs	r0, #0
 800a76e:	e7ee      	b.n	800a74e <USBD_CDC_DataIn+0x48>

0800a770 <USBD_CDC_Setup>:
{
 800a770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a772:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a774:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800a778:	2300      	movs	r3, #0
 800a77a:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800a77e:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800a782:	2e00      	cmp	r6, #0
 800a784:	d06c      	beq.n	800a860 <USBD_CDC_Setup+0xf0>
 800a786:	4607      	mov	r7, r0
 800a788:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a78a:	780b      	ldrb	r3, [r1, #0]
 800a78c:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800a790:	d02a      	beq.n	800a7e8 <USBD_CDC_Setup+0x78>
 800a792:	2d20      	cmp	r5, #32
 800a794:	d15e      	bne.n	800a854 <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800a796:	88ca      	ldrh	r2, [r1, #6]
 800a798:	b1f2      	cbz	r2, 800a7d8 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800a79a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a79e:	d00f      	beq.n	800a7c0 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a7a0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	7860      	ldrb	r0, [r4, #1]
 800a7aa:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a7ac:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a7ae:	2a07      	cmp	r2, #7
 800a7b0:	bf28      	it	cs
 800a7b2:	2207      	movcs	r2, #7
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	f000 fdfa 	bl	800b3b0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a7bc:	2500      	movs	r5, #0
 800a7be:	e04c      	b.n	800a85a <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800a7c0:	784b      	ldrb	r3, [r1, #1]
 800a7c2:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a7c6:	798b      	ldrb	r3, [r1, #6]
 800a7c8:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a7cc:	88ca      	ldrh	r2, [r1, #6]
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	f000 fe03 	bl	800b3da <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800a7d4:	2500      	movs	r5, #0
 800a7d6:	e040      	b.n	800a85a <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a7d8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	7848      	ldrb	r0, [r1, #1]
 800a7e2:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	e038      	b.n	800a85a <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800a7e8:	784e      	ldrb	r6, [r1, #1]
 800a7ea:	2e0b      	cmp	r6, #11
 800a7ec:	d82e      	bhi.n	800a84c <USBD_CDC_Setup+0xdc>
 800a7ee:	e8df f006 	tbb	[pc, r6]
 800a7f2:	3406      	.short	0x3406
 800a7f4:	2d2d2d2d 	.word	0x2d2d2d2d
 800a7f8:	2d2d2d2d 	.word	0x2d2d2d2d
 800a7fc:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b03      	cmp	r3, #3
 800a806:	d003      	beq.n	800a810 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800a808:	f000 faa9 	bl	800ad5e <USBD_CtlError>
            ret = USBD_FAIL;
 800a80c:	2503      	movs	r5, #3
 800a80e:	e024      	b.n	800a85a <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a810:	2202      	movs	r2, #2
 800a812:	a901      	add	r1, sp, #4
 800a814:	f000 fdcc 	bl	800b3b0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800a818:	4635      	mov	r5, r6
 800a81a:	e01e      	b.n	800a85a <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b03      	cmp	r3, #3
 800a824:	d003      	beq.n	800a82e <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800a826:	f000 fa9a 	bl	800ad5e <USBD_CtlError>
            ret = USBD_FAIL;
 800a82a:	2503      	movs	r5, #3
 800a82c:	e015      	b.n	800a85a <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a82e:	2201      	movs	r2, #1
 800a830:	f10d 0107 	add.w	r1, sp, #7
 800a834:	f000 fdbc 	bl	800b3b0 <USBD_CtlSendData>
 800a838:	e00f      	b.n	800a85a <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a83a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b03      	cmp	r3, #3
 800a842:	d00a      	beq.n	800a85a <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800a844:	f000 fa8b 	bl	800ad5e <USBD_CtlError>
            ret = USBD_FAIL;
 800a848:	2503      	movs	r5, #3
 800a84a:	e006      	b.n	800a85a <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800a84c:	f000 fa87 	bl	800ad5e <USBD_CtlError>
          ret = USBD_FAIL;
 800a850:	2503      	movs	r5, #3
          break;
 800a852:	e002      	b.n	800a85a <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800a854:	f000 fa83 	bl	800ad5e <USBD_CtlError>
      ret = USBD_FAIL;
 800a858:	2503      	movs	r5, #3
}
 800a85a:	4628      	mov	r0, r5
 800a85c:	b003      	add	sp, #12
 800a85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800a860:	2503      	movs	r5, #3
 800a862:	e7fa      	b.n	800a85a <USBD_CDC_Setup+0xea>

0800a864 <USBD_CDC_DeInit>:
{
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a868:	2181      	movs	r1, #129	; 0x81
 800a86a:	f7fb f8b4 	bl	80059d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a86e:	2500      	movs	r5, #0
 800a870:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a872:	2101      	movs	r1, #1
 800a874:	4620      	mov	r0, r4
 800a876:	f7fb f8ae 	bl	80059d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a87a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a87e:	2182      	movs	r1, #130	; 0x82
 800a880:	4620      	mov	r0, r4
 800a882:	f7fb f8a8 	bl	80059d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a886:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a88a:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800a88e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800a892:	b14b      	cbz	r3, 800a8a8 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a894:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a89c:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800a8a0:	f000 fdd0 	bl	800b444 <free>
    pdev->pClassData = NULL;
 800a8a4:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}

0800a8ac <USBD_CDC_Init>:
{
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a8b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a8b4:	f000 fdbe 	bl	800b434 <malloc>
  if (hcdc == NULL)
 800a8b8:	b3b8      	cbz	r0, 800a92a <USBD_CDC_Init+0x7e>
 800a8ba:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800a8bc:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8c0:	7c23      	ldrb	r3, [r4, #16]
 800a8c2:	bbbb      	cbnz	r3, 800a934 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	2181      	movs	r1, #129	; 0x81
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f7fb f878 	bl	80059c2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8d2:	2501      	movs	r5, #1
 800a8d4:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8da:	2202      	movs	r2, #2
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f7fb f86f 	bl	80059c2 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8e4:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a8ee:	2308      	movs	r3, #8
 800a8f0:	2203      	movs	r2, #3
 800a8f2:	2182      	movs	r1, #130	; 0x82
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f7fb f864 	bl	80059c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a900:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4798      	blx	r3
  hcdc->TxState = 0U;
 800a908:	2300      	movs	r3, #0
 800a90a:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800a90e:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a912:	7c25      	ldrb	r5, [r4, #16]
 800a914:	bb15      	cbnz	r5, 800a95c <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a91a:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800a91e:	2101      	movs	r1, #1
 800a920:	4620      	mov	r0, r4
 800a922:	f7fb f892 	bl	8005a4a <USBD_LL_PrepareReceive>
}
 800a926:	4628      	mov	r0, r5
 800a928:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a930:	2502      	movs	r5, #2
 800a932:	e7f8      	b.n	800a926 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	2202      	movs	r2, #2
 800a938:	2181      	movs	r1, #129	; 0x81
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7fb f841 	bl	80059c2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a940:	2501      	movs	r5, #1
 800a942:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a944:	2340      	movs	r3, #64	; 0x40
 800a946:	2202      	movs	r2, #2
 800a948:	4629      	mov	r1, r5
 800a94a:	4620      	mov	r0, r4
 800a94c:	f7fb f839 	bl	80059c2 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a950:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a954:	2310      	movs	r3, #16
 800a956:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800a95a:	e7c8      	b.n	800a8ee <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800a962:	2101      	movs	r1, #1
 800a964:	4620      	mov	r0, r4
 800a966:	f7fb f870 	bl	8005a4a <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800a96a:	2500      	movs	r5, #0
 800a96c:	e7db      	b.n	800a926 <USBD_CDC_Init+0x7a>

0800a96e <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800a96e:	b119      	cbz	r1, 800a978 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800a970:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a974:	2000      	movs	r0, #0
 800a976:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a978:	2003      	movs	r0, #3
}
 800a97a:	4770      	bx	lr

0800a97c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a97c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a980:	b12b      	cbz	r3, 800a98e <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800a982:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a986:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a98a:	2000      	movs	r0, #0
 800a98c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a98e:	2003      	movs	r0, #3
}
 800a990:	4770      	bx	lr

0800a992 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a992:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800a996:	b11b      	cbz	r3, 800a9a0 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800a998:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a99c:	2000      	movs	r0, #0
 800a99e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800a9a0:	2003      	movs	r0, #3
}
 800a9a2:	4770      	bx	lr

0800a9a4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9a4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800a9a8:	b1a2      	cbz	r2, 800a9d4 <USBD_CDC_TransmitPacket+0x30>
{
 800a9aa:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800a9ac:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800a9b0:	b10b      	cbz	r3, 800a9b6 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a9b2:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800a9b4:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a9bc:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800a9c0:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a9c2:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800a9c6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800a9ca:	2181      	movs	r1, #129	; 0x81
 800a9cc:	f7fb f836 	bl	8005a3c <USBD_LL_Transmit>
    ret = USBD_OK;
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	e7ef      	b.n	800a9b4 <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800a9d4:	2003      	movs	r0, #3
}
 800a9d6:	4770      	bx	lr

0800a9d8 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9d8:	b198      	cbz	r0, 800aa02 <USBD_Init+0x2a>
{
 800a9da:	b508      	push	{r3, lr}
 800a9dc:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a9e4:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a9e8:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9ec:	b109      	cbz	r1, 800a9f2 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800a9ee:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9f8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fa ffac 	bl	8005958 <USBD_LL_Init>

  return ret;
}
 800aa00:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800aa02:	2003      	movs	r0, #3
}
 800aa04:	4770      	bx	lr

0800aa06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa06:	b510      	push	{r4, lr}
 800aa08:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800aa10:	b161      	cbz	r1, 800aa2c <USBD_RegisterClass+0x26>
 800aa12:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aa14:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800aa18:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800aa1a:	b14b      	cbz	r3, 800aa30 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aa1c:	f10d 0006 	add.w	r0, sp, #6
 800aa20:	4798      	blx	r3
 800aa22:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aa26:	2000      	movs	r0, #0
}
 800aa28:	b002      	add	sp, #8
 800aa2a:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800aa2c:	2003      	movs	r0, #3
 800aa2e:	e7fb      	b.n	800aa28 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800aa30:	2000      	movs	r0, #0
 800aa32:	e7f9      	b.n	800aa28 <USBD_RegisterClass+0x22>

0800aa34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa34:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa36:	f7fa ffbd 	bl	80059b4 <USBD_LL_Start>
}
 800aa3a:	bd08      	pop	{r3, pc}

0800aa3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa3c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800aa3e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aa42:	b113      	cbz	r3, 800aa4a <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4798      	blx	r3
  }

  return ret;
}
 800aa48:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa4a:	2003      	movs	r0, #3
 800aa4c:	e7fc      	b.n	800aa48 <USBD_SetClassConfig+0xc>

0800aa4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa4e:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aa50:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aa54:	b10b      	cbz	r3, 800aa5a <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4798      	blx	r3
  }

  return USBD_OK;
}
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	bd08      	pop	{r3, pc}

0800aa5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa5e:	b538      	push	{r3, r4, r5, lr}
 800aa60:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa62:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f965 	bl	800ad36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aa72:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800aa76:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aa7a:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800aa7e:	f001 031f 	and.w	r3, r1, #31
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d00d      	beq.n	800aaa2 <USBD_LL_SetupStage+0x44>
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d010      	beq.n	800aaac <USBD_LL_SetupStage+0x4e>
 800aa8a:	b12b      	cbz	r3, 800aa98 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aa8c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800aa90:	4620      	mov	r0, r4
 800aa92:	f7fa ffa7 	bl	80059e4 <USBD_LL_StallEP>
      break;
 800aa96:	e003      	b.n	800aaa0 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 fb09 	bl	800b0b2 <USBD_StdDevReq>
  }

  return ret;
}
 800aaa0:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fb3c 	bl	800b122 <USBD_StdItfReq>
      break;
 800aaaa:	e7f9      	b.n	800aaa0 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aaac:	4629      	mov	r1, r5
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 fb6b 	bl	800b18a <USBD_StdEPReq>
      break;
 800aab4:	e7f4      	b.n	800aaa0 <USBD_LL_SetupStage+0x42>

0800aab6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aab6:	b538      	push	{r3, r4, r5, lr}
 800aab8:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aaba:	460d      	mov	r5, r1
 800aabc:	bb41      	cbnz	r1, 800ab10 <USBD_LL_DataOutStage+0x5a>
 800aabe:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aac0:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800aac4:	2a03      	cmp	r2, #3
 800aac6:	d001      	beq.n	800aacc <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800aac8:	4608      	mov	r0, r1
}
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800aacc:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800aad0:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800aad4:	4291      	cmp	r1, r2
 800aad6:	d809      	bhi.n	800aaec <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d00f      	beq.n	800ab02 <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800aae2:	4620      	mov	r0, r4
 800aae4:	f000 fc90 	bl	800b408 <USBD_CtlSendStatus>
  return USBD_OK;
 800aae8:	4628      	mov	r0, r5
 800aaea:	e7ee      	b.n	800aaca <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800aaec:	1a89      	subs	r1, r1, r2
 800aaee:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aaf2:	428a      	cmp	r2, r1
 800aaf4:	bf28      	it	cs
 800aaf6:	460a      	movcs	r2, r1
 800aaf8:	4619      	mov	r1, r3
 800aafa:	f000 fc7d 	bl	800b3f8 <USBD_CtlContinueRx>
  return USBD_OK;
 800aafe:	4628      	mov	r0, r5
 800ab00:	e7e3      	b.n	800aaca <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800ab02:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0ea      	beq.n	800aae2 <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800ab0c:	4798      	blx	r3
 800ab0e:	e7e8      	b.n	800aae2 <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab10:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d001      	beq.n	800ab1e <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	e7d5      	b.n	800aaca <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800ab1e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	b10b      	cbz	r3, 800ab2a <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ab26:	4798      	blx	r3
        if (ret != USBD_OK)
 800ab28:	e7cf      	b.n	800aaca <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	e7cd      	b.n	800aaca <USBD_LL_DataOutStage+0x14>

0800ab2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab2e:	b538      	push	{r3, r4, r5, lr}
 800ab30:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab32:	460d      	mov	r5, r1
 800ab34:	2900      	cmp	r1, #0
 800ab36:	d14a      	bne.n	800abce <USBD_LL_DataInStage+0xa0>
 800ab38:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab3a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800ab3e:	2a02      	cmp	r2, #2
 800ab40:	d005      	beq.n	800ab4e <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ab42:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d03c      	beq.n	800abc4 <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800ab4a:	4628      	mov	r0, r5
}
 800ab4c:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800ab4e:	69c2      	ldr	r2, [r0, #28]
 800ab50:	6a01      	ldr	r1, [r0, #32]
 800ab52:	428a      	cmp	r2, r1
 800ab54:	d80e      	bhi.n	800ab74 <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800ab56:	428a      	cmp	r2, r1
 800ab58:	d018      	beq.n	800ab8c <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d027      	beq.n	800abb4 <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab64:	2180      	movs	r1, #128	; 0x80
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7fa ff3c 	bl	80059e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 fc56 	bl	800b41e <USBD_CtlReceiveStatus>
 800ab72:	e7e6      	b.n	800ab42 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800ab74:	1a52      	subs	r2, r2, r1
 800ab76:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab78:	4619      	mov	r1, r3
 800ab7a:	f000 fc26 	bl	800b3ca <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab7e:	2300      	movs	r3, #0
 800ab80:	461a      	mov	r2, r3
 800ab82:	4619      	mov	r1, r3
 800ab84:	4620      	mov	r0, r4
 800ab86:	f7fa ff60 	bl	8005a4a <USBD_LL_PrepareReceive>
 800ab8a:	e7da      	b.n	800ab42 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800ab8c:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	d8e3      	bhi.n	800ab5a <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800ab92:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d2df      	bcs.n	800ab5a <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	f000 fc14 	bl	800b3ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aba2:	2100      	movs	r1, #0
 800aba4:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aba8:	460b      	mov	r3, r1
 800abaa:	460a      	mov	r2, r1
 800abac:	4620      	mov	r0, r4
 800abae:	f7fa ff4c 	bl	8005a4a <USBD_LL_PrepareReceive>
 800abb2:	e7c6      	b.n	800ab42 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800abb4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0d2      	beq.n	800ab64 <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800abbe:	4620      	mov	r0, r4
 800abc0:	4798      	blx	r3
 800abc2:	e7cf      	b.n	800ab64 <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800abca:	4628      	mov	r0, r5
 800abcc:	e7be      	b.n	800ab4c <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d001      	beq.n	800abdc <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800abd8:	2000      	movs	r0, #0
 800abda:	e7b7      	b.n	800ab4c <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800abdc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	b10b      	cbz	r3, 800abe8 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800abe4:	4798      	blx	r3
        if (ret != USBD_OK)
 800abe6:	e7b1      	b.n	800ab4c <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800abe8:	2000      	movs	r0, #0
 800abea:	e7af      	b.n	800ab4c <USBD_LL_DataInStage+0x1e>

0800abec <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abec:	2301      	movs	r3, #1
 800abee:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abf2:	2300      	movs	r3, #0
 800abf4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800abf8:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800abfa:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800abfe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ac02:	b1f3      	cbz	r3, 800ac42 <USBD_LL_Reset+0x56>
{
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800ac08:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800ac0c:	b11a      	cbz	r2, 800ac16 <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	b10b      	cbz	r3, 800ac16 <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac12:	2100      	movs	r1, #0
 800ac14:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac16:	2340      	movs	r3, #64	; 0x40
 800ac18:	2200      	movs	r2, #0
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f7fa fed0 	bl	80059c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac22:	2601      	movs	r6, #1
 800ac24:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac28:	2540      	movs	r5, #64	; 0x40
 800ac2a:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac2e:	462b      	mov	r3, r5
 800ac30:	2200      	movs	r2, #0
 800ac32:	2180      	movs	r1, #128	; 0x80
 800ac34:	4620      	mov	r0, r4
 800ac36:	f7fa fec4 	bl	80059c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac3a:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac3c:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800ac3e:	2000      	movs	r0, #0
}
 800ac40:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800ac42:	2003      	movs	r0, #3
}
 800ac44:	4770      	bx	lr

0800ac46 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ac46:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800ac48:	2000      	movs	r0, #0
 800ac4a:	4770      	bx	lr

0800ac4c <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800ac4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac56:	2304      	movs	r3, #4
 800ac58:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	4770      	bx	lr

0800ac60 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac60:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	d001      	beq.n	800ac6e <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800ac6e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800ac78:	e7f7      	b.n	800ac6a <USBD_LL_Resume+0xa>

0800ac7a <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800ac7a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800ac7e:	b162      	cbz	r2, 800ac9a <USBD_LL_SOF+0x20>
{
 800ac80:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d001      	beq.n	800ac90 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800ac8c:	2000      	movs	r0, #0
}
 800ac8e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800ac90:	69d3      	ldr	r3, [r2, #28]
 800ac92:	b123      	cbz	r3, 800ac9e <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800ac94:	4798      	blx	r3
  return USBD_OK;
 800ac96:	2000      	movs	r0, #0
 800ac98:	e7f9      	b.n	800ac8e <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800ac9a:	2003      	movs	r0, #3
}
 800ac9c:	4770      	bx	lr
  return USBD_OK;
 800ac9e:	2000      	movs	r0, #0
 800aca0:	e7f5      	b.n	800ac8e <USBD_LL_SOF+0x14>

0800aca2 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800aca2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800aca6:	b162      	cbz	r2, 800acc2 <USBD_LL_IsoINIncomplete+0x20>
{
 800aca8:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acaa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b03      	cmp	r3, #3
 800acb2:	d001      	beq.n	800acb8 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800acb4:	2000      	movs	r0, #0
}
 800acb6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800acb8:	6a13      	ldr	r3, [r2, #32]
 800acba:	b123      	cbz	r3, 800acc6 <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800acbc:	4798      	blx	r3
  return USBD_OK;
 800acbe:	2000      	movs	r0, #0
 800acc0:	e7f9      	b.n	800acb6 <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 800acc2:	2003      	movs	r0, #3
}
 800acc4:	4770      	bx	lr
  return USBD_OK;
 800acc6:	2000      	movs	r0, #0
 800acc8:	e7f5      	b.n	800acb6 <USBD_LL_IsoINIncomplete+0x14>

0800acca <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800acca:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800acce:	b162      	cbz	r2, 800acea <USBD_LL_IsoOUTIncomplete+0x20>
{
 800acd0:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acd2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b03      	cmp	r3, #3
 800acda:	d001      	beq.n	800ace0 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800acdc:	2000      	movs	r0, #0
}
 800acde:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ace0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800ace2:	b123      	cbz	r3, 800acee <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ace4:	4798      	blx	r3
  return USBD_OK;
 800ace6:	2000      	movs	r0, #0
 800ace8:	e7f9      	b.n	800acde <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 800acea:	2003      	movs	r0, #3
}
 800acec:	4770      	bx	lr
  return USBD_OK;
 800acee:	2000      	movs	r0, #0
 800acf0:	e7f5      	b.n	800acde <USBD_LL_IsoOUTIncomplete+0x14>

0800acf2 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800acf2:	2000      	movs	r0, #0
 800acf4:	4770      	bx	lr

0800acf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800acf6:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800acfe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ad02:	b113      	cbz	r3, 800ad0a <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	7901      	ldrb	r1, [r0, #4]
 800ad08:	4798      	blx	r3
  }

  return USBD_OK;
}
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	bd08      	pop	{r3, pc}

0800ad0e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad0e:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800ad10:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800ad12:	e002      	b.n	800ad1a <USBD_GetLen+0xc>
  {
    len++;
 800ad14:	3001      	adds	r0, #1
 800ad16:	b2c0      	uxtb	r0, r0
    pbuff++;
 800ad18:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	2a00      	cmp	r2, #0
 800ad1e:	d1f9      	bne.n	800ad14 <USBD_GetLen+0x6>
  }

  return len;
}
 800ad20:	4770      	bx	lr

0800ad22 <USBD_SetFeature>:
{
 800ad22:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad24:	884b      	ldrh	r3, [r1, #2]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d000      	beq.n	800ad2c <USBD_SetFeature+0xa>
}
 800ad2a:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800ad2c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad30:	f000 fb6a 	bl	800b408 <USBD_CtlSendStatus>
}
 800ad34:	e7f9      	b.n	800ad2a <USBD_SetFeature+0x8>

0800ad36 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800ad36:	780b      	ldrb	r3, [r1, #0]
 800ad38:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad3a:	784b      	ldrb	r3, [r1, #1]
 800ad3c:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800ad3e:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800ad40:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800ad46:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800ad48:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad4a:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800ad50:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800ad52:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad54:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800ad5a:	80c3      	strh	r3, [r0, #6]
}
 800ad5c:	4770      	bx	lr

0800ad5e <USBD_CtlError>:
{
 800ad5e:	b510      	push	{r4, lr}
 800ad60:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad62:	2180      	movs	r1, #128	; 0x80
 800ad64:	f7fa fe3e 	bl	80059e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad68:	2100      	movs	r1, #0
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f7fa fe3a 	bl	80059e4 <USBD_LL_StallEP>
}
 800ad70:	bd10      	pop	{r4, pc}

0800ad72 <USBD_GetDescriptor>:
{
 800ad72:	b530      	push	{r4, r5, lr}
 800ad74:	b083      	sub	sp, #12
 800ad76:	4604      	mov	r4, r0
 800ad78:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800ad80:	884a      	ldrh	r2, [r1, #2]
 800ad82:	0a13      	lsrs	r3, r2, #8
 800ad84:	3b01      	subs	r3, #1
 800ad86:	2b06      	cmp	r3, #6
 800ad88:	f200 80ab 	bhi.w	800aee2 <USBD_GetDescriptor+0x170>
 800ad8c:	e8df f003 	tbb	[pc, r3]
 800ad90:	a9331f04 	.word	0xa9331f04
 800ad94:	8da9      	.short	0x8da9
 800ad96:	9a          	.byte	0x9a
 800ad97:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f10d 0106 	add.w	r1, sp, #6
 800ada2:	7c00      	ldrb	r0, [r0, #16]
 800ada4:	4798      	blx	r3
  if (req->wLength != 0U)
 800ada6:	88ea      	ldrh	r2, [r5, #6]
 800ada8:	2a00      	cmp	r2, #0
 800adaa:	f000 80a3 	beq.w	800aef4 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800adae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 8099 	beq.w	800aeea <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 800adb8:	429a      	cmp	r2, r3
 800adba:	bf28      	it	cs
 800adbc:	461a      	movcs	r2, r3
 800adbe:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adc2:	4601      	mov	r1, r0
 800adc4:	4620      	mov	r0, r4
 800adc6:	f000 faf3 	bl	800b3b0 <USBD_CtlSendData>
}
 800adca:	b003      	add	sp, #12
 800adcc:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adce:	7c03      	ldrb	r3, [r0, #16]
 800add0:	b943      	cbnz	r3, 800ade4 <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800add2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800add6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add8:	f10d 0006 	add.w	r0, sp, #6
 800addc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adde:	2302      	movs	r3, #2
 800ade0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ade2:	e7e0      	b.n	800ada6 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ade4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800ade8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adea:	f10d 0006 	add.w	r0, sp, #6
 800adee:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adf0:	2302      	movs	r3, #2
 800adf2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800adf4:	e7d7      	b.n	800ada6 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	2a05      	cmp	r2, #5
 800adfa:	d852      	bhi.n	800aea2 <USBD_GetDescriptor+0x130>
 800adfc:	e8df f002 	tbb	[pc, r2]
 800ae00:	2a1d1003 	.word	0x2a1d1003
 800ae04:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae06:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	b123      	cbz	r3, 800ae18 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae0e:	f10d 0106 	add.w	r1, sp, #6
 800ae12:	7c00      	ldrb	r0, [r0, #16]
 800ae14:	4798      	blx	r3
  if (err != 0U)
 800ae16:	e7c6      	b.n	800ada6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800ae18:	4629      	mov	r1, r5
 800ae1a:	f7ff ffa0 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800ae1e:	e7d4      	b.n	800adca <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae20:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	b123      	cbz	r3, 800ae32 <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae28:	f10d 0106 	add.w	r1, sp, #6
 800ae2c:	7c00      	ldrb	r0, [r0, #16]
 800ae2e:	4798      	blx	r3
  if (err != 0U)
 800ae30:	e7b9      	b.n	800ada6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800ae32:	4629      	mov	r1, r5
 800ae34:	f7ff ff93 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800ae38:	e7c7      	b.n	800adca <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae3a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	b123      	cbz	r3, 800ae4c <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae42:	f10d 0106 	add.w	r1, sp, #6
 800ae46:	7c00      	ldrb	r0, [r0, #16]
 800ae48:	4798      	blx	r3
  if (err != 0U)
 800ae4a:	e7ac      	b.n	800ada6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	f7ff ff86 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800ae52:	e7ba      	b.n	800adca <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae54:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	b123      	cbz	r3, 800ae66 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae5c:	f10d 0106 	add.w	r1, sp, #6
 800ae60:	7c00      	ldrb	r0, [r0, #16]
 800ae62:	4798      	blx	r3
  if (err != 0U)
 800ae64:	e79f      	b.n	800ada6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800ae66:	4629      	mov	r1, r5
 800ae68:	f7ff ff79 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800ae6c:	e7ad      	b.n	800adca <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ae72:	695b      	ldr	r3, [r3, #20]
 800ae74:	b123      	cbz	r3, 800ae80 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae76:	f10d 0106 	add.w	r1, sp, #6
 800ae7a:	7c00      	ldrb	r0, [r0, #16]
 800ae7c:	4798      	blx	r3
  if (err != 0U)
 800ae7e:	e792      	b.n	800ada6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800ae80:	4629      	mov	r1, r5
 800ae82:	f7ff ff6c 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800ae86:	e7a0      	b.n	800adca <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	b123      	cbz	r3, 800ae9a <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae90:	f10d 0106 	add.w	r1, sp, #6
 800ae94:	7c00      	ldrb	r0, [r0, #16]
 800ae96:	4798      	blx	r3
  if (err != 0U)
 800ae98:	e785      	b.n	800ada6 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	f7ff ff5f 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800aea0:	e793      	b.n	800adca <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 800aea2:	4629      	mov	r1, r5
 800aea4:	f7ff ff5b 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800aea8:	e78f      	b.n	800adca <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeaa:	7c03      	ldrb	r3, [r0, #16]
 800aeac:	b933      	cbnz	r3, 800aebc <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aeae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb4:	f10d 0006 	add.w	r0, sp, #6
 800aeb8:	4798      	blx	r3
  if (err != 0U)
 800aeba:	e774      	b.n	800ada6 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7ff ff4e 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800aec2:	e782      	b.n	800adca <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec4:	7c03      	ldrb	r3, [r0, #16]
 800aec6:	b943      	cbnz	r3, 800aeda <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aec8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800aecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aece:	f10d 0006 	add.w	r0, sp, #6
 800aed2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aed4:	2307      	movs	r3, #7
 800aed6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800aed8:	e765      	b.n	800ada6 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800aeda:	4629      	mov	r1, r5
 800aedc:	f7ff ff3f 	bl	800ad5e <USBD_CtlError>
  if (err != 0U)
 800aee0:	e773      	b.n	800adca <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800aee2:	4629      	mov	r1, r5
 800aee4:	f7ff ff3b 	bl	800ad5e <USBD_CtlError>
    return;
 800aee8:	e76f      	b.n	800adca <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800aeea:	4629      	mov	r1, r5
 800aeec:	4620      	mov	r0, r4
 800aeee:	f7ff ff36 	bl	800ad5e <USBD_CtlError>
 800aef2:	e76a      	b.n	800adca <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fa87 	bl	800b408 <USBD_CtlSendStatus>
 800aefa:	e766      	b.n	800adca <USBD_GetDescriptor+0x58>

0800aefc <USBD_SetAddress>:
{
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af00:	888b      	ldrh	r3, [r1, #4]
 800af02:	b9fb      	cbnz	r3, 800af44 <USBD_SetAddress+0x48>
 800af04:	88cb      	ldrh	r3, [r1, #6]
 800af06:	b9eb      	cbnz	r3, 800af44 <USBD_SetAddress+0x48>
 800af08:	884b      	ldrh	r3, [r1, #2]
 800af0a:	2b7f      	cmp	r3, #127	; 0x7f
 800af0c:	d81a      	bhi.n	800af44 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af0e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af12:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d00c      	beq.n	800af36 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800af1c:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af20:	4629      	mov	r1, r5
 800af22:	f7fa fd84 	bl	8005a2e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af26:	4620      	mov	r0, r4
 800af28:	f000 fa6e 	bl	800b408 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800af2c:	b135      	cbz	r5, 800af3c <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af2e:	2302      	movs	r3, #2
 800af30:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800af34:	e009      	b.n	800af4a <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800af36:	f7ff ff12 	bl	800ad5e <USBD_CtlError>
 800af3a:	e006      	b.n	800af4a <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af3c:	2301      	movs	r3, #1
 800af3e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800af42:	e002      	b.n	800af4a <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800af44:	4620      	mov	r0, r4
 800af46:	f7ff ff0a 	bl	800ad5e <USBD_CtlError>
}
 800af4a:	bd38      	pop	{r3, r4, r5, pc}

0800af4c <USBD_SetConfig>:
{
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	4604      	mov	r4, r0
 800af50:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800af52:	788d      	ldrb	r5, [r1, #2]
 800af54:	4b2e      	ldr	r3, [pc, #184]	; (800b010 <USBD_SetConfig+0xc4>)
 800af56:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af58:	2d01      	cmp	r5, #1
 800af5a:	d810      	bhi.n	800af7e <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800af5c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b02      	cmp	r3, #2
 800af64:	d00f      	beq.n	800af86 <USBD_SetConfig+0x3a>
 800af66:	2b03      	cmp	r3, #3
 800af68:	d023      	beq.n	800afb2 <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800af6a:	f7ff fef8 	bl	800ad5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af6e:	4b28      	ldr	r3, [pc, #160]	; (800b010 <USBD_SetConfig+0xc4>)
 800af70:	7819      	ldrb	r1, [r3, #0]
 800af72:	4620      	mov	r0, r4
 800af74:	f7ff fd6b 	bl	800aa4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af78:	2503      	movs	r5, #3
}
 800af7a:	4628      	mov	r0, r5
 800af7c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800af7e:	f7ff feee 	bl	800ad5e <USBD_CtlError>
    return USBD_FAIL;
 800af82:	2503      	movs	r5, #3
 800af84:	e7f9      	b.n	800af7a <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800af86:	b18d      	cbz	r5, 800afac <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800af88:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af8a:	4629      	mov	r1, r5
 800af8c:	f7ff fd56 	bl	800aa3c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800af90:	4605      	mov	r5, r0
 800af92:	b120      	cbz	r0, 800af9e <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800af94:	4631      	mov	r1, r6
 800af96:	4620      	mov	r0, r4
 800af98:	f7ff fee1 	bl	800ad5e <USBD_CtlError>
 800af9c:	e7ed      	b.n	800af7a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 fa32 	bl	800b408 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afa4:	2303      	movs	r3, #3
 800afa6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800afaa:	e7e6      	b.n	800af7a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800afac:	f000 fa2c 	bl	800b408 <USBD_CtlSendStatus>
 800afb0:	e7e3      	b.n	800af7a <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800afb2:	b1cd      	cbz	r5, 800afe8 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800afb4:	6841      	ldr	r1, [r0, #4]
 800afb6:	428d      	cmp	r5, r1
 800afb8:	d025      	beq.n	800b006 <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afba:	b2c9      	uxtb	r1, r1
 800afbc:	f7ff fd47 	bl	800aa4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800afc0:	4b13      	ldr	r3, [pc, #76]	; (800b010 <USBD_SetConfig+0xc4>)
 800afc2:	7819      	ldrb	r1, [r3, #0]
 800afc4:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afc6:	4620      	mov	r0, r4
 800afc8:	f7ff fd38 	bl	800aa3c <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800afcc:	4605      	mov	r5, r0
 800afce:	b1b0      	cbz	r0, 800affe <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800afd0:	4631      	mov	r1, r6
 800afd2:	4620      	mov	r0, r4
 800afd4:	f7ff fec3 	bl	800ad5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afd8:	7921      	ldrb	r1, [r4, #4]
 800afda:	4620      	mov	r0, r4
 800afdc:	f7ff fd37 	bl	800aa4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afe0:	2302      	movs	r3, #2
 800afe2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800afe6:	e7c8      	b.n	800af7a <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afe8:	2302      	movs	r3, #2
 800afea:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afee:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aff0:	4629      	mov	r1, r5
 800aff2:	f7ff fd2c 	bl	800aa4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 fa06 	bl	800b408 <USBD_CtlSendStatus>
 800affc:	e7bd      	b.n	800af7a <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800affe:	4620      	mov	r0, r4
 800b000:	f000 fa02 	bl	800b408 <USBD_CtlSendStatus>
 800b004:	e7b9      	b.n	800af7a <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800b006:	f000 f9ff 	bl	800b408 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b00a:	2500      	movs	r5, #0
 800b00c:	e7b5      	b.n	800af7a <USBD_SetConfig+0x2e>
 800b00e:	bf00      	nop
 800b010:	20002924 	.word	0x20002924

0800b014 <USBD_GetConfig>:
{
 800b014:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800b016:	88cb      	ldrh	r3, [r1, #6]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d10b      	bne.n	800b034 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800b01c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b020:	b2db      	uxtb	r3, r3
 800b022:	2b02      	cmp	r3, #2
 800b024:	d909      	bls.n	800b03a <USBD_GetConfig+0x26>
 800b026:	2b03      	cmp	r3, #3
 800b028:	d109      	bne.n	800b03e <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b02a:	2201      	movs	r2, #1
 800b02c:	1d01      	adds	r1, r0, #4
 800b02e:	f000 f9bf 	bl	800b3b0 <USBD_CtlSendData>
        break;
 800b032:	e001      	b.n	800b038 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800b034:	f7ff fe93 	bl	800ad5e <USBD_CtlError>
}
 800b038:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800b03a:	b25b      	sxtb	r3, r3
 800b03c:	b913      	cbnz	r3, 800b044 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800b03e:	f7ff fe8e 	bl	800ad5e <USBD_CtlError>
}
 800b042:	e7f9      	b.n	800b038 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800b044:	4601      	mov	r1, r0
 800b046:	2300      	movs	r3, #0
 800b048:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b04c:	2201      	movs	r2, #1
 800b04e:	f000 f9af 	bl	800b3b0 <USBD_CtlSendData>
        break;
 800b052:	e7f1      	b.n	800b038 <USBD_GetConfig+0x24>

0800b054 <USBD_GetStatus>:
{
 800b054:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800b056:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b05a:	3b01      	subs	r3, #1
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d812      	bhi.n	800b086 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800b060:	88cb      	ldrh	r3, [r1, #6]
 800b062:	2b02      	cmp	r3, #2
 800b064:	d10c      	bne.n	800b080 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b066:	2301      	movs	r3, #1
 800b068:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800b06a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800b06e:	b10b      	cbz	r3, 800b074 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b070:	2303      	movs	r3, #3
 800b072:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b074:	2202      	movs	r2, #2
 800b076:	f100 010c 	add.w	r1, r0, #12
 800b07a:	f000 f999 	bl	800b3b0 <USBD_CtlSendData>
}
 800b07e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800b080:	f7ff fe6d 	bl	800ad5e <USBD_CtlError>
        break;
 800b084:	e7fb      	b.n	800b07e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800b086:	f7ff fe6a 	bl	800ad5e <USBD_CtlError>
}
 800b08a:	e7f8      	b.n	800b07e <USBD_GetStatus+0x2a>

0800b08c <USBD_ClrFeature>:
{
 800b08c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800b08e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b092:	3b01      	subs	r3, #1
 800b094:	2b02      	cmp	r3, #2
 800b096:	d809      	bhi.n	800b0ac <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b098:	884b      	ldrh	r3, [r1, #2]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d000      	beq.n	800b0a0 <USBD_ClrFeature+0x14>
}
 800b09e:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b0a6:	f000 f9af 	bl	800b408 <USBD_CtlSendStatus>
 800b0aa:	e7f8      	b.n	800b09e <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800b0ac:	f7ff fe57 	bl	800ad5e <USBD_CtlError>
}
 800b0b0:	e7f5      	b.n	800b09e <USBD_ClrFeature+0x12>

0800b0b2 <USBD_StdDevReq>:
{
 800b0b2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0b4:	780c      	ldrb	r4, [r1, #0]
 800b0b6:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800b0ba:	2c20      	cmp	r4, #32
 800b0bc:	d006      	beq.n	800b0cc <USBD_StdDevReq+0x1a>
 800b0be:	2c40      	cmp	r4, #64	; 0x40
 800b0c0:	d004      	beq.n	800b0cc <USBD_StdDevReq+0x1a>
 800b0c2:	b154      	cbz	r4, 800b0da <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800b0c4:	f7ff fe4b 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b0c8:	2400      	movs	r4, #0
      break;
 800b0ca:	e004      	b.n	800b0d6 <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0cc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	4798      	blx	r3
 800b0d4:	4604      	mov	r4, r0
}
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800b0da:	784d      	ldrb	r5, [r1, #1]
 800b0dc:	2d09      	cmp	r5, #9
 800b0de:	d81d      	bhi.n	800b11c <USBD_StdDevReq+0x6a>
 800b0e0:	e8df f005 	tbb	[pc, r5]
 800b0e4:	161c1912 	.word	0x161c1912
 800b0e8:	1c05081c 	.word	0x1c05081c
 800b0ec:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800b0ee:	f7ff fe40 	bl	800ad72 <USBD_GetDescriptor>
          break;
 800b0f2:	e7f0      	b.n	800b0d6 <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800b0f4:	f7ff ff02 	bl	800aefc <USBD_SetAddress>
          break;
 800b0f8:	e7ed      	b.n	800b0d6 <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800b0fa:	f7ff ff27 	bl	800af4c <USBD_SetConfig>
 800b0fe:	4604      	mov	r4, r0
          break;
 800b100:	e7e9      	b.n	800b0d6 <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800b102:	f7ff ff87 	bl	800b014 <USBD_GetConfig>
          break;
 800b106:	e7e6      	b.n	800b0d6 <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800b108:	f7ff ffa4 	bl	800b054 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800b10c:	462c      	mov	r4, r5
          break;
 800b10e:	e7e2      	b.n	800b0d6 <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800b110:	f7ff fe07 	bl	800ad22 <USBD_SetFeature>
          break;
 800b114:	e7df      	b.n	800b0d6 <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800b116:	f7ff ffb9 	bl	800b08c <USBD_ClrFeature>
          break;
 800b11a:	e7dc      	b.n	800b0d6 <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800b11c:	f7ff fe1f 	bl	800ad5e <USBD_CtlError>
          break;
 800b120:	e7d9      	b.n	800b0d6 <USBD_StdDevReq+0x24>

0800b122 <USBD_StdItfReq>:
{
 800b122:	b570      	push	{r4, r5, r6, lr}
 800b124:	4605      	mov	r5, r0
 800b126:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b128:	780b      	ldrb	r3, [r1, #0]
 800b12a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b12e:	2b20      	cmp	r3, #32
 800b130:	d007      	beq.n	800b142 <USBD_StdItfReq+0x20>
 800b132:	2b40      	cmp	r3, #64	; 0x40
 800b134:	d005      	beq.n	800b142 <USBD_StdItfReq+0x20>
 800b136:	b123      	cbz	r3, 800b142 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800b138:	f7ff fe11 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b13c:	2600      	movs	r6, #0
}
 800b13e:	4630      	mov	r0, r6
 800b140:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800b142:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800b146:	3b01      	subs	r3, #1
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d818      	bhi.n	800b17e <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b14c:	7923      	ldrb	r3, [r4, #4]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d80f      	bhi.n	800b172 <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b152:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	4621      	mov	r1, r4
 800b15a:	4628      	mov	r0, r5
 800b15c:	4798      	blx	r3
 800b15e:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b160:	88e3      	ldrh	r3, [r4, #6]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1eb      	bne.n	800b13e <USBD_StdItfReq+0x1c>
 800b166:	2800      	cmp	r0, #0
 800b168:	d1e9      	bne.n	800b13e <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800b16a:	4628      	mov	r0, r5
 800b16c:	f000 f94c 	bl	800b408 <USBD_CtlSendStatus>
 800b170:	e7e5      	b.n	800b13e <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800b172:	4621      	mov	r1, r4
 800b174:	4628      	mov	r0, r5
 800b176:	f7ff fdf2 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b17a:	2600      	movs	r6, #0
 800b17c:	e7df      	b.n	800b13e <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800b17e:	4621      	mov	r1, r4
 800b180:	4628      	mov	r0, r5
 800b182:	f7ff fdec 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b186:	2600      	movs	r6, #0
          break;
 800b188:	e7d9      	b.n	800b13e <USBD_StdItfReq+0x1c>

0800b18a <USBD_StdEPReq>:
{
 800b18a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18c:	4606      	mov	r6, r0
 800b18e:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800b190:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b192:	780c      	ldrb	r4, [r1, #0]
 800b194:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800b198:	2c20      	cmp	r4, #32
 800b19a:	d008      	beq.n	800b1ae <USBD_StdEPReq+0x24>
 800b19c:	b2d9      	uxtb	r1, r3
 800b19e:	2c40      	cmp	r4, #64	; 0x40
 800b1a0:	d005      	beq.n	800b1ae <USBD_StdEPReq+0x24>
 800b1a2:	b16c      	cbz	r4, 800b1c0 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	f7ff fdda 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b1aa:	2400      	movs	r4, #0
      break;
 800b1ac:	e006      	b.n	800b1bc <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b1ae:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4798      	blx	r3
 800b1ba:	4604      	mov	r4, r0
}
 800b1bc:	4620      	mov	r0, r4
 800b1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800b1c0:	786f      	ldrb	r7, [r5, #1]
 800b1c2:	2f01      	cmp	r7, #1
 800b1c4:	d02f      	beq.n	800b226 <USBD_StdEPReq+0x9c>
 800b1c6:	2f03      	cmp	r7, #3
 800b1c8:	d005      	beq.n	800b1d6 <USBD_StdEPReq+0x4c>
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	d059      	beq.n	800b282 <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f7ff fdc5 	bl	800ad5e <USBD_CtlError>
          break;
 800b1d4:	e7f2      	b.n	800b1bc <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800b1d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d005      	beq.n	800b1ec <USBD_StdEPReq+0x62>
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	d012      	beq.n	800b20a <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	f7ff fdba 	bl	800ad5e <USBD_CtlError>
              break;
 800b1ea:	e7e7      	b.n	800b1bc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1ec:	b109      	cbz	r1, 800b1f2 <USBD_StdEPReq+0x68>
 800b1ee:	2980      	cmp	r1, #128	; 0x80
 800b1f0:	d104      	bne.n	800b1fc <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f7ff fdb2 	bl	800ad5e <USBD_CtlError>
 800b1fa:	e7df      	b.n	800b1bc <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1fc:	f7fa fbf2 	bl	80059e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b200:	2180      	movs	r1, #128	; 0x80
 800b202:	4630      	mov	r0, r6
 800b204:	f7fa fbee 	bl	80059e4 <USBD_LL_StallEP>
 800b208:	e7d8      	b.n	800b1bc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b20a:	886b      	ldrh	r3, [r5, #2]
 800b20c:	b923      	cbnz	r3, 800b218 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b20e:	b119      	cbz	r1, 800b218 <USBD_StdEPReq+0x8e>
 800b210:	2980      	cmp	r1, #128	; 0x80
 800b212:	d001      	beq.n	800b218 <USBD_StdEPReq+0x8e>
 800b214:	88eb      	ldrh	r3, [r5, #6]
 800b216:	b11b      	cbz	r3, 800b220 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800b218:	4630      	mov	r0, r6
 800b21a:	f000 f8f5 	bl	800b408 <USBD_CtlSendStatus>
              break;
 800b21e:	e7cd      	b.n	800b1bc <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b220:	f7fa fbe0 	bl	80059e4 <USBD_LL_StallEP>
 800b224:	e7f8      	b.n	800b218 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800b226:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d005      	beq.n	800b23c <USBD_StdEPReq+0xb2>
 800b230:	2b03      	cmp	r3, #3
 800b232:	d012      	beq.n	800b25a <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800b234:	4629      	mov	r1, r5
 800b236:	f7ff fd92 	bl	800ad5e <USBD_CtlError>
              break;
 800b23a:	e7bf      	b.n	800b1bc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b23c:	b109      	cbz	r1, 800b242 <USBD_StdEPReq+0xb8>
 800b23e:	2980      	cmp	r1, #128	; 0x80
 800b240:	d104      	bne.n	800b24c <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800b242:	4629      	mov	r1, r5
 800b244:	4630      	mov	r0, r6
 800b246:	f7ff fd8a 	bl	800ad5e <USBD_CtlError>
 800b24a:	e7b7      	b.n	800b1bc <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b24c:	f7fa fbca 	bl	80059e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b250:	2180      	movs	r1, #128	; 0x80
 800b252:	4630      	mov	r0, r6
 800b254:	f7fa fbc6 	bl	80059e4 <USBD_LL_StallEP>
 800b258:	e7b0      	b.n	800b1bc <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b25a:	886b      	ldrh	r3, [r5, #2]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1ad      	bne.n	800b1bc <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800b260:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800b264:	d10a      	bne.n	800b27c <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800b266:	4630      	mov	r0, r6
 800b268:	f000 f8ce 	bl	800b408 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b26c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	4629      	mov	r1, r5
 800b274:	4630      	mov	r0, r6
 800b276:	4798      	blx	r3
 800b278:	4604      	mov	r4, r0
 800b27a:	e79f      	b.n	800b1bc <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b27c:	f7fa fbb9 	bl	80059f2 <USBD_LL_ClearStallEP>
 800b280:	e7f1      	b.n	800b266 <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800b282:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800b286:	b2d2      	uxtb	r2, r2
 800b288:	2a02      	cmp	r2, #2
 800b28a:	d006      	beq.n	800b29a <USBD_StdEPReq+0x110>
 800b28c:	2a03      	cmp	r2, #3
 800b28e:	d029      	beq.n	800b2e4 <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800b290:	4629      	mov	r1, r5
 800b292:	f7ff fd64 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b296:	463c      	mov	r4, r7
              break;
 800b298:	e790      	b.n	800b1bc <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b29a:	b109      	cbz	r1, 800b2a0 <USBD_StdEPReq+0x116>
 800b29c:	2980      	cmp	r1, #128	; 0x80
 800b29e:	d113      	bne.n	800b2c8 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b2a4:	d115      	bne.n	800b2d2 <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2a6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b2ae:	0089      	lsls	r1, r1, #2
 800b2b0:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800b2b4:	4431      	add	r1, r6
 800b2b6:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2bc:	2202      	movs	r2, #2
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f000 f876 	bl	800b3b0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b2c4:	463c      	mov	r4, r7
              break;
 800b2c6:	e779      	b.n	800b1bc <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	f7ff fd48 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ce:	463c      	mov	r4, r7
                break;
 800b2d0:	e774      	b.n	800b1bc <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2d2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800b2d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b2da:	0089      	lsls	r1, r1, #2
 800b2dc:	3110      	adds	r1, #16
 800b2de:	4431      	add	r1, r6
 800b2e0:	3104      	adds	r1, #4
 800b2e2:	e7e9      	b.n	800b2b8 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800b2e4:	b25b      	sxtb	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	db1f      	blt.n	800b32a <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b2ea:	f001 020f 	and.w	r2, r1, #15
 800b2ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b2f2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b2f6:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800b2fa:	b322      	cbz	r2, 800b346 <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	db27      	blt.n	800b350 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b300:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b304:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b308:	009c      	lsls	r4, r3, #2
 800b30a:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800b30e:	4434      	add	r4, r6
 800b310:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b312:	b109      	cbz	r1, 800b318 <USBD_StdEPReq+0x18e>
 800b314:	2980      	cmp	r1, #128	; 0x80
 800b316:	d124      	bne.n	800b362 <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800b318:	2300      	movs	r3, #0
 800b31a:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b31c:	2202      	movs	r2, #2
 800b31e:	4621      	mov	r1, r4
 800b320:	4630      	mov	r0, r6
 800b322:	f000 f845 	bl	800b3b0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b326:	463c      	mov	r4, r7
              break;
 800b328:	e748      	b.n	800b1bc <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b32a:	f001 020f 	and.w	r2, r1, #15
 800b32e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b332:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b336:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800b338:	2a00      	cmp	r2, #0
 800b33a:	d1df      	bne.n	800b2fc <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7ff fd0e 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b342:	463c      	mov	r4, r7
                  break;
 800b344:	e73a      	b.n	800b1bc <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800b346:	4629      	mov	r1, r5
 800b348:	f7ff fd09 	bl	800ad5e <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800b34c:	463c      	mov	r4, r7
                  break;
 800b34e:	e735      	b.n	800b1bc <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b350:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800b354:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b358:	009c      	lsls	r4, r3, #2
 800b35a:	3410      	adds	r4, #16
 800b35c:	4434      	add	r4, r6
 800b35e:	3404      	adds	r4, #4
 800b360:	e7d7      	b.n	800b312 <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b362:	4630      	mov	r0, r6
 800b364:	f7fa fb4c 	bl	8005a00 <USBD_LL_IsStallEP>
 800b368:	b110      	cbz	r0, 800b370 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800b36a:	2301      	movs	r3, #1
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	e7d5      	b.n	800b31c <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800b370:	2300      	movs	r3, #0
 800b372:	6023      	str	r3, [r4, #0]
 800b374:	e7d2      	b.n	800b31c <USBD_StdEPReq+0x192>

0800b376 <USBD_GetString>:
  if (desc == NULL)
 800b376:	b1d0      	cbz	r0, 800b3ae <USBD_GetString+0x38>
{
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	460d      	mov	r5, r1
 800b37c:	4616      	mov	r6, r2
 800b37e:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b380:	f7ff fcc5 	bl	800ad0e <USBD_GetLen>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	b29b      	uxth	r3, r3
 800b38a:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800b38c:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b38e:	2303      	movs	r3, #3
 800b390:	706b      	strb	r3, [r5, #1]
  idx++;
 800b392:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800b394:	e007      	b.n	800b3a6 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800b396:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800b398:	3401      	adds	r4, #1
    idx++;
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800b39e:	2100      	movs	r1, #0
 800b3a0:	54a9      	strb	r1, [r5, r2]
    idx++;
 800b3a2:	3302      	adds	r3, #2
 800b3a4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800b3a6:	7822      	ldrb	r2, [r4, #0]
 800b3a8:	2a00      	cmp	r2, #0
 800b3aa:	d1f4      	bne.n	800b396 <USBD_GetString+0x20>
}
 800b3ac:	bd70      	pop	{r4, r5, r6, pc}
 800b3ae:	4770      	bx	lr

0800b3b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b3b0:	b508      	push	{r3, lr}
 800b3b2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b3ba:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b3bc:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3be:	460a      	mov	r2, r1
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	f7fa fb3b 	bl	8005a3c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	bd08      	pop	{r3, pc}

0800b3ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3ca:	b508      	push	{r3, lr}
 800b3cc:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3ce:	460a      	mov	r2, r1
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	f7fa fb33 	bl	8005a3c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	bd08      	pop	{r3, pc}

0800b3da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3da:	b508      	push	{r3, lr}
 800b3dc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3de:	2203      	movs	r2, #3
 800b3e0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b3e4:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3e8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3ec:	460a      	mov	r2, r1
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	f7fa fb2b 	bl	8005a4a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	bd08      	pop	{r3, pc}

0800b3f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3f8:	b508      	push	{r3, lr}
 800b3fa:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3fc:	460a      	mov	r2, r1
 800b3fe:	2100      	movs	r1, #0
 800b400:	f7fa fb23 	bl	8005a4a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b404:	2000      	movs	r0, #0
 800b406:	bd08      	pop	{r3, pc}

0800b408 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b408:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b40a:	2204      	movs	r2, #4
 800b40c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b410:	2300      	movs	r3, #0
 800b412:	461a      	mov	r2, r3
 800b414:	4619      	mov	r1, r3
 800b416:	f7fa fb11 	bl	8005a3c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b41a:	2000      	movs	r0, #0
 800b41c:	bd08      	pop	{r3, pc}

0800b41e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b41e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b420:	2205      	movs	r2, #5
 800b422:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b426:	2300      	movs	r3, #0
 800b428:	461a      	mov	r2, r3
 800b42a:	4619      	mov	r1, r3
 800b42c:	f7fa fb0d 	bl	8005a4a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b430:	2000      	movs	r0, #0
 800b432:	bd08      	pop	{r3, pc}

0800b434 <malloc>:
 800b434:	4b02      	ldr	r3, [pc, #8]	; (800b440 <malloc+0xc>)
 800b436:	4601      	mov	r1, r0
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	f000 b82b 	b.w	800b494 <_malloc_r>
 800b43e:	bf00      	nop
 800b440:	200001e4 	.word	0x200001e4

0800b444 <free>:
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <free+0xc>)
 800b446:	4601      	mov	r1, r0
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	f000 b921 	b.w	800b690 <_free_r>
 800b44e:	bf00      	nop
 800b450:	200001e4 	.word	0x200001e4

0800b454 <sbrk_aligned>:
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	4e0e      	ldr	r6, [pc, #56]	; (800b490 <sbrk_aligned+0x3c>)
 800b458:	460c      	mov	r4, r1
 800b45a:	6831      	ldr	r1, [r6, #0]
 800b45c:	4605      	mov	r5, r0
 800b45e:	b911      	cbnz	r1, 800b466 <sbrk_aligned+0x12>
 800b460:	f000 f8cc 	bl	800b5fc <_sbrk_r>
 800b464:	6030      	str	r0, [r6, #0]
 800b466:	4621      	mov	r1, r4
 800b468:	4628      	mov	r0, r5
 800b46a:	f000 f8c7 	bl	800b5fc <_sbrk_r>
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	d00a      	beq.n	800b488 <sbrk_aligned+0x34>
 800b472:	1cc4      	adds	r4, r0, #3
 800b474:	f024 0403 	bic.w	r4, r4, #3
 800b478:	42a0      	cmp	r0, r4
 800b47a:	d007      	beq.n	800b48c <sbrk_aligned+0x38>
 800b47c:	1a21      	subs	r1, r4, r0
 800b47e:	4628      	mov	r0, r5
 800b480:	f000 f8bc 	bl	800b5fc <_sbrk_r>
 800b484:	3001      	adds	r0, #1
 800b486:	d101      	bne.n	800b48c <sbrk_aligned+0x38>
 800b488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b48c:	4620      	mov	r0, r4
 800b48e:	bd70      	pop	{r4, r5, r6, pc}
 800b490:	2000292c 	.word	0x2000292c

0800b494 <_malloc_r>:
 800b494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b498:	1ccd      	adds	r5, r1, #3
 800b49a:	f025 0503 	bic.w	r5, r5, #3
 800b49e:	3508      	adds	r5, #8
 800b4a0:	2d0c      	cmp	r5, #12
 800b4a2:	bf38      	it	cc
 800b4a4:	250c      	movcc	r5, #12
 800b4a6:	2d00      	cmp	r5, #0
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	db01      	blt.n	800b4b0 <_malloc_r+0x1c>
 800b4ac:	42a9      	cmp	r1, r5
 800b4ae:	d905      	bls.n	800b4bc <_malloc_r+0x28>
 800b4b0:	230c      	movs	r3, #12
 800b4b2:	603b      	str	r3, [r7, #0]
 800b4b4:	2600      	movs	r6, #0
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b590 <_malloc_r+0xfc>
 800b4c0:	f000 f868 	bl	800b594 <__malloc_lock>
 800b4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b4c8:	461c      	mov	r4, r3
 800b4ca:	bb5c      	cbnz	r4, 800b524 <_malloc_r+0x90>
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f7ff ffc0 	bl	800b454 <sbrk_aligned>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	d155      	bne.n	800b586 <_malloc_r+0xf2>
 800b4da:	f8d8 4000 	ldr.w	r4, [r8]
 800b4de:	4626      	mov	r6, r4
 800b4e0:	2e00      	cmp	r6, #0
 800b4e2:	d145      	bne.n	800b570 <_malloc_r+0xdc>
 800b4e4:	2c00      	cmp	r4, #0
 800b4e6:	d048      	beq.n	800b57a <_malloc_r+0xe6>
 800b4e8:	6823      	ldr	r3, [r4, #0]
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	eb04 0903 	add.w	r9, r4, r3
 800b4f2:	f000 f883 	bl	800b5fc <_sbrk_r>
 800b4f6:	4581      	cmp	r9, r0
 800b4f8:	d13f      	bne.n	800b57a <_malloc_r+0xe6>
 800b4fa:	6821      	ldr	r1, [r4, #0]
 800b4fc:	1a6d      	subs	r5, r5, r1
 800b4fe:	4629      	mov	r1, r5
 800b500:	4638      	mov	r0, r7
 800b502:	f7ff ffa7 	bl	800b454 <sbrk_aligned>
 800b506:	3001      	adds	r0, #1
 800b508:	d037      	beq.n	800b57a <_malloc_r+0xe6>
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	442b      	add	r3, r5
 800b50e:	6023      	str	r3, [r4, #0]
 800b510:	f8d8 3000 	ldr.w	r3, [r8]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d038      	beq.n	800b58a <_malloc_r+0xf6>
 800b518:	685a      	ldr	r2, [r3, #4]
 800b51a:	42a2      	cmp	r2, r4
 800b51c:	d12b      	bne.n	800b576 <_malloc_r+0xe2>
 800b51e:	2200      	movs	r2, #0
 800b520:	605a      	str	r2, [r3, #4]
 800b522:	e00f      	b.n	800b544 <_malloc_r+0xb0>
 800b524:	6822      	ldr	r2, [r4, #0]
 800b526:	1b52      	subs	r2, r2, r5
 800b528:	d41f      	bmi.n	800b56a <_malloc_r+0xd6>
 800b52a:	2a0b      	cmp	r2, #11
 800b52c:	d917      	bls.n	800b55e <_malloc_r+0xca>
 800b52e:	1961      	adds	r1, r4, r5
 800b530:	42a3      	cmp	r3, r4
 800b532:	6025      	str	r5, [r4, #0]
 800b534:	bf18      	it	ne
 800b536:	6059      	strne	r1, [r3, #4]
 800b538:	6863      	ldr	r3, [r4, #4]
 800b53a:	bf08      	it	eq
 800b53c:	f8c8 1000 	streq.w	r1, [r8]
 800b540:	5162      	str	r2, [r4, r5]
 800b542:	604b      	str	r3, [r1, #4]
 800b544:	4638      	mov	r0, r7
 800b546:	f104 060b 	add.w	r6, r4, #11
 800b54a:	f000 f829 	bl	800b5a0 <__malloc_unlock>
 800b54e:	f026 0607 	bic.w	r6, r6, #7
 800b552:	1d23      	adds	r3, r4, #4
 800b554:	1af2      	subs	r2, r6, r3
 800b556:	d0ae      	beq.n	800b4b6 <_malloc_r+0x22>
 800b558:	1b9b      	subs	r3, r3, r6
 800b55a:	50a3      	str	r3, [r4, r2]
 800b55c:	e7ab      	b.n	800b4b6 <_malloc_r+0x22>
 800b55e:	42a3      	cmp	r3, r4
 800b560:	6862      	ldr	r2, [r4, #4]
 800b562:	d1dd      	bne.n	800b520 <_malloc_r+0x8c>
 800b564:	f8c8 2000 	str.w	r2, [r8]
 800b568:	e7ec      	b.n	800b544 <_malloc_r+0xb0>
 800b56a:	4623      	mov	r3, r4
 800b56c:	6864      	ldr	r4, [r4, #4]
 800b56e:	e7ac      	b.n	800b4ca <_malloc_r+0x36>
 800b570:	4634      	mov	r4, r6
 800b572:	6876      	ldr	r6, [r6, #4]
 800b574:	e7b4      	b.n	800b4e0 <_malloc_r+0x4c>
 800b576:	4613      	mov	r3, r2
 800b578:	e7cc      	b.n	800b514 <_malloc_r+0x80>
 800b57a:	230c      	movs	r3, #12
 800b57c:	603b      	str	r3, [r7, #0]
 800b57e:	4638      	mov	r0, r7
 800b580:	f000 f80e 	bl	800b5a0 <__malloc_unlock>
 800b584:	e797      	b.n	800b4b6 <_malloc_r+0x22>
 800b586:	6025      	str	r5, [r4, #0]
 800b588:	e7dc      	b.n	800b544 <_malloc_r+0xb0>
 800b58a:	605b      	str	r3, [r3, #4]
 800b58c:	deff      	udf	#255	; 0xff
 800b58e:	bf00      	nop
 800b590:	20002928 	.word	0x20002928

0800b594 <__malloc_lock>:
 800b594:	4801      	ldr	r0, [pc, #4]	; (800b59c <__malloc_lock+0x8>)
 800b596:	f000 b86b 	b.w	800b670 <__retarget_lock_acquire_recursive>
 800b59a:	bf00      	nop
 800b59c:	20002a6c 	.word	0x20002a6c

0800b5a0 <__malloc_unlock>:
 800b5a0:	4801      	ldr	r0, [pc, #4]	; (800b5a8 <__malloc_unlock+0x8>)
 800b5a2:	f000 b866 	b.w	800b672 <__retarget_lock_release_recursive>
 800b5a6:	bf00      	nop
 800b5a8:	20002a6c 	.word	0x20002a6c

0800b5ac <siprintf>:
 800b5ac:	b40e      	push	{r1, r2, r3}
 800b5ae:	b500      	push	{lr}
 800b5b0:	b09c      	sub	sp, #112	; 0x70
 800b5b2:	ab1d      	add	r3, sp, #116	; 0x74
 800b5b4:	9002      	str	r0, [sp, #8]
 800b5b6:	9006      	str	r0, [sp, #24]
 800b5b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5bc:	4809      	ldr	r0, [pc, #36]	; (800b5e4 <siprintf+0x38>)
 800b5be:	9107      	str	r1, [sp, #28]
 800b5c0:	9104      	str	r1, [sp, #16]
 800b5c2:	4909      	ldr	r1, [pc, #36]	; (800b5e8 <siprintf+0x3c>)
 800b5c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c8:	9105      	str	r1, [sp, #20]
 800b5ca:	6800      	ldr	r0, [r0, #0]
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	a902      	add	r1, sp, #8
 800b5d0:	f000 f904 	bl	800b7dc <_svfiprintf_r>
 800b5d4:	9b02      	ldr	r3, [sp, #8]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
 800b5da:	b01c      	add	sp, #112	; 0x70
 800b5dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e0:	b003      	add	sp, #12
 800b5e2:	4770      	bx	lr
 800b5e4:	200001e4 	.word	0x200001e4
 800b5e8:	ffff0208 	.word	0xffff0208

0800b5ec <memset>:
 800b5ec:	4402      	add	r2, r0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d100      	bne.n	800b5f6 <memset+0xa>
 800b5f4:	4770      	bx	lr
 800b5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5fa:	e7f9      	b.n	800b5f0 <memset+0x4>

0800b5fc <_sbrk_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4d06      	ldr	r5, [pc, #24]	; (800b618 <_sbrk_r+0x1c>)
 800b600:	2300      	movs	r3, #0
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	602b      	str	r3, [r5, #0]
 800b608:	f7fa f864 	bl	80056d4 <_sbrk>
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d102      	bne.n	800b616 <_sbrk_r+0x1a>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	b103      	cbz	r3, 800b616 <_sbrk_r+0x1a>
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	bd38      	pop	{r3, r4, r5, pc}
 800b618:	20002a68 	.word	0x20002a68

0800b61c <__errno>:
 800b61c:	4b01      	ldr	r3, [pc, #4]	; (800b624 <__errno+0x8>)
 800b61e:	6818      	ldr	r0, [r3, #0]
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	200001e4 	.word	0x200001e4

0800b628 <__libc_init_array>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	4d0d      	ldr	r5, [pc, #52]	; (800b660 <__libc_init_array+0x38>)
 800b62c:	4c0d      	ldr	r4, [pc, #52]	; (800b664 <__libc_init_array+0x3c>)
 800b62e:	1b64      	subs	r4, r4, r5
 800b630:	10a4      	asrs	r4, r4, #2
 800b632:	2600      	movs	r6, #0
 800b634:	42a6      	cmp	r6, r4
 800b636:	d109      	bne.n	800b64c <__libc_init_array+0x24>
 800b638:	4d0b      	ldr	r5, [pc, #44]	; (800b668 <__libc_init_array+0x40>)
 800b63a:	4c0c      	ldr	r4, [pc, #48]	; (800b66c <__libc_init_array+0x44>)
 800b63c:	f000 fbae 	bl	800bd9c <_init>
 800b640:	1b64      	subs	r4, r4, r5
 800b642:	10a4      	asrs	r4, r4, #2
 800b644:	2600      	movs	r6, #0
 800b646:	42a6      	cmp	r6, r4
 800b648:	d105      	bne.n	800b656 <__libc_init_array+0x2e>
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b650:	4798      	blx	r3
 800b652:	3601      	adds	r6, #1
 800b654:	e7ee      	b.n	800b634 <__libc_init_array+0xc>
 800b656:	f855 3b04 	ldr.w	r3, [r5], #4
 800b65a:	4798      	blx	r3
 800b65c:	3601      	adds	r6, #1
 800b65e:	e7f2      	b.n	800b646 <__libc_init_array+0x1e>
 800b660:	0800c120 	.word	0x0800c120
 800b664:	0800c120 	.word	0x0800c120
 800b668:	0800c120 	.word	0x0800c120
 800b66c:	0800c124 	.word	0x0800c124

0800b670 <__retarget_lock_acquire_recursive>:
 800b670:	4770      	bx	lr

0800b672 <__retarget_lock_release_recursive>:
 800b672:	4770      	bx	lr

0800b674 <memcpy>:
 800b674:	440a      	add	r2, r1
 800b676:	4291      	cmp	r1, r2
 800b678:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b67c:	d100      	bne.n	800b680 <memcpy+0xc>
 800b67e:	4770      	bx	lr
 800b680:	b510      	push	{r4, lr}
 800b682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b68a:	4291      	cmp	r1, r2
 800b68c:	d1f9      	bne.n	800b682 <memcpy+0xe>
 800b68e:	bd10      	pop	{r4, pc}

0800b690 <_free_r>:
 800b690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b692:	2900      	cmp	r1, #0
 800b694:	d044      	beq.n	800b720 <_free_r+0x90>
 800b696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b69a:	9001      	str	r0, [sp, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f1a1 0404 	sub.w	r4, r1, #4
 800b6a2:	bfb8      	it	lt
 800b6a4:	18e4      	addlt	r4, r4, r3
 800b6a6:	f7ff ff75 	bl	800b594 <__malloc_lock>
 800b6aa:	4a1e      	ldr	r2, [pc, #120]	; (800b724 <_free_r+0x94>)
 800b6ac:	9801      	ldr	r0, [sp, #4]
 800b6ae:	6813      	ldr	r3, [r2, #0]
 800b6b0:	b933      	cbnz	r3, 800b6c0 <_free_r+0x30>
 800b6b2:	6063      	str	r3, [r4, #4]
 800b6b4:	6014      	str	r4, [r2, #0]
 800b6b6:	b003      	add	sp, #12
 800b6b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6bc:	f7ff bf70 	b.w	800b5a0 <__malloc_unlock>
 800b6c0:	42a3      	cmp	r3, r4
 800b6c2:	d908      	bls.n	800b6d6 <_free_r+0x46>
 800b6c4:	6825      	ldr	r5, [r4, #0]
 800b6c6:	1961      	adds	r1, r4, r5
 800b6c8:	428b      	cmp	r3, r1
 800b6ca:	bf01      	itttt	eq
 800b6cc:	6819      	ldreq	r1, [r3, #0]
 800b6ce:	685b      	ldreq	r3, [r3, #4]
 800b6d0:	1949      	addeq	r1, r1, r5
 800b6d2:	6021      	streq	r1, [r4, #0]
 800b6d4:	e7ed      	b.n	800b6b2 <_free_r+0x22>
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	b10b      	cbz	r3, 800b6e0 <_free_r+0x50>
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	d9fa      	bls.n	800b6d6 <_free_r+0x46>
 800b6e0:	6811      	ldr	r1, [r2, #0]
 800b6e2:	1855      	adds	r5, r2, r1
 800b6e4:	42a5      	cmp	r5, r4
 800b6e6:	d10b      	bne.n	800b700 <_free_r+0x70>
 800b6e8:	6824      	ldr	r4, [r4, #0]
 800b6ea:	4421      	add	r1, r4
 800b6ec:	1854      	adds	r4, r2, r1
 800b6ee:	42a3      	cmp	r3, r4
 800b6f0:	6011      	str	r1, [r2, #0]
 800b6f2:	d1e0      	bne.n	800b6b6 <_free_r+0x26>
 800b6f4:	681c      	ldr	r4, [r3, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	6053      	str	r3, [r2, #4]
 800b6fa:	440c      	add	r4, r1
 800b6fc:	6014      	str	r4, [r2, #0]
 800b6fe:	e7da      	b.n	800b6b6 <_free_r+0x26>
 800b700:	d902      	bls.n	800b708 <_free_r+0x78>
 800b702:	230c      	movs	r3, #12
 800b704:	6003      	str	r3, [r0, #0]
 800b706:	e7d6      	b.n	800b6b6 <_free_r+0x26>
 800b708:	6825      	ldr	r5, [r4, #0]
 800b70a:	1961      	adds	r1, r4, r5
 800b70c:	428b      	cmp	r3, r1
 800b70e:	bf04      	itt	eq
 800b710:	6819      	ldreq	r1, [r3, #0]
 800b712:	685b      	ldreq	r3, [r3, #4]
 800b714:	6063      	str	r3, [r4, #4]
 800b716:	bf04      	itt	eq
 800b718:	1949      	addeq	r1, r1, r5
 800b71a:	6021      	streq	r1, [r4, #0]
 800b71c:	6054      	str	r4, [r2, #4]
 800b71e:	e7ca      	b.n	800b6b6 <_free_r+0x26>
 800b720:	b003      	add	sp, #12
 800b722:	bd30      	pop	{r4, r5, pc}
 800b724:	20002928 	.word	0x20002928

0800b728 <__ssputs_r>:
 800b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b72c:	688e      	ldr	r6, [r1, #8]
 800b72e:	461f      	mov	r7, r3
 800b730:	42be      	cmp	r6, r7
 800b732:	680b      	ldr	r3, [r1, #0]
 800b734:	4682      	mov	sl, r0
 800b736:	460c      	mov	r4, r1
 800b738:	4690      	mov	r8, r2
 800b73a:	d82c      	bhi.n	800b796 <__ssputs_r+0x6e>
 800b73c:	898a      	ldrh	r2, [r1, #12]
 800b73e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b742:	d026      	beq.n	800b792 <__ssputs_r+0x6a>
 800b744:	6965      	ldr	r5, [r4, #20]
 800b746:	6909      	ldr	r1, [r1, #16]
 800b748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b74c:	eba3 0901 	sub.w	r9, r3, r1
 800b750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b754:	1c7b      	adds	r3, r7, #1
 800b756:	444b      	add	r3, r9
 800b758:	106d      	asrs	r5, r5, #1
 800b75a:	429d      	cmp	r5, r3
 800b75c:	bf38      	it	cc
 800b75e:	461d      	movcc	r5, r3
 800b760:	0553      	lsls	r3, r2, #21
 800b762:	d527      	bpl.n	800b7b4 <__ssputs_r+0x8c>
 800b764:	4629      	mov	r1, r5
 800b766:	f7ff fe95 	bl	800b494 <_malloc_r>
 800b76a:	4606      	mov	r6, r0
 800b76c:	b360      	cbz	r0, 800b7c8 <__ssputs_r+0xa0>
 800b76e:	6921      	ldr	r1, [r4, #16]
 800b770:	464a      	mov	r2, r9
 800b772:	f7ff ff7f 	bl	800b674 <memcpy>
 800b776:	89a3      	ldrh	r3, [r4, #12]
 800b778:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b780:	81a3      	strh	r3, [r4, #12]
 800b782:	6126      	str	r6, [r4, #16]
 800b784:	6165      	str	r5, [r4, #20]
 800b786:	444e      	add	r6, r9
 800b788:	eba5 0509 	sub.w	r5, r5, r9
 800b78c:	6026      	str	r6, [r4, #0]
 800b78e:	60a5      	str	r5, [r4, #8]
 800b790:	463e      	mov	r6, r7
 800b792:	42be      	cmp	r6, r7
 800b794:	d900      	bls.n	800b798 <__ssputs_r+0x70>
 800b796:	463e      	mov	r6, r7
 800b798:	6820      	ldr	r0, [r4, #0]
 800b79a:	4632      	mov	r2, r6
 800b79c:	4641      	mov	r1, r8
 800b79e:	f000 faab 	bl	800bcf8 <memmove>
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	1b9b      	subs	r3, r3, r6
 800b7a6:	60a3      	str	r3, [r4, #8]
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	4433      	add	r3, r6
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	2000      	movs	r0, #0
 800b7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b4:	462a      	mov	r2, r5
 800b7b6:	f000 fab9 	bl	800bd2c <_realloc_r>
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d1e0      	bne.n	800b782 <__ssputs_r+0x5a>
 800b7c0:	6921      	ldr	r1, [r4, #16]
 800b7c2:	4650      	mov	r0, sl
 800b7c4:	f7ff ff64 	bl	800b690 <_free_r>
 800b7c8:	230c      	movs	r3, #12
 800b7ca:	f8ca 3000 	str.w	r3, [sl]
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d4:	81a3      	strh	r3, [r4, #12]
 800b7d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7da:	e7e9      	b.n	800b7b0 <__ssputs_r+0x88>

0800b7dc <_svfiprintf_r>:
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	4698      	mov	r8, r3
 800b7e2:	898b      	ldrh	r3, [r1, #12]
 800b7e4:	061b      	lsls	r3, r3, #24
 800b7e6:	b09d      	sub	sp, #116	; 0x74
 800b7e8:	4607      	mov	r7, r0
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	4614      	mov	r4, r2
 800b7ee:	d50e      	bpl.n	800b80e <_svfiprintf_r+0x32>
 800b7f0:	690b      	ldr	r3, [r1, #16]
 800b7f2:	b963      	cbnz	r3, 800b80e <_svfiprintf_r+0x32>
 800b7f4:	2140      	movs	r1, #64	; 0x40
 800b7f6:	f7ff fe4d 	bl	800b494 <_malloc_r>
 800b7fa:	6028      	str	r0, [r5, #0]
 800b7fc:	6128      	str	r0, [r5, #16]
 800b7fe:	b920      	cbnz	r0, 800b80a <_svfiprintf_r+0x2e>
 800b800:	230c      	movs	r3, #12
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b808:	e0d0      	b.n	800b9ac <_svfiprintf_r+0x1d0>
 800b80a:	2340      	movs	r3, #64	; 0x40
 800b80c:	616b      	str	r3, [r5, #20]
 800b80e:	2300      	movs	r3, #0
 800b810:	9309      	str	r3, [sp, #36]	; 0x24
 800b812:	2320      	movs	r3, #32
 800b814:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b818:	f8cd 800c 	str.w	r8, [sp, #12]
 800b81c:	2330      	movs	r3, #48	; 0x30
 800b81e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b9c4 <_svfiprintf_r+0x1e8>
 800b822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b826:	f04f 0901 	mov.w	r9, #1
 800b82a:	4623      	mov	r3, r4
 800b82c:	469a      	mov	sl, r3
 800b82e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b832:	b10a      	cbz	r2, 800b838 <_svfiprintf_r+0x5c>
 800b834:	2a25      	cmp	r2, #37	; 0x25
 800b836:	d1f9      	bne.n	800b82c <_svfiprintf_r+0x50>
 800b838:	ebba 0b04 	subs.w	fp, sl, r4
 800b83c:	d00b      	beq.n	800b856 <_svfiprintf_r+0x7a>
 800b83e:	465b      	mov	r3, fp
 800b840:	4622      	mov	r2, r4
 800b842:	4629      	mov	r1, r5
 800b844:	4638      	mov	r0, r7
 800b846:	f7ff ff6f 	bl	800b728 <__ssputs_r>
 800b84a:	3001      	adds	r0, #1
 800b84c:	f000 80a9 	beq.w	800b9a2 <_svfiprintf_r+0x1c6>
 800b850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b852:	445a      	add	r2, fp
 800b854:	9209      	str	r2, [sp, #36]	; 0x24
 800b856:	f89a 3000 	ldrb.w	r3, [sl]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 80a1 	beq.w	800b9a2 <_svfiprintf_r+0x1c6>
 800b860:	2300      	movs	r3, #0
 800b862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b86a:	f10a 0a01 	add.w	sl, sl, #1
 800b86e:	9304      	str	r3, [sp, #16]
 800b870:	9307      	str	r3, [sp, #28]
 800b872:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b876:	931a      	str	r3, [sp, #104]	; 0x68
 800b878:	4654      	mov	r4, sl
 800b87a:	2205      	movs	r2, #5
 800b87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b880:	4850      	ldr	r0, [pc, #320]	; (800b9c4 <_svfiprintf_r+0x1e8>)
 800b882:	f7f8 fca5 	bl	80041d0 <memchr>
 800b886:	9a04      	ldr	r2, [sp, #16]
 800b888:	b9d8      	cbnz	r0, 800b8c2 <_svfiprintf_r+0xe6>
 800b88a:	06d0      	lsls	r0, r2, #27
 800b88c:	bf44      	itt	mi
 800b88e:	2320      	movmi	r3, #32
 800b890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b894:	0711      	lsls	r1, r2, #28
 800b896:	bf44      	itt	mi
 800b898:	232b      	movmi	r3, #43	; 0x2b
 800b89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b89e:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a4:	d015      	beq.n	800b8d2 <_svfiprintf_r+0xf6>
 800b8a6:	9a07      	ldr	r2, [sp, #28]
 800b8a8:	4654      	mov	r4, sl
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f04f 0c0a 	mov.w	ip, #10
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8b6:	3b30      	subs	r3, #48	; 0x30
 800b8b8:	2b09      	cmp	r3, #9
 800b8ba:	d94d      	bls.n	800b958 <_svfiprintf_r+0x17c>
 800b8bc:	b1b0      	cbz	r0, 800b8ec <_svfiprintf_r+0x110>
 800b8be:	9207      	str	r2, [sp, #28]
 800b8c0:	e014      	b.n	800b8ec <_svfiprintf_r+0x110>
 800b8c2:	eba0 0308 	sub.w	r3, r0, r8
 800b8c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	9304      	str	r3, [sp, #16]
 800b8ce:	46a2      	mov	sl, r4
 800b8d0:	e7d2      	b.n	800b878 <_svfiprintf_r+0x9c>
 800b8d2:	9b03      	ldr	r3, [sp, #12]
 800b8d4:	1d19      	adds	r1, r3, #4
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	9103      	str	r1, [sp, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	bfbb      	ittet	lt
 800b8de:	425b      	neglt	r3, r3
 800b8e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b8e4:	9307      	strge	r3, [sp, #28]
 800b8e6:	9307      	strlt	r3, [sp, #28]
 800b8e8:	bfb8      	it	lt
 800b8ea:	9204      	strlt	r2, [sp, #16]
 800b8ec:	7823      	ldrb	r3, [r4, #0]
 800b8ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b8f0:	d10c      	bne.n	800b90c <_svfiprintf_r+0x130>
 800b8f2:	7863      	ldrb	r3, [r4, #1]
 800b8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f6:	d134      	bne.n	800b962 <_svfiprintf_r+0x186>
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	1d1a      	adds	r2, r3, #4
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	9203      	str	r2, [sp, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	bfb8      	it	lt
 800b904:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b908:	3402      	adds	r4, #2
 800b90a:	9305      	str	r3, [sp, #20]
 800b90c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b9d4 <_svfiprintf_r+0x1f8>
 800b910:	7821      	ldrb	r1, [r4, #0]
 800b912:	2203      	movs	r2, #3
 800b914:	4650      	mov	r0, sl
 800b916:	f7f8 fc5b 	bl	80041d0 <memchr>
 800b91a:	b138      	cbz	r0, 800b92c <_svfiprintf_r+0x150>
 800b91c:	9b04      	ldr	r3, [sp, #16]
 800b91e:	eba0 000a 	sub.w	r0, r0, sl
 800b922:	2240      	movs	r2, #64	; 0x40
 800b924:	4082      	lsls	r2, r0
 800b926:	4313      	orrs	r3, r2
 800b928:	3401      	adds	r4, #1
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b930:	4825      	ldr	r0, [pc, #148]	; (800b9c8 <_svfiprintf_r+0x1ec>)
 800b932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b936:	2206      	movs	r2, #6
 800b938:	f7f8 fc4a 	bl	80041d0 <memchr>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d038      	beq.n	800b9b2 <_svfiprintf_r+0x1d6>
 800b940:	4b22      	ldr	r3, [pc, #136]	; (800b9cc <_svfiprintf_r+0x1f0>)
 800b942:	bb1b      	cbnz	r3, 800b98c <_svfiprintf_r+0x1b0>
 800b944:	9b03      	ldr	r3, [sp, #12]
 800b946:	3307      	adds	r3, #7
 800b948:	f023 0307 	bic.w	r3, r3, #7
 800b94c:	3308      	adds	r3, #8
 800b94e:	9303      	str	r3, [sp, #12]
 800b950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b952:	4433      	add	r3, r6
 800b954:	9309      	str	r3, [sp, #36]	; 0x24
 800b956:	e768      	b.n	800b82a <_svfiprintf_r+0x4e>
 800b958:	fb0c 3202 	mla	r2, ip, r2, r3
 800b95c:	460c      	mov	r4, r1
 800b95e:	2001      	movs	r0, #1
 800b960:	e7a6      	b.n	800b8b0 <_svfiprintf_r+0xd4>
 800b962:	2300      	movs	r3, #0
 800b964:	3401      	adds	r4, #1
 800b966:	9305      	str	r3, [sp, #20]
 800b968:	4619      	mov	r1, r3
 800b96a:	f04f 0c0a 	mov.w	ip, #10
 800b96e:	4620      	mov	r0, r4
 800b970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b974:	3a30      	subs	r2, #48	; 0x30
 800b976:	2a09      	cmp	r2, #9
 800b978:	d903      	bls.n	800b982 <_svfiprintf_r+0x1a6>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0c6      	beq.n	800b90c <_svfiprintf_r+0x130>
 800b97e:	9105      	str	r1, [sp, #20]
 800b980:	e7c4      	b.n	800b90c <_svfiprintf_r+0x130>
 800b982:	fb0c 2101 	mla	r1, ip, r1, r2
 800b986:	4604      	mov	r4, r0
 800b988:	2301      	movs	r3, #1
 800b98a:	e7f0      	b.n	800b96e <_svfiprintf_r+0x192>
 800b98c:	ab03      	add	r3, sp, #12
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	462a      	mov	r2, r5
 800b992:	4b0f      	ldr	r3, [pc, #60]	; (800b9d0 <_svfiprintf_r+0x1f4>)
 800b994:	a904      	add	r1, sp, #16
 800b996:	4638      	mov	r0, r7
 800b998:	f3af 8000 	nop.w
 800b99c:	1c42      	adds	r2, r0, #1
 800b99e:	4606      	mov	r6, r0
 800b9a0:	d1d6      	bne.n	800b950 <_svfiprintf_r+0x174>
 800b9a2:	89ab      	ldrh	r3, [r5, #12]
 800b9a4:	065b      	lsls	r3, r3, #25
 800b9a6:	f53f af2d 	bmi.w	800b804 <_svfiprintf_r+0x28>
 800b9aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ac:	b01d      	add	sp, #116	; 0x74
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	4b05      	ldr	r3, [pc, #20]	; (800b9d0 <_svfiprintf_r+0x1f4>)
 800b9ba:	a904      	add	r1, sp, #16
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f000 f879 	bl	800bab4 <_printf_i>
 800b9c2:	e7eb      	b.n	800b99c <_svfiprintf_r+0x1c0>
 800b9c4:	0800c0ea 	.word	0x0800c0ea
 800b9c8:	0800c0f4 	.word	0x0800c0f4
 800b9cc:	00000000 	.word	0x00000000
 800b9d0:	0800b729 	.word	0x0800b729
 800b9d4:	0800c0f0 	.word	0x0800c0f0

0800b9d8 <_printf_common>:
 800b9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9dc:	4616      	mov	r6, r2
 800b9de:	4699      	mov	r9, r3
 800b9e0:	688a      	ldr	r2, [r1, #8]
 800b9e2:	690b      	ldr	r3, [r1, #16]
 800b9e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	bfb8      	it	lt
 800b9ec:	4613      	movlt	r3, r2
 800b9ee:	6033      	str	r3, [r6, #0]
 800b9f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9f4:	4607      	mov	r7, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	b10a      	cbz	r2, 800b9fe <_printf_common+0x26>
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	6033      	str	r3, [r6, #0]
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	0699      	lsls	r1, r3, #26
 800ba02:	bf42      	ittt	mi
 800ba04:	6833      	ldrmi	r3, [r6, #0]
 800ba06:	3302      	addmi	r3, #2
 800ba08:	6033      	strmi	r3, [r6, #0]
 800ba0a:	6825      	ldr	r5, [r4, #0]
 800ba0c:	f015 0506 	ands.w	r5, r5, #6
 800ba10:	d106      	bne.n	800ba20 <_printf_common+0x48>
 800ba12:	f104 0a19 	add.w	sl, r4, #25
 800ba16:	68e3      	ldr	r3, [r4, #12]
 800ba18:	6832      	ldr	r2, [r6, #0]
 800ba1a:	1a9b      	subs	r3, r3, r2
 800ba1c:	42ab      	cmp	r3, r5
 800ba1e:	dc26      	bgt.n	800ba6e <_printf_common+0x96>
 800ba20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba24:	1e13      	subs	r3, r2, #0
 800ba26:	6822      	ldr	r2, [r4, #0]
 800ba28:	bf18      	it	ne
 800ba2a:	2301      	movne	r3, #1
 800ba2c:	0692      	lsls	r2, r2, #26
 800ba2e:	d42b      	bmi.n	800ba88 <_printf_common+0xb0>
 800ba30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba34:	4649      	mov	r1, r9
 800ba36:	4638      	mov	r0, r7
 800ba38:	47c0      	blx	r8
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	d01e      	beq.n	800ba7c <_printf_common+0xa4>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	6922      	ldr	r2, [r4, #16]
 800ba42:	f003 0306 	and.w	r3, r3, #6
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	bf02      	ittt	eq
 800ba4a:	68e5      	ldreq	r5, [r4, #12]
 800ba4c:	6833      	ldreq	r3, [r6, #0]
 800ba4e:	1aed      	subeq	r5, r5, r3
 800ba50:	68a3      	ldr	r3, [r4, #8]
 800ba52:	bf0c      	ite	eq
 800ba54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba58:	2500      	movne	r5, #0
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	bfc4      	itt	gt
 800ba5e:	1a9b      	subgt	r3, r3, r2
 800ba60:	18ed      	addgt	r5, r5, r3
 800ba62:	2600      	movs	r6, #0
 800ba64:	341a      	adds	r4, #26
 800ba66:	42b5      	cmp	r5, r6
 800ba68:	d11a      	bne.n	800baa0 <_printf_common+0xc8>
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	e008      	b.n	800ba80 <_printf_common+0xa8>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	4652      	mov	r2, sl
 800ba72:	4649      	mov	r1, r9
 800ba74:	4638      	mov	r0, r7
 800ba76:	47c0      	blx	r8
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d103      	bne.n	800ba84 <_printf_common+0xac>
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba84:	3501      	adds	r5, #1
 800ba86:	e7c6      	b.n	800ba16 <_printf_common+0x3e>
 800ba88:	18e1      	adds	r1, r4, r3
 800ba8a:	1c5a      	adds	r2, r3, #1
 800ba8c:	2030      	movs	r0, #48	; 0x30
 800ba8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba92:	4422      	add	r2, r4
 800ba94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba9c:	3302      	adds	r3, #2
 800ba9e:	e7c7      	b.n	800ba30 <_printf_common+0x58>
 800baa0:	2301      	movs	r3, #1
 800baa2:	4622      	mov	r2, r4
 800baa4:	4649      	mov	r1, r9
 800baa6:	4638      	mov	r0, r7
 800baa8:	47c0      	blx	r8
 800baaa:	3001      	adds	r0, #1
 800baac:	d0e6      	beq.n	800ba7c <_printf_common+0xa4>
 800baae:	3601      	adds	r6, #1
 800bab0:	e7d9      	b.n	800ba66 <_printf_common+0x8e>
	...

0800bab4 <_printf_i>:
 800bab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bab8:	7e0f      	ldrb	r7, [r1, #24]
 800baba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800babc:	2f78      	cmp	r7, #120	; 0x78
 800babe:	4691      	mov	r9, r2
 800bac0:	4680      	mov	r8, r0
 800bac2:	460c      	mov	r4, r1
 800bac4:	469a      	mov	sl, r3
 800bac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baca:	d807      	bhi.n	800badc <_printf_i+0x28>
 800bacc:	2f62      	cmp	r7, #98	; 0x62
 800bace:	d80a      	bhi.n	800bae6 <_printf_i+0x32>
 800bad0:	2f00      	cmp	r7, #0
 800bad2:	f000 80d4 	beq.w	800bc7e <_printf_i+0x1ca>
 800bad6:	2f58      	cmp	r7, #88	; 0x58
 800bad8:	f000 80c0 	beq.w	800bc5c <_printf_i+0x1a8>
 800badc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bae4:	e03a      	b.n	800bb5c <_printf_i+0xa8>
 800bae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800baea:	2b15      	cmp	r3, #21
 800baec:	d8f6      	bhi.n	800badc <_printf_i+0x28>
 800baee:	a101      	add	r1, pc, #4	; (adr r1, 800baf4 <_printf_i+0x40>)
 800baf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baf4:	0800bb4d 	.word	0x0800bb4d
 800baf8:	0800bb61 	.word	0x0800bb61
 800bafc:	0800badd 	.word	0x0800badd
 800bb00:	0800badd 	.word	0x0800badd
 800bb04:	0800badd 	.word	0x0800badd
 800bb08:	0800badd 	.word	0x0800badd
 800bb0c:	0800bb61 	.word	0x0800bb61
 800bb10:	0800badd 	.word	0x0800badd
 800bb14:	0800badd 	.word	0x0800badd
 800bb18:	0800badd 	.word	0x0800badd
 800bb1c:	0800badd 	.word	0x0800badd
 800bb20:	0800bc65 	.word	0x0800bc65
 800bb24:	0800bb8d 	.word	0x0800bb8d
 800bb28:	0800bc1f 	.word	0x0800bc1f
 800bb2c:	0800badd 	.word	0x0800badd
 800bb30:	0800badd 	.word	0x0800badd
 800bb34:	0800bc87 	.word	0x0800bc87
 800bb38:	0800badd 	.word	0x0800badd
 800bb3c:	0800bb8d 	.word	0x0800bb8d
 800bb40:	0800badd 	.word	0x0800badd
 800bb44:	0800badd 	.word	0x0800badd
 800bb48:	0800bc27 	.word	0x0800bc27
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	1d1a      	adds	r2, r3, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	602a      	str	r2, [r5, #0]
 800bb54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e09f      	b.n	800bca0 <_printf_i+0x1ec>
 800bb60:	6820      	ldr	r0, [r4, #0]
 800bb62:	682b      	ldr	r3, [r5, #0]
 800bb64:	0607      	lsls	r7, r0, #24
 800bb66:	f103 0104 	add.w	r1, r3, #4
 800bb6a:	6029      	str	r1, [r5, #0]
 800bb6c:	d501      	bpl.n	800bb72 <_printf_i+0xbe>
 800bb6e:	681e      	ldr	r6, [r3, #0]
 800bb70:	e003      	b.n	800bb7a <_printf_i+0xc6>
 800bb72:	0646      	lsls	r6, r0, #25
 800bb74:	d5fb      	bpl.n	800bb6e <_printf_i+0xba>
 800bb76:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bb7a:	2e00      	cmp	r6, #0
 800bb7c:	da03      	bge.n	800bb86 <_printf_i+0xd2>
 800bb7e:	232d      	movs	r3, #45	; 0x2d
 800bb80:	4276      	negs	r6, r6
 800bb82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb86:	485a      	ldr	r0, [pc, #360]	; (800bcf0 <_printf_i+0x23c>)
 800bb88:	230a      	movs	r3, #10
 800bb8a:	e012      	b.n	800bbb2 <_printf_i+0xfe>
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	6820      	ldr	r0, [r4, #0]
 800bb90:	1d19      	adds	r1, r3, #4
 800bb92:	6029      	str	r1, [r5, #0]
 800bb94:	0605      	lsls	r5, r0, #24
 800bb96:	d501      	bpl.n	800bb9c <_printf_i+0xe8>
 800bb98:	681e      	ldr	r6, [r3, #0]
 800bb9a:	e002      	b.n	800bba2 <_printf_i+0xee>
 800bb9c:	0641      	lsls	r1, r0, #25
 800bb9e:	d5fb      	bpl.n	800bb98 <_printf_i+0xe4>
 800bba0:	881e      	ldrh	r6, [r3, #0]
 800bba2:	4853      	ldr	r0, [pc, #332]	; (800bcf0 <_printf_i+0x23c>)
 800bba4:	2f6f      	cmp	r7, #111	; 0x6f
 800bba6:	bf0c      	ite	eq
 800bba8:	2308      	moveq	r3, #8
 800bbaa:	230a      	movne	r3, #10
 800bbac:	2100      	movs	r1, #0
 800bbae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbb2:	6865      	ldr	r5, [r4, #4]
 800bbb4:	60a5      	str	r5, [r4, #8]
 800bbb6:	2d00      	cmp	r5, #0
 800bbb8:	bfa2      	ittt	ge
 800bbba:	6821      	ldrge	r1, [r4, #0]
 800bbbc:	f021 0104 	bicge.w	r1, r1, #4
 800bbc0:	6021      	strge	r1, [r4, #0]
 800bbc2:	b90e      	cbnz	r6, 800bbc8 <_printf_i+0x114>
 800bbc4:	2d00      	cmp	r5, #0
 800bbc6:	d04b      	beq.n	800bc60 <_printf_i+0x1ac>
 800bbc8:	4615      	mov	r5, r2
 800bbca:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbce:	fb03 6711 	mls	r7, r3, r1, r6
 800bbd2:	5dc7      	ldrb	r7, [r0, r7]
 800bbd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbd8:	4637      	mov	r7, r6
 800bbda:	42bb      	cmp	r3, r7
 800bbdc:	460e      	mov	r6, r1
 800bbde:	d9f4      	bls.n	800bbca <_printf_i+0x116>
 800bbe0:	2b08      	cmp	r3, #8
 800bbe2:	d10b      	bne.n	800bbfc <_printf_i+0x148>
 800bbe4:	6823      	ldr	r3, [r4, #0]
 800bbe6:	07de      	lsls	r6, r3, #31
 800bbe8:	d508      	bpl.n	800bbfc <_printf_i+0x148>
 800bbea:	6923      	ldr	r3, [r4, #16]
 800bbec:	6861      	ldr	r1, [r4, #4]
 800bbee:	4299      	cmp	r1, r3
 800bbf0:	bfde      	ittt	le
 800bbf2:	2330      	movle	r3, #48	; 0x30
 800bbf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbf8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bbfc:	1b52      	subs	r2, r2, r5
 800bbfe:	6122      	str	r2, [r4, #16]
 800bc00:	f8cd a000 	str.w	sl, [sp]
 800bc04:	464b      	mov	r3, r9
 800bc06:	aa03      	add	r2, sp, #12
 800bc08:	4621      	mov	r1, r4
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	f7ff fee4 	bl	800b9d8 <_printf_common>
 800bc10:	3001      	adds	r0, #1
 800bc12:	d14a      	bne.n	800bcaa <_printf_i+0x1f6>
 800bc14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc18:	b004      	add	sp, #16
 800bc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	f043 0320 	orr.w	r3, r3, #32
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	4833      	ldr	r0, [pc, #204]	; (800bcf4 <_printf_i+0x240>)
 800bc28:	2778      	movs	r7, #120	; 0x78
 800bc2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc2e:	6823      	ldr	r3, [r4, #0]
 800bc30:	6829      	ldr	r1, [r5, #0]
 800bc32:	061f      	lsls	r7, r3, #24
 800bc34:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc38:	d402      	bmi.n	800bc40 <_printf_i+0x18c>
 800bc3a:	065f      	lsls	r7, r3, #25
 800bc3c:	bf48      	it	mi
 800bc3e:	b2b6      	uxthmi	r6, r6
 800bc40:	07df      	lsls	r7, r3, #31
 800bc42:	bf48      	it	mi
 800bc44:	f043 0320 	orrmi.w	r3, r3, #32
 800bc48:	6029      	str	r1, [r5, #0]
 800bc4a:	bf48      	it	mi
 800bc4c:	6023      	strmi	r3, [r4, #0]
 800bc4e:	b91e      	cbnz	r6, 800bc58 <_printf_i+0x1a4>
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	f023 0320 	bic.w	r3, r3, #32
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	2310      	movs	r3, #16
 800bc5a:	e7a7      	b.n	800bbac <_printf_i+0xf8>
 800bc5c:	4824      	ldr	r0, [pc, #144]	; (800bcf0 <_printf_i+0x23c>)
 800bc5e:	e7e4      	b.n	800bc2a <_printf_i+0x176>
 800bc60:	4615      	mov	r5, r2
 800bc62:	e7bd      	b.n	800bbe0 <_printf_i+0x12c>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	6826      	ldr	r6, [r4, #0]
 800bc68:	6961      	ldr	r1, [r4, #20]
 800bc6a:	1d18      	adds	r0, r3, #4
 800bc6c:	6028      	str	r0, [r5, #0]
 800bc6e:	0635      	lsls	r5, r6, #24
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	d501      	bpl.n	800bc78 <_printf_i+0x1c4>
 800bc74:	6019      	str	r1, [r3, #0]
 800bc76:	e002      	b.n	800bc7e <_printf_i+0x1ca>
 800bc78:	0670      	lsls	r0, r6, #25
 800bc7a:	d5fb      	bpl.n	800bc74 <_printf_i+0x1c0>
 800bc7c:	8019      	strh	r1, [r3, #0]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	4615      	mov	r5, r2
 800bc84:	e7bc      	b.n	800bc00 <_printf_i+0x14c>
 800bc86:	682b      	ldr	r3, [r5, #0]
 800bc88:	1d1a      	adds	r2, r3, #4
 800bc8a:	602a      	str	r2, [r5, #0]
 800bc8c:	681d      	ldr	r5, [r3, #0]
 800bc8e:	6862      	ldr	r2, [r4, #4]
 800bc90:	2100      	movs	r1, #0
 800bc92:	4628      	mov	r0, r5
 800bc94:	f7f8 fa9c 	bl	80041d0 <memchr>
 800bc98:	b108      	cbz	r0, 800bc9e <_printf_i+0x1ea>
 800bc9a:	1b40      	subs	r0, r0, r5
 800bc9c:	6060      	str	r0, [r4, #4]
 800bc9e:	6863      	ldr	r3, [r4, #4]
 800bca0:	6123      	str	r3, [r4, #16]
 800bca2:	2300      	movs	r3, #0
 800bca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bca8:	e7aa      	b.n	800bc00 <_printf_i+0x14c>
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	462a      	mov	r2, r5
 800bcae:	4649      	mov	r1, r9
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	47d0      	blx	sl
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	d0ad      	beq.n	800bc14 <_printf_i+0x160>
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	079b      	lsls	r3, r3, #30
 800bcbc:	d413      	bmi.n	800bce6 <_printf_i+0x232>
 800bcbe:	68e0      	ldr	r0, [r4, #12]
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	4298      	cmp	r0, r3
 800bcc4:	bfb8      	it	lt
 800bcc6:	4618      	movlt	r0, r3
 800bcc8:	e7a6      	b.n	800bc18 <_printf_i+0x164>
 800bcca:	2301      	movs	r3, #1
 800bccc:	4632      	mov	r2, r6
 800bcce:	4649      	mov	r1, r9
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	47d0      	blx	sl
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	d09d      	beq.n	800bc14 <_printf_i+0x160>
 800bcd8:	3501      	adds	r5, #1
 800bcda:	68e3      	ldr	r3, [r4, #12]
 800bcdc:	9903      	ldr	r1, [sp, #12]
 800bcde:	1a5b      	subs	r3, r3, r1
 800bce0:	42ab      	cmp	r3, r5
 800bce2:	dcf2      	bgt.n	800bcca <_printf_i+0x216>
 800bce4:	e7eb      	b.n	800bcbe <_printf_i+0x20a>
 800bce6:	2500      	movs	r5, #0
 800bce8:	f104 0619 	add.w	r6, r4, #25
 800bcec:	e7f5      	b.n	800bcda <_printf_i+0x226>
 800bcee:	bf00      	nop
 800bcf0:	0800c0fb 	.word	0x0800c0fb
 800bcf4:	0800c10c 	.word	0x0800c10c

0800bcf8 <memmove>:
 800bcf8:	4288      	cmp	r0, r1
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	eb01 0402 	add.w	r4, r1, r2
 800bd00:	d902      	bls.n	800bd08 <memmove+0x10>
 800bd02:	4284      	cmp	r4, r0
 800bd04:	4623      	mov	r3, r4
 800bd06:	d807      	bhi.n	800bd18 <memmove+0x20>
 800bd08:	1e43      	subs	r3, r0, #1
 800bd0a:	42a1      	cmp	r1, r4
 800bd0c:	d008      	beq.n	800bd20 <memmove+0x28>
 800bd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd16:	e7f8      	b.n	800bd0a <memmove+0x12>
 800bd18:	4402      	add	r2, r0
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	428a      	cmp	r2, r1
 800bd1e:	d100      	bne.n	800bd22 <memmove+0x2a>
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd2a:	e7f7      	b.n	800bd1c <memmove+0x24>

0800bd2c <_realloc_r>:
 800bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd30:	4680      	mov	r8, r0
 800bd32:	4614      	mov	r4, r2
 800bd34:	460e      	mov	r6, r1
 800bd36:	b921      	cbnz	r1, 800bd42 <_realloc_r+0x16>
 800bd38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	f7ff bba9 	b.w	800b494 <_malloc_r>
 800bd42:	b92a      	cbnz	r2, 800bd50 <_realloc_r+0x24>
 800bd44:	f7ff fca4 	bl	800b690 <_free_r>
 800bd48:	4625      	mov	r5, r4
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	f000 f81b 	bl	800bd8a <_malloc_usable_size_r>
 800bd54:	4284      	cmp	r4, r0
 800bd56:	4607      	mov	r7, r0
 800bd58:	d802      	bhi.n	800bd60 <_realloc_r+0x34>
 800bd5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd5e:	d812      	bhi.n	800bd86 <_realloc_r+0x5a>
 800bd60:	4621      	mov	r1, r4
 800bd62:	4640      	mov	r0, r8
 800bd64:	f7ff fb96 	bl	800b494 <_malloc_r>
 800bd68:	4605      	mov	r5, r0
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d0ed      	beq.n	800bd4a <_realloc_r+0x1e>
 800bd6e:	42bc      	cmp	r4, r7
 800bd70:	4622      	mov	r2, r4
 800bd72:	4631      	mov	r1, r6
 800bd74:	bf28      	it	cs
 800bd76:	463a      	movcs	r2, r7
 800bd78:	f7ff fc7c 	bl	800b674 <memcpy>
 800bd7c:	4631      	mov	r1, r6
 800bd7e:	4640      	mov	r0, r8
 800bd80:	f7ff fc86 	bl	800b690 <_free_r>
 800bd84:	e7e1      	b.n	800bd4a <_realloc_r+0x1e>
 800bd86:	4635      	mov	r5, r6
 800bd88:	e7df      	b.n	800bd4a <_realloc_r+0x1e>

0800bd8a <_malloc_usable_size_r>:
 800bd8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd8e:	1f18      	subs	r0, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	bfbc      	itt	lt
 800bd94:	580b      	ldrlt	r3, [r1, r0]
 800bd96:	18c0      	addlt	r0, r0, r3
 800bd98:	4770      	bx	lr
	...

0800bd9c <_init>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	bf00      	nop
 800bda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda2:	bc08      	pop	{r3}
 800bda4:	469e      	mov	lr, r3
 800bda6:	4770      	bx	lr

0800bda8 <_fini>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	bf00      	nop
 800bdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdae:	bc08      	pop	{r3}
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	4770      	bx	lr
 800bdb4:	0000      	movs	r0, r0
	...
